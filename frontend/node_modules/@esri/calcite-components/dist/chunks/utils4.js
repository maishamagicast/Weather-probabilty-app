/*! All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://github.com/Esri/calcite-design-system/blob/dev/LICENSE.md for details.
v3.3.2 */
import { isServer } from "lit";
import { n as nodeListToArray } from "./dom.js";
import { A as AllComboboxChildrenSelector, C as ComboboxItemSelector, a as ComboboxItemGroupSelector } from "./resources6.js";
function getAncestors(element) {
  const parent = element.parentElement?.closest(AllComboboxChildrenSelector);
  const grandparent = parent?.parentElement?.closest(AllComboboxChildrenSelector);
  return [parent, grandparent].filter((el) => el);
}
function getItemAncestors(item) {
  return item.ancestors?.filter((el) => el.nodeName === "CALCITE-COMBOBOX-ITEM") || [];
}
function getItemChildren(item) {
  return nodeListToArray(item.querySelectorAll("calcite-combobox-item"));
}
function hasActiveChildren(node) {
  const items = nodeListToArray(node.querySelectorAll("calcite-combobox-item"));
  return items.filter((item) => item.selected).length > 0;
}
function getDepth(element) {
  if (isServer) {
    return 0;
  }
  const result = document.evaluate(
    "ancestor::calcite-combobox-item | ancestor::calcite-combobox-item-group",
    element,
    null,
    XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE,
    null
  );
  const depth = result.snapshotLength;
  if (depth > 0 && element.nodeName === ComboboxItemSelector) {
    for (let i = 0; i < depth; i++) {
      const parent = result.snapshotItem(i);
      if (parent.nodeName === ComboboxItemGroupSelector) {
        return depth;
      }
    }
  } else if (element.nodeName === ComboboxItemGroupSelector) {
    return depth;
  }
  return depth + 1;
}
function isSingleLike(selectionMode) {
  return selectionMode.includes("single");
}
function getLabel(item) {
  return item.shortHeading || item.heading || item.textLabel;
}
export {
  getDepth as a,
  getLabel as b,
  getItemAncestors as c,
  getItemChildren as d,
  getAncestors as g,
  hasActiveChildren as h,
  isSingleLike as i
};
