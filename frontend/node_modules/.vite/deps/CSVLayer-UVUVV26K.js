import {
  Xe
} from "./chunk-C5CBDIA7.js";
import "./chunk-AZEP7CSW.js";
import "./chunk-OWKLTNBY.js";
import "./chunk-QTUVUQOQ.js";
import "./chunk-JXBJIDCW.js";
import "./chunk-RAGXHCS7.js";
import "./chunk-PJNFSNDQ.js";
import "./chunk-5SFHR6UX.js";
import "./chunk-6MTOD3IG.js";
import "./chunk-37SJUCLT.js";
import "./chunk-IRVDJYGL.js";
import "./chunk-6CJTWEUR.js";
import "./chunk-5ZJG2W6X.js";
import "./chunk-UVVPMLPB.js";
import "./chunk-EYECC3PG.js";
import "./chunk-LUPQ25XG.js";
import "./chunk-DJRZXLB2.js";
import "./chunk-L6GG77AZ.js";
import "./chunk-XOKYRVJ5.js";
import "./chunk-GBOUNRWE.js";
import "./chunk-OLNO472C.js";
import "./chunk-ROOICUH3.js";
import "./chunk-YWISQGMO.js";
import "./chunk-EU5HNJUP.js";
import "./chunk-2WPJ2N7Z.js";
import "./chunk-YKZMZKSQ.js";
import "./chunk-4MVMXF4W.js";
import "./chunk-RY6GJKN7.js";
import "./chunk-EZYDA2X4.js";
import "./chunk-XOTDRYLO.js";
import "./chunk-QHD5R6KE.js";
import "./chunk-XOOEFPJ4.js";
import "./chunk-PTLGJ4Y6.js";
import "./chunk-TSUTFMFQ.js";
import {
  y
} from "./chunk-XANJHPFP.js";
import "./chunk-OUR2XGMQ.js";
import "./chunk-YIVJSMJO.js";
import "./chunk-UICDKBDP.js";
import "./chunk-AUHP32YH.js";
import "./chunk-AY3JR4QM.js";
import "./chunk-UXVQ5YGS.js";
import "./chunk-A2AZM62Y.js";
import "./chunk-ZT7UIVVR.js";
import "./chunk-FV6ZNHFI.js";
import "./chunk-BZSAIP56.js";
import "./chunk-QMLCJTBC.js";
import "./chunk-CEHNSC4S.js";
import "./chunk-GYJ4UTXD.js";
import "./chunk-BMKLG7HR.js";
import "./chunk-SCZN6GUJ.js";
import "./chunk-OUFI3E5Y.js";
import "./chunk-QOICX6SF.js";
import "./chunk-LUNNU672.js";
import "./chunk-FFY3IMAS.js";
import "./chunk-DJ5QZHL6.js";
import "./chunk-IR6JOM7Y.js";
import {
  g
} from "./chunk-YR234R2O.js";
import "./chunk-FI3Y4ZNX.js";
import "./chunk-M6LH7ANK.js";
import "./chunk-FTX3VFJX.js";
import "./chunk-COXNSOYZ.js";
import "./chunk-PHSQVJNW.js";
import "./chunk-KFNWBWN4.js";
import "./chunk-K5CV62SX.js";
import "./chunk-S7GLMIAQ.js";
import "./chunk-SUYBRL4O.js";
import "./chunk-EMULKSUV.js";
import {
  p as p2
} from "./chunk-2CDQ56FJ.js";
import "./chunk-3YHKSRHV.js";
import {
  R
} from "./chunk-ZBTRSUIE.js";
import "./chunk-D6GGPM6D.js";
import "./chunk-U2JVYDTA.js";
import "./chunk-HH4Q2NN5.js";
import "./chunk-3CFYBBSV.js";
import "./chunk-AACFCXAP.js";
import "./chunk-VCKINPGN.js";
import "./chunk-SDCRJECE.js";
import "./chunk-4G42CJX6.js";
import "./chunk-NEI5HAVK.js";
import "./chunk-D7G7U7XX.js";
import "./chunk-2CS746FZ.js";
import "./chunk-UET4BL4J.js";
import "./chunk-YMT7TAQQ.js";
import "./chunk-RZGBA4KS.js";
import "./chunk-FSYN2HHU.js";
import "./chunk-7I4TWCTW.js";
import "./chunk-SCMB64VM.js";
import "./chunk-MBJ7YPSH.js";
import "./chunk-D34PNYRG.js";
import "./chunk-APMQAZ5Z.js";
import "./chunk-LNLFY27J.js";
import "./chunk-P4O4YCLI.js";
import "./chunk-MSSQA3XK.js";
import "./chunk-R7YP6EQJ.js";
import "./chunk-3GQTEESV.js";
import "./chunk-RYQ7D3GL.js";
import "./chunk-HOVLU5XA.js";
import "./chunk-EWP4DLQF.js";
import "./chunk-CHGKJUJ3.js";
import "./chunk-3YBQQHIP.js";
import "./chunk-OJQCHQYS.js";
import "./chunk-N3W3EVP3.js";
import "./chunk-5BYUGSWZ.js";
import "./chunk-SIRTOV2N.js";
import "./chunk-ORRXYRSR.js";
import "./chunk-OFINLTIW.js";
import "./chunk-Y3I5OGQC.js";
import "./chunk-K55CXVYD.js";
import "./chunk-M4XVX74D.js";
import "./chunk-UZ3YWBWC.js";
import "./chunk-2EOHKZLO.js";
import "./chunk-3M6ALZOH.js";
import "./chunk-QPV4BKBC.js";
import "./chunk-LQQCPLIT.js";
import "./chunk-4O46EK5T.js";
import "./chunk-A7I2KMJU.js";
import "./chunk-BPI4BR4E.js";
import "./chunk-3L5JZOMH.js";
import "./chunk-N77BULFI.js";
import "./chunk-NEIJCC5O.js";
import "./chunk-UMUW6RKM.js";
import "./chunk-XRTNDGK2.js";
import "./chunk-A6R2FXH6.js";
import "./chunk-H6ZVHKNF.js";
import "./chunk-YAXW2DL6.js";
import "./chunk-4KZLIAP7.js";
import "./chunk-62NATJWT.js";
import "./chunk-FOPBVVXE.js";
import "./chunk-INI6MHIQ.js";
import "./chunk-QUZZIDFR.js";
import "./chunk-CBCDVQSA.js";
import "./chunk-RKF6WUZT.js";
import "./chunk-RMRI4NYS.js";
import "./chunk-YYLIW24Q.js";
import "./chunk-B7BH33JH.js";
import "./chunk-BLBN3L5Q.js";
import "./chunk-XNUSHDFN.js";
import "./chunk-4AKMPOG7.js";
import "./chunk-2CJBZZN7.js";
import "./chunk-ZJQPHR3K.js";
import "./chunk-R4XAU2TW.js";
import "./chunk-YVMULGDJ.js";
import "./chunk-3LLHBKLI.js";
import "./chunk-74GULGYB.js";
import "./chunk-HYAO4PVV.js";
import "./chunk-SRNKPAJX.js";
import "./chunk-VNQUG2TO.js";
import "./chunk-MOMLPET6.js";
import "./chunk-3QHX4R4B.js";
import "./chunk-ORMKIVR7.js";
import {
  p
} from "./chunk-TOCH3L2K.js";
import "./chunk-EULNFFHG.js";
import "./chunk-SDIBXPSJ.js";
import {
  z
} from "./chunk-CBXZL53X.js";
import "./chunk-LPCUYJ2B.js";
import "./chunk-SMO33YG7.js";
import {
  f as f2
} from "./chunk-LCBAL6ER.js";
import "./chunk-6JCZVSRM.js";
import "./chunk-LLGOMKTE.js";
import "./chunk-ZB6KRLRI.js";
import "./chunk-67AKDROO.js";
import "./chunk-CM3TIXEV.js";
import {
  f2 as f,
  h
} from "./chunk-POWGZO3T.js";
import {
  I
} from "./chunk-OUZJZB6I.js";
import {
  o
} from "./chunk-NJZD7WM5.js";
import "./chunk-CL7VLXUR.js";
import "./chunk-FCX4ZA3Z.js";
import {
  m2 as m
} from "./chunk-2ZPU5IZX.js";
import {
  a2
} from "./chunk-S62CSPIH.js";
import "./chunk-X26VPODZ.js";
import "./chunk-XNYPRDKK.js";
import {
  r
} from "./chunk-Y4BWIIWH.js";
import "./chunk-TTJIKWMC.js";
import "./chunk-CMEG2CKL.js";
import "./chunk-VHPBXBDE.js";
import "./chunk-6ACTD4UJ.js";
import "./chunk-5REYU5G2.js";
import "./chunk-JNYZ3I5R.js";
import {
  a,
  k
} from "./chunk-N626Y23H.js";
import {
  s2 as s
} from "./chunk-TJPLHZCD.js";
import {
  has
} from "./chunk-KLFJ5V5G.js";
import "./chunk-G26ADAPQ.js";

// node_modules/@arcgis/core/layers/graphics/sources/CSVSource.js
var c = class extends p {
  constructor(t) {
    super(t), this.type = "csv", this.refresh = k((async (t2) => {
      await this.load();
      const { extent: e, timeExtent: o2 } = await this._connection.invoke("refresh", t2);
      return e && (this.sourceJSON.extent = e), o2 && (this.sourceJSON.timeInfo.timeExtent = [o2.start, o2.end]), { dataChanged: true, updates: { extent: this.sourceJSON.extent, timeInfo: this.sourceJSON.timeInfo } };
    }));
  }
  load(t) {
    const e = null != t ? t.signal : null;
    return this.addResolvingPromise(this._startWorker(e)), Promise.resolve(this);
  }
  destroy() {
    this._connection?.close(), this._connection = null;
  }
  async openPorts() {
    return await this.load(), this._connection.openPorts();
  }
  async queryFeatures(t, e = {}) {
    await this.load(e);
    const o2 = await this._connection.invoke("queryFeatures", t ? t.toJSON() : null, e);
    return g.fromJSON(o2);
  }
  async queryFeaturesJSON(t, e = {}) {
    return await this.load(e), this._connection.invoke("queryFeatures", t ? t.toJSON() : null, e);
  }
  async queryFeatureCount(t, e = {}) {
    return await this.load(e), this._connection.invoke("queryFeatureCount", t ? t.toJSON() : null, e);
  }
  async queryObjectIds(t, e = {}) {
    return await this.load(e), this._connection.invoke("queryObjectIds", t ? t.toJSON() : null, e);
  }
  async queryExtent(t, e = {}) {
    await this.load(e);
    const o2 = await this._connection.invoke("queryExtent", t ? t.toJSON() : null, e);
    return { count: o2.count, extent: z.fromJSON(o2.extent) };
  }
  async querySnapping(t, e = {}) {
    return await this.load(e), this._connection.invoke("querySnapping", t, e);
  }
  async queryAttributeBins(t, e = {}) {
    return await this.load(), this._connection.invoke("queryAttributeBins", t ? t.toJSON() : null, e);
  }
  async _startWorker(t) {
    this._connection = await p2("CSVSourceWorker", { strategy: has("feature-layers-workers") ? "dedicated" : "local", signal: t, registryTarget: this });
    const { url: e, delimiter: o2, fields: i, latitudeField: s2, longitudeField: n, spatialReference: a3, timeInfo: c2 } = this.loadOptions, u = await this._connection.invoke("load", { url: e, customParameters: this.customParameters, parsingOptions: { delimiter: o2, fields: i?.map(((t2) => t2.toJSON())), latitudeField: s2, longitudeField: n, spatialReference: a3?.toJSON(), timeInfo: c2?.toJSON() } }, { signal: t });
    this.locationInfo = u.locationInfo, this.sourceJSON = u.layerDefinition, this.delimiter = u.delimiter;
  }
};
r([m()], c.prototype, "type", void 0), r([m()], c.prototype, "loadOptions", void 0), r([m()], c.prototype, "customParameters", void 0), r([m()], c.prototype, "locationInfo", void 0), r([m()], c.prototype, "sourceJSON", void 0), r([m()], c.prototype, "delimiter", void 0), c = r([a2("esri.layers.graphics.sources.CSVSource")], c);

// node_modules/@arcgis/core/layers/CSVLayer.js
function h2(e, r2) {
  throw new s(r2, `CSVLayer (title: ${e.title}, id: ${e.id}) cannot be saved to a portal item`);
}
var m2 = class extends Xe {
  constructor(...e) {
    super(...e), this.geometryType = "point", this.capabilities = y(false, false), this.delimiter = null, this.editingEnabled = false, this.fields = null, this.latitudeField = null, this.locationType = "coordinates", this.longitudeField = null, this.operationalLayerType = "CSV", this.outFields = ["*"], this.path = null, this.spatialReference = f2.WGS84, this.source = null, this.type = "csv";
  }
  normalizeCtorArgs(e, t) {
    return "string" == typeof e ? { url: e, ...t } : e;
  }
  load(e) {
    const t = null != e ? e.signal : null, i = this.loadFromPortal({ supportedTypes: ["CSV"], supportsData: false }, e).catch(a).then((async () => this.initLayerProperties(await this.createGraphicsSource(t))));
    return this.addResolvingPromise(i), Promise.resolve(this);
  }
  get isTable() {
    return this.loaded && null == this.geometryType;
  }
  readWebMapLabelsVisible(e, t) {
    return null != t.showLabels ? t.showLabels : !!t.layerDefinition?.drawingInfo?.labelingInfo;
  }
  set url(e) {
    if (!e) return void this._set("url", e);
    const t = I(e);
    this._set("url", t.path), t.query && (this.customParameters = { ...this.customParameters, ...t.query });
  }
  async createGraphicsSource(e) {
    const t = new c({ loadOptions: { delimiter: this.delimiter, fields: this.fields, latitudeField: this.latitudeField ?? void 0, longitudeField: this.longitudeField ?? void 0, spatialReference: this.spatialReference ?? void 0, timeInfo: this.timeInfo ?? void 0, url: this.url }, customParameters: this.customParameters ?? void 0 });
    return this._set("source", t), await t.load({ signal: e }), this.read({ locationInfo: t.locationInfo, columnDelimiter: t.delimiter }, { origin: "service", url: this.parsedUrl }), t;
  }
  queryFeatures(e, t) {
    return this.load().then((() => this.source.queryFeatures(R.from(e) || this.createQuery()))).then(((e2) => {
      if (e2?.features) for (const t2 of e2.features) t2.layer = t2.sourceLayer = this;
      return e2;
    }));
  }
  async queryObjectIds(e, t) {
    return await this.load(), this.source.queryObjectIds(R.from(e) || this.createQuery());
  }
  queryFeatureCount(e, t) {
    return this.load().then((() => this.source.queryFeatureCount(R.from(e) || this.createQuery())));
  }
  queryExtent(e, t) {
    return this.load().then((() => this.source.queryExtent(R.from(e) || this.createQuery())));
  }
  read(e, t) {
    super.read(e, t), t && "service" === t.origin && this.revert(["latitudeField", "longitudeField"], "service");
  }
  write(e, t) {
    return super.write(e, { ...t, writeLayerSchema: true });
  }
  clone() {
    throw new s("csv-layer:clone", `CSVLayer (title: ${this.title}, id: ${this.id}) cannot be cloned`);
  }
  async save(e) {
    return h2(this, "csv-layer:save");
  }
  async saveAs(e, t) {
    return h2(this, "csv-layer:save-as");
  }
  async hasDataChanged() {
    try {
      const { dataChanged: e, updates: t } = await this.source.refresh(this.customParameters);
      return null != t && this.read(t, { origin: "service", url: this.parsedUrl, ignoreDefaults: true }), e;
    } catch {
    }
    return false;
  }
  _verifyFields() {
  }
  _verifySource() {
  }
  _hasMemorySource() {
    return false;
  }
};
r([m({ readOnly: true, json: { read: false, write: false } })], m2.prototype, "capabilities", void 0), r([m({ type: [",", " ", ";", "|", "	"], json: { read: { source: "columnDelimiter" }, write: { target: "columnDelimiter", ignoreOrigin: true } } })], m2.prototype, "delimiter", void 0), r([m({ readOnly: true, type: Boolean, json: { origins: { "web-scene": { read: false, write: false } } } })], m2.prototype, "editingEnabled", void 0), r([m({ json: { read: { source: "layerDefinition.fields" }, write: { target: "layerDefinition.fields" } } })], m2.prototype, "fields", void 0), r([m({ type: Boolean, readOnly: true })], m2.prototype, "isTable", null), r([o("web-map", "labelsVisible", ["layerDefinition.drawingInfo.labelingInfo", "showLabels"])], m2.prototype, "readWebMapLabelsVisible", null), r([m({ type: String, json: { read: { source: "locationInfo.latitudeFieldName" }, write: { target: "locationInfo.latitudeFieldName", ignoreOrigin: true } } })], m2.prototype, "latitudeField", void 0), r([m({ type: ["show", "hide"] })], m2.prototype, "listMode", void 0), r([m({ type: ["coordinates"], json: { read: { source: "locationInfo.locationType" }, write: { target: "locationInfo.locationType", ignoreOrigin: true, isRequired: true } } })], m2.prototype, "locationType", void 0), r([m({ type: String, json: { read: { source: "locationInfo.longitudeFieldName" }, write: { target: "locationInfo.longitudeFieldName", ignoreOrigin: true } } })], m2.prototype, "longitudeField", void 0), r([m({ type: ["CSV"] })], m2.prototype, "operationalLayerType", void 0), r([m()], m2.prototype, "outFields", void 0), r([m({ type: String, json: { origins: { "web-scene": { read: false, write: false } }, read: false, write: false } })], m2.prototype, "path", void 0), r([m({ json: { read: false }, cast: null, type: c, readOnly: true })], m2.prototype, "source", void 0), r([m({ json: { read: false }, value: "csv", readOnly: true })], m2.prototype, "type", void 0), r([m({ json: { read: f, write: { isRequired: true, ignoreOrigin: true, writer: h } } })], m2.prototype, "url", null), m2 = r([a2("esri.layers.CSVLayer")], m2);
var f3 = m2;
export {
  f3 as default
};
//# sourceMappingURL=CSVLayer-UVUVV26K.js.map
