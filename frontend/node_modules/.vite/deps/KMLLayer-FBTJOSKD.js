import {
  S as S2,
  d,
  g,
  j as j3
} from "./chunk-IAKE5XKP.js";
import "./chunk-RAGXHCS7.js";
import "./chunk-ROOICUH3.js";
import "./chunk-2WPJ2N7Z.js";
import "./chunk-EZYDA2X4.js";
import "./chunk-TSUTFMFQ.js";
import "./chunk-UICDKBDP.js";
import "./chunk-AUHP32YH.js";
import "./chunk-AY3JR4QM.js";
import "./chunk-A2AZM62Y.js";
import {
  l as l3
} from "./chunk-LBDNG364.js";
import "./chunk-SCZN6GUJ.js";
import "./chunk-OUFI3E5Y.js";
import "./chunk-QOICX6SF.js";
import "./chunk-LUNNU672.js";
import "./chunk-FFY3IMAS.js";
import "./chunk-DJ5QZHL6.js";
import "./chunk-IR6JOM7Y.js";
import "./chunk-YR234R2O.js";
import "./chunk-FI3Y4ZNX.js";
import "./chunk-M6LH7ANK.js";
import "./chunk-FTX3VFJX.js";
import "./chunk-COXNSOYZ.js";
import "./chunk-PHSQVJNW.js";
import "./chunk-KFNWBWN4.js";
import "./chunk-S7GLMIAQ.js";
import "./chunk-SUYBRL4O.js";
import "./chunk-EMULKSUV.js";
import "./chunk-HH4Q2NN5.js";
import "./chunk-3CFYBBSV.js";
import "./chunk-VCKINPGN.js";
import "./chunk-SDCRJECE.js";
import "./chunk-4G42CJX6.js";
import "./chunk-NEI5HAVK.js";
import "./chunk-D7G7U7XX.js";
import "./chunk-2CS746FZ.js";
import "./chunk-UET4BL4J.js";
import "./chunk-YMT7TAQQ.js";
import "./chunk-RZGBA4KS.js";
import "./chunk-FSYN2HHU.js";
import "./chunk-7I4TWCTW.js";
import "./chunk-SCMB64VM.js";
import "./chunk-MBJ7YPSH.js";
import "./chunk-D34PNYRG.js";
import "./chunk-APMQAZ5Z.js";
import "./chunk-R7YP6EQJ.js";
import {
  f as f2
} from "./chunk-EWP4DLQF.js";
import {
  p as p2
} from "./chunk-CHGKJUJ3.js";
import "./chunk-3YBQQHIP.js";
import "./chunk-OJQCHQYS.js";
import {
  t
} from "./chunk-N3W3EVP3.js";
import {
  b2 as b,
  y
} from "./chunk-5BYUGSWZ.js";
import "./chunk-SIRTOV2N.js";
import {
  j as j2
} from "./chunk-ORRXYRSR.js";
import {
  S
} from "./chunk-OFINLTIW.js";
import "./chunk-Y3I5OGQC.js";
import "./chunk-K55CXVYD.js";
import "./chunk-M4XVX74D.js";
import "./chunk-UZ3YWBWC.js";
import "./chunk-2EOHKZLO.js";
import "./chunk-3M6ALZOH.js";
import "./chunk-QPV4BKBC.js";
import "./chunk-LQQCPLIT.js";
import "./chunk-4O46EK5T.js";
import {
  h
} from "./chunk-A7I2KMJU.js";
import "./chunk-BPI4BR4E.js";
import "./chunk-3L5JZOMH.js";
import "./chunk-N77BULFI.js";
import "./chunk-NEIJCC5O.js";
import "./chunk-UMUW6RKM.js";
import "./chunk-XRTNDGK2.js";
import "./chunk-A6R2FXH6.js";
import "./chunk-H6ZVHKNF.js";
import "./chunk-YAXW2DL6.js";
import "./chunk-4KZLIAP7.js";
import "./chunk-62NATJWT.js";
import "./chunk-FOPBVVXE.js";
import "./chunk-INI6MHIQ.js";
import "./chunk-QUZZIDFR.js";
import "./chunk-CBCDVQSA.js";
import "./chunk-RKF6WUZT.js";
import "./chunk-RMRI4NYS.js";
import "./chunk-YYLIW24Q.js";
import "./chunk-B7BH33JH.js";
import "./chunk-BLBN3L5Q.js";
import "./chunk-XNUSHDFN.js";
import "./chunk-4AKMPOG7.js";
import "./chunk-2CJBZZN7.js";
import "./chunk-ZJQPHR3K.js";
import "./chunk-R4XAU2TW.js";
import "./chunk-YVMULGDJ.js";
import "./chunk-3LLHBKLI.js";
import {
  V
} from "./chunk-74GULGYB.js";
import {
  U,
  a as a3,
  j,
  l
} from "./chunk-HYAO4PVV.js";
import "./chunk-SRNKPAJX.js";
import {
  o
} from "./chunk-VNQUG2TO.js";
import "./chunk-MOMLPET6.js";
import "./chunk-3QHX4R4B.js";
import "./chunk-ORMKIVR7.js";
import {
  p
} from "./chunk-TOCH3L2K.js";
import "./chunk-EULNFFHG.js";
import "./chunk-SDIBXPSJ.js";
import {
  z
} from "./chunk-CBXZL53X.js";
import "./chunk-LPCUYJ2B.js";
import "./chunk-SMO33YG7.js";
import {
  f
} from "./chunk-LCBAL6ER.js";
import "./chunk-6JCZVSRM.js";
import "./chunk-LLGOMKTE.js";
import "./chunk-ZB6KRLRI.js";
import "./chunk-67AKDROO.js";
import "./chunk-CM3TIXEV.js";
import "./chunk-POWGZO3T.js";
import {
  qt
} from "./chunk-OUZJZB6I.js";
import {
  o as o2
} from "./chunk-NJZD7WM5.js";
import {
  r as r2
} from "./chunk-CL7VLXUR.js";
import {
  l as l2
} from "./chunk-FCX4ZA3Z.js";
import {
  m2 as m
} from "./chunk-2ZPU5IZX.js";
import {
  a2
} from "./chunk-S62CSPIH.js";
import {
  w
} from "./chunk-X26VPODZ.js";
import "./chunk-XNYPRDKK.js";
import {
  r
} from "./chunk-Y4BWIIWH.js";
import "./chunk-TTJIKWMC.js";
import "./chunk-CMEG2CKL.js";
import "./chunk-VHPBXBDE.js";
import "./chunk-6ACTD4UJ.js";
import "./chunk-5REYU5G2.js";
import "./chunk-JNYZ3I5R.js";
import {
  a
} from "./chunk-N626Y23H.js";
import {
  c
} from "./chunk-TJPLHZCD.js";
import "./chunk-KLFJ5V5G.js";
import "./chunk-G26ADAPQ.js";

// node_modules/@arcgis/core/layers/support/KMLSublayer.js
var j4;
var S3 = j4 = class extends o.EventedMixin(l2.JSONSupportMixin(p)) {
  constructor(...e) {
    super(...e), this.description = null, this.fullExtent = null, this.id = null, this.networkLink = null, this.parent = null, this.sublayers = null, this.title = null, this.sourceJSON = null, this.layer = null, this.addHandles([a3((() => this.sublayers), "after-add", (({ item: e2 }) => {
      e2.parent = this, e2.layer = this.layer;
    }), U), a3((() => this.sublayers), "after-remove", (({ item: e2 }) => {
      e2.layer = e2.parent = null;
    }), U), l((() => this.sublayers), ((e2, t2) => {
      if (t2) for (const r3 of t2) r3.layer = r3.parent = null;
      if (e2) for (const r3 of e2) r3.parent = this, r3.layer = this.layer;
    }), U), l((() => this.layer), ((e2) => {
      if (this.sublayers) for (const t2 of this.sublayers) t2.layer = e2;
    }), U)]);
  }
  initialize() {
    j((() => this.networkLink)).then((() => j((() => true === this.visible)))).then((() => this.load()));
  }
  load(e) {
    if (!this.networkLink) return;
    if (this.networkLink.viewFormat) return;
    const r3 = null != e ? e.signal : null, s = this._fetchService(this._get("networkLink")?.href ?? "", r3).then(((e2) => {
      const r4 = j3(e2.sublayers);
      this.fullExtent = z.fromJSON(r4), this.sourceJSON = e2;
      const s2 = w(V.ofType(j4), S2(j4, e2));
      this.sublayers ? this.sublayers.addMany(s2) : this.sublayers = s2, this.layer?.emit("sublayer-update"), this.layer && this.layer.notifyChange("visibleSublayers");
    }));
    return this.addResolvingPromise(s), Promise.resolve(this);
  }
  get visible() {
    return this._get("visible");
  }
  set visible(e) {
    this._get("visible") !== e && (this._set("visible", e), this.layer && this.layer.notifyChange("visibleSublayers"));
  }
  readVisible(e, t2) {
    return !!t2.visibility;
  }
  _fetchService(e, t2) {
    return g(e, this.layer.outSpatialReference, this.layer.refreshInterval, t2).then(((e2) => d(e2.data)));
  }
};
r([m()], S3.prototype, "description", void 0), r([m({ type: z })], S3.prototype, "fullExtent", void 0), r([m()], S3.prototype, "id", void 0), r([m({ readOnly: true, value: null })], S3.prototype, "networkLink", void 0), r([m({ json: { write: { allowNull: true } } })], S3.prototype, "parent", void 0), r([m({ type: V.ofType(S3), json: { write: { allowNull: true } } })], S3.prototype, "sublayers", void 0), r([m({ value: null, json: { read: { source: "name", reader: (e) => c(e) } } })], S3.prototype, "title", void 0), r([m({ value: true })], S3.prototype, "visible", null), r([o2("visible", ["visibility"])], S3.prototype, "readVisible", null), r([m()], S3.prototype, "sourceJSON", void 0), r([m()], S3.prototype, "layer", void 0), S3 = j4 = r([a2("esri.layers.support.KMLSublayer")], S3);

// node_modules/@arcgis/core/layers/KMLLayer.js
var w2 = ["kml", "xml"];
var F = class extends p2(f2(t(b(j2(S(h)))))) {
  constructor(...e) {
    super(...e), this._visibleFolders = [], this.allSublayers = new l3({ getCollections: () => [this.sublayers], getChildrenFunction: (e2) => e2.sublayers }), this.outSpatialReference = f.WGS84, this.path = null, this.legendEnabled = false, this.operationalLayerType = "KML", this.sublayers = null, this.type = "kml", this.url = null;
  }
  initialize() {
    this.addHandles([l((() => this.sublayers), ((e, r3) => {
      r3 && r3.forEach(((e2) => {
        e2.parent = null, e2.layer = null;
      })), e && e.forEach(((e2) => {
        e2.parent = this, e2.layer = this;
      }));
    }), U), this.on("sublayer-update", (() => this.notifyChange("fullExtent")))]);
  }
  normalizeCtorArgs(e, r3) {
    return "string" == typeof e ? { url: e, ...r3 } : e;
  }
  readSublayersFromItemOrWebMap(e, r3) {
    this._visibleFolders = r3.visibleFolders;
  }
  readSublayers(e, r3, t2) {
    return S2(S3, r3, t2, this._visibleFolders);
  }
  writeSublayers(e, r3) {
    const t2 = [], o3 = e.toArray();
    for (; o3.length; ) {
      const e2 = o3[0];
      e2.networkLink || (e2.visible && t2.push(e2.id), e2.sublayers && o3.push(...e2.sublayers.toArray())), o3.shift();
    }
    r3.visibleFolders = t2;
  }
  get title() {
    const e = this._get("title");
    return e && "defaults" !== this.originOf("title") ? e : this.url ? qt(this.url, w2) || "KML" : e;
  }
  set title(e) {
    this._set("title", e);
  }
  get visibleSublayers() {
    const e = this.sublayers, r3 = [], t2 = (e2) => {
      e2.visible && (r3.push(e2), e2.sublayers && e2.sublayers.forEach(t2));
    };
    return e && e.forEach(t2), r3;
  }
  get fullExtent() {
    return this._recomputeFullExtent();
  }
  load(e) {
    const r3 = null != e ? e.signal : null;
    return this.addResolvingPromise(this.loadFromPortal({ supportedTypes: ["KML"], supportsData: false }, e).catch(a).then((() => this._fetchService(r3)))), Promise.resolve(this);
  }
  destroy() {
    super.destroy(), this.allSublayers.destroy();
  }
  async _fetchService(e) {
    const r3 = await Promise.resolve().then((() => this.resourceInfo ? { ssl: false, data: this.resourceInfo } : g(this.url ?? "", this.outSpatialReference, this.refreshInterval, e))), t2 = d(r3.data);
    t2 && this.read(t2, { origin: "service" });
  }
  _recomputeFullExtent() {
    let e = null;
    null != this.extent && (e = this.extent.clone());
    const r3 = (t2) => {
      if (t2.sublayers) for (const o3 of t2.sublayers.items) r3(o3), o3.visible && o3.fullExtent && (null != e ? e.union(o3.fullExtent) : e = o3.fullExtent.clone());
    };
    return r3(this), e;
  }
};
r([m({ readOnly: true })], F.prototype, "allSublayers", void 0), r([m({ type: f })], F.prototype, "outSpatialReference", void 0), r([m({ type: String, json: { origins: { "web-scene": { read: true, write: true } }, read: false } })], F.prototype, "path", void 0), r([m({ readOnly: true, json: { read: false, write: false } })], F.prototype, "legendEnabled", void 0), r([m({ type: ["show", "hide", "hide-children"] })], F.prototype, "listMode", void 0), r([m({ type: ["KML"] })], F.prototype, "operationalLayerType", void 0), r([m({})], F.prototype, "resourceInfo", void 0), r([m({ type: V.ofType(S3), json: { write: { ignoreOrigin: true } } })], F.prototype, "sublayers", void 0), r([o2(["web-map", "portal-item"], "sublayers", ["visibleFolders"])], F.prototype, "readSublayersFromItemOrWebMap", null), r([o2("service", "sublayers", ["sublayers"])], F.prototype, "readSublayers", null), r([r2("sublayers")], F.prototype, "writeSublayers", null), r([m({ readOnly: true, json: { read: false } })], F.prototype, "type", void 0), r([m({ json: { origins: { "web-map": { read: { source: "title" } } }, write: { ignoreOrigin: true } } })], F.prototype, "title", null), r([m(y)], F.prototype, "url", void 0), r([m({ readOnly: true })], F.prototype, "visibleSublayers", null), r([m({ type: z })], F.prototype, "extent", void 0), r([m()], F.prototype, "fullExtent", null), F = r([a2("esri.layers.KMLLayer")], F);
var O = F;
export {
  O as default
};
//# sourceMappingURL=KMLLayer-FBTJOSKD.js.map
