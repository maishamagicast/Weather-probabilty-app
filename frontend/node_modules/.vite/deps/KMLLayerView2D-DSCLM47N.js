import {
  m as m2
} from "./chunk-4XD56HB5.js";
import {
  n,
  o,
  v as v3
} from "./chunk-5YD734RD.js";
import {
  t
} from "./chunk-BLUWNVP6.js";
import "./chunk-IJFQGYLB.js";
import "./chunk-XRPPUYTZ.js";
import {
  O as O2
} from "./chunk-KAVZRVPC.js";
import {
  r as r2
} from "./chunk-IYDVS7PE.js";
import {
  S as S2,
  f as f3,
  g as g2
} from "./chunk-GCNSWEEW.js";
import "./chunk-WZCCHOOA.js";
import "./chunk-3DDYAE2Z.js";
import "./chunk-PE6RTTM2.js";
import "./chunk-HSYGCPAM.js";
import "./chunk-U3M2HTCF.js";
import "./chunk-G6DMFUCZ.js";
import "./chunk-6PL4I2QQ.js";
import {
  S as S3
} from "./chunk-R4ARMIGB.js";
import {
  u as u2
} from "./chunk-M6JFBQWH.js";
import "./chunk-GY7Z7OPO.js";
import "./chunk-VASRQLAR.js";
import {
  R
} from "./chunk-JRBH6HCP.js";
import "./chunk-TI4LRNX7.js";
import "./chunk-JOKMLVBH.js";
import {
  b,
  d,
  g
} from "./chunk-IX3W4NKJ.js";
import "./chunk-IP7WY4ER.js";
import "./chunk-SMJO7RZ5.js";
import "./chunk-OBI6XSOO.js";
import "./chunk-ZYWMFOAJ.js";
import "./chunk-FXWNGVAA.js";
import "./chunk-6HU6D6AI.js";
import "./chunk-CO23VBIK.js";
import "./chunk-QFNAF2OO.js";
import "./chunk-RYUENKYI.js";
import {
  E
} from "./chunk-Z4UTFX54.js";
import {
  _ as _2,
  se,
  v as v2
} from "./chunk-JA3W3C47.js";
import "./chunk-RWIBDRMM.js";
import "./chunk-OJQCHQYS.js";
import "./chunk-V7CFMRVF.js";
import "./chunk-LINWZZJL.js";
import "./chunk-CKFS2QIU.js";
import "./chunk-PI2R2EZ2.js";
import "./chunk-JLGVQWP5.js";
import "./chunk-LCT65JMM.js";
import "./chunk-IR6JOM7Y.js";
import "./chunk-MK7DDFJN.js";
import "./chunk-NA4PNORD.js";
import "./chunk-7MEIWNUT.js";
import "./chunk-TRRRRFK2.js";
import "./chunk-W7HTQBDK.js";
import "./chunk-ISZVN2MZ.js";
import "./chunk-YF3MIHOZ.js";
import "./chunk-Q2JFTIYQ.js";
import "./chunk-SNXPARJV.js";
import "./chunk-WKQKH2TM.js";
import "./chunk-WGJD7U4H.js";
import "./chunk-OUBBZ23V.js";
import "./chunk-7WMSTTK2.js";
import "./chunk-UP64JZZX.js";
import "./chunk-2EA3JV2W.js";
import "./chunk-QIDR2RCE.js";
import "./chunk-EU5HNJUP.js";
import "./chunk-CJSURDZH.js";
import "./chunk-FFY3IMAS.js";
import "./chunk-C5RMBVA5.js";
import "./chunk-PGNIZQW2.js";
import "./chunk-YT2ORY5Z.js";
import "./chunk-LSXG3EQM.js";
import "./chunk-VQWEDC6T.js";
import "./chunk-KXZAYF3U.js";
import "./chunk-PHSQVJNW.js";
import "./chunk-KFNWBWN4.js";
import "./chunk-K55CXVYD.js";
import "./chunk-PBRYZOOK.js";
import "./chunk-GS5DZQYM.js";
import "./chunk-ZG3HABK4.js";
import "./chunk-Q37ABIVM.js";
import "./chunk-VFMQPCCZ.js";
import "./chunk-63ZT5BWV.js";
import "./chunk-OPQ3FCJ4.js";
import "./chunk-LIWGRYNH.js";
import "./chunk-LOLNWH3R.js";
import "./chunk-2EOHKZLO.js";
import "./chunk-S7GLMIAQ.js";
import "./chunk-PXNA3G6N.js";
import "./chunk-KZ2G7XW2.js";
import "./chunk-QMUTCCDX.js";
import "./chunk-24S6C5S6.js";
import "./chunk-7Y4U2JD3.js";
import "./chunk-GCTSCKPO.js";
import "./chunk-6U4EGJOK.js";
import "./chunk-W7U4L72B.js";
import "./chunk-UICDKBDP.js";
import "./chunk-RWNJO2QP.js";
import "./chunk-3M6ALZOH.js";
import "./chunk-QPV4BKBC.js";
import "./chunk-DDDZPNGZ.js";
import "./chunk-LQQCPLIT.js";
import "./chunk-4O46EK5T.js";
import "./chunk-UO2UKPG5.js";
import "./chunk-EMULKSUV.js";
import "./chunk-AY3JR4QM.js";
import "./chunk-XKWGLDG7.js";
import "./chunk-YXTIORDS.js";
import "./chunk-7ASGQ7X4.js";
import "./chunk-DL2726UG.js";
import "./chunk-AKZZRLKD.js";
import "./chunk-746KDGCX.js";
import "./chunk-SVGSXWMQ.js";
import {
  c
} from "./chunk-YG6ILDTP.js";
import {
  S,
  a as a2
} from "./chunk-IFDA5FOT.js";
import "./chunk-D5KSFCG5.js";
import "./chunk-JUXSLKSN.js";
import "./chunk-YGH6TKDR.js";
import "./chunk-QNRDEVXA.js";
import "./chunk-KW37MFF6.js";
import "./chunk-QIPPWPN2.js";
import "./chunk-Y2AI7GA5.js";
import "./chunk-P3R3JSYO.js";
import "./chunk-A2AZM62Y.js";
import {
  M,
  P,
  X
} from "./chunk-CAQUPYHC.js";
import "./chunk-2RL34CVC.js";
import "./chunk-BNQMKYX6.js";
import "./chunk-B6C2GOG6.js";
import "./chunk-K3VYMAVM.js";
import "./chunk-FPALEK52.js";
import "./chunk-LQYJLB4P.js";
import "./chunk-D6GGPM6D.js";
import "./chunk-FQY65CBA.js";
import "./chunk-HH4Q2NN5.js";
import "./chunk-IR4HVW2K.js";
import "./chunk-OT2P27SF.js";
import "./chunk-XJOLJK3F.js";
import "./chunk-3CFYBBSV.js";
import {
  f as f2
} from "./chunk-ZVNJ2S2Z.js";
import "./chunk-KPGNM4LZ.js";
import "./chunk-7OH24VUH.js";
import "./chunk-AACFCXAP.js";
import "./chunk-P5DG4SNT.js";
import "./chunk-BELQIHLO.js";
import "./chunk-BPI4BR4E.js";
import {
  K,
  O
} from "./chunk-CJDZN5K5.js";
import "./chunk-N77BULFI.js";
import "./chunk-6TZIEYTZ.js";
import "./chunk-UMUW6RKM.js";
import "./chunk-XRTNDGK2.js";
import "./chunk-A6R2FXH6.js";
import "./chunk-H6ZVHKNF.js";
import "./chunk-YAXW2DL6.js";
import "./chunk-P4O4YCLI.js";
import "./chunk-PBKE5BCM.js";
import "./chunk-FOALQHMM.js";
import "./chunk-7HS3ESHX.js";
import "./chunk-2CS746FZ.js";
import "./chunk-NEI5HAVK.js";
import "./chunk-RCOFAQFP.js";
import "./chunk-CO2J5JPW.js";
import "./chunk-CHAHOTAY.js";
import "./chunk-RZGBA4KS.js";
import "./chunk-FSYN2HHU.js";
import "./chunk-7I4TWCTW.js";
import "./chunk-W5UOLFE2.js";
import "./chunk-AZ2S2PYZ.js";
import "./chunk-SCMB64VM.js";
import "./chunk-FOPBVVXE.js";
import "./chunk-INI6MHIQ.js";
import "./chunk-R7YP6EQJ.js";
import "./chunk-QUZZIDFR.js";
import "./chunk-CBCDVQSA.js";
import {
  V
} from "./chunk-74GULGYB.js";
import "./chunk-RKF6WUZT.js";
import "./chunk-RMRI4NYS.js";
import "./chunk-YYLIW24Q.js";
import "./chunk-B7BH33JH.js";
import "./chunk-BLBN3L5Q.js";
import "./chunk-5EWIWLNU.js";
import "./chunk-TOCH3L2K.js";
import {
  z
} from "./chunk-CBXZL53X.js";
import {
  l
} from "./chunk-HYAO4PVV.js";
import "./chunk-SRNKPAJX.js";
import "./chunk-MOMLPET6.js";
import "./chunk-VNQUG2TO.js";
import "./chunk-EULNFFHG.js";
import "./chunk-SDIBXPSJ.js";
import "./chunk-LPCUYJ2B.js";
import "./chunk-3QHX4R4B.js";
import {
  _
} from "./chunk-SMO33YG7.js";
import {
  f
} from "./chunk-LCBAL6ER.js";
import "./chunk-6JCZVSRM.js";
import "./chunk-LLGOMKTE.js";
import "./chunk-ZB6KRLRI.js";
import "./chunk-67AKDROO.js";
import "./chunk-CM3TIXEV.js";
import {
  H,
  e
} from "./chunk-2AYGXVZI.js";
import {
  A,
  v
} from "./chunk-OUZJZB6I.js";
import "./chunk-WO5FLTVY.js";
import "./chunk-MGA7XBRB.js";
import "./chunk-XNUSHDFN.js";
import "./chunk-4AKMPOG7.js";
import "./chunk-2CJBZZN7.js";
import "./chunk-APMQAZ5Z.js";
import "./chunk-ZJQPHR3K.js";
import "./chunk-NJZD7WM5.js";
import "./chunk-CL7VLXUR.js";
import {
  l as l2
} from "./chunk-FCX4ZA3Z.js";
import {
  m2 as m
} from "./chunk-2ZPU5IZX.js";
import {
  a2 as a
} from "./chunk-S62CSPIH.js";
import "./chunk-X26VPODZ.js";
import "./chunk-XNYPRDKK.js";
import "./chunk-JNYZ3I5R.js";
import {
  r
} from "./chunk-Y4BWIIWH.js";
import "./chunk-TTJIKWMC.js";
import "./chunk-CMEG2CKL.js";
import "./chunk-VHPBXBDE.js";
import "./chunk-6ACTD4UJ.js";
import "./chunk-5REYU5G2.js";
import {
  e2,
  u2 as u
} from "./chunk-N626Y23H.js";
import "./chunk-TJPLHZCD.js";
import "./chunk-KLFJ5V5G.js";
import "./chunk-G26ADAPQ.js";

// node_modules/@arcgis/core/layers/support/KMLMapImage.js
var p = class extends l2 {
  constructor() {
    super(...arguments), this.id = 0, this.rotation = 0, this.href = "", this.extent = new z();
  }
};
r([m({ nonNullable: true, json: { write: true } })], p.prototype, "id", void 0), r([m({ nonNullable: true, json: { write: true } })], p.prototype, "rotation", void 0), r([m({ nonNullable: true, json: { write: true } })], p.prototype, "href", void 0), r([m({ type: z, nonNullable: true, json: { write: true } })], p.prototype, "extent", void 0), p = r([a("esri.layers.support.KMLMapImage")], p);

// node_modules/@arcgis/core/views/support/imageReprojection.js
var _l = class _l {
  constructor(t2) {
    if (this._ownsRctx = false, t2) this._ownsRctx = false, this._rctx = t2;
    else {
      if (_l._instance) return _l._instanceRefCount++, _l._instance;
      _l._instanceRefCount = 1, _l._instance = this, this._ownsRctx = true;
      const t3 = document.createElement("canvas").getContext("webgl2");
      t3.getExtension("OES_texture_float"), this._rctx = new v3(t3, {});
    }
    const e3 = { applyProjection: true, bilinear: false, bicubic: false }, r3 = o("raster/reproject", "raster/reproject", /* @__PURE__ */ new Map([["a_position", 0]]), e3);
    this._program = this._rctx.programCache.acquire(r3.shaders.vertexShader, r3.shaders.fragmentShader, r3.attributes), this._rctx.useProgram(this._program), this._program.setUniform1f("u_opacity", 1), this._program.setUniform1i("u_image", 0), this._program.setUniform1i("u_flipY", 0), this._program.setUniform1i("u_transformGrid", 1), this._quad = new n(this._rctx, [0, 0, 1, 0, 0, 1, 1, 1]);
  }
  reprojectTexture(t2, s, n2 = false) {
    const o2 = E(t2.extent, s), m3 = new _({ x: (t2.extent.xmax - t2.extent.xmin) / t2.texture.descriptor.width, y: (t2.extent.ymax - t2.extent.ymin) / t2.texture.descriptor.height, spatialReference: t2.extent.spatialReference }), { x: c2, y: g3 } = _2(m3, s, t2.extent);
    let _3 = (c2 + g3) / 2;
    const l4 = Math.round((o2.xmax - o2.xmin) / _3), w = Math.round((o2.ymax - o2.ymin) / _3);
    _3 = (o2.width / l4 + o2.height / w) / 2;
    const b2 = new _({ x: _3, y: _3, spatialReference: o2.spatialReference }), j2 = se({ projectedExtent: o2, srcBufferExtent: t2.extent, pixelSize: b2, hasWrapAround: true, spacing: [16, 16] }), D = m2(this._rctx, j2), R2 = new a2(l4, w);
    R2.wrapMode = P.CLAMP_TO_EDGE;
    const y = new R(this._rctx, R2);
    this._rctx.bindFramebuffer(y), this._rctx.setViewport(0, 0, l4, w), this._rctx.useProgram(this._program), this._rctx.bindTexture(t2.texture, 0), this._rctx.bindTexture(D, 1), this._quad.bind();
    const { width: C = 0, height: E2 = 0 } = t2.texture.descriptor;
    if (this._program.setUniform2f("u_srcImageSize", C, E2), this._program.setUniform2fv("u_transformSpacing", j2.spacing), this._program.setUniform2fv("u_transformGridSize", j2.size), this._program.setUniform2f("u_targetImageSize", l4, w), this._quad.draw(), this._quad.unbind(), this._rctx.useProgram(null), this._rctx.bindFramebuffer(null), D.dispose(), n2) {
      const { width: t3, height: e3 } = y, r3 = new ImageData(t3 ?? 0, e3 ?? 0);
      y.readPixels(0, 0, t3 ?? 0, e3 ?? 0, M.RGBA, X.UNSIGNED_BYTE, r3.data);
      const i = y.detachColorTexture();
      return y.dispose(), { texture: i, extent: o2, imageData: r3 };
    }
    const T = y.detachColorTexture();
    return y.dispose(), { texture: T, extent: o2 };
  }
  reprojectBitmapData(t2, e3) {
    const r3 = g2(t2.bitmapData) ? f3(t2.bitmapData) : t2.bitmapData, i = new a2();
    i.wrapMode = P.CLAMP_TO_EDGE, i.width = t2.bitmapData.width, i.height = t2.bitmapData.height;
    const a3 = new S(this._rctx, i, r3), s = this.reprojectTexture({ texture: a3, extent: t2.extent }, e3, true);
    s.texture.dispose();
    const m3 = document.createElement("canvas"), c2 = s.imageData;
    m3.width = c2.width, m3.height = c2.height;
    return m3.getContext("2d").putImageData(c2, 0, 0), { bitmapData: m3, extent: s.extent };
  }
  async loadAndReprojectBitmapData(e3, r3, i) {
    const [a3] = await Promise.all([H(e3, { responseType: "image" }).then(((t2) => t2.data)), v2()]), n2 = document.createElement("canvas");
    n2.width = a3.width, n2.height = a3.height;
    const o2 = n2.getContext("2d");
    o2.drawImage(a3, 0, 0);
    const m3 = o2.getImageData(0, 0, n2.width, n2.height);
    if (r3.spatialReference.equals(i)) return { bitmapData: m3, extent: r3 };
    const c2 = this.reprojectBitmapData({ bitmapData: m3, extent: r3 }, i);
    return { bitmapData: c2.bitmapData, extent: c2.extent };
  }
  destroy() {
    this._ownsRctx ? (_l._instanceRefCount--, 0 === _l._instanceRefCount && (this._quad.dispose(), this._program.dispose(), this._rctx.dispose(), _l._instance = null)) : (this._quad.dispose(), this._program.dispose());
  }
};
_l._instanceRefCount = 0;
var l3 = _l;

// node_modules/@arcgis/core/views/2d/layers/KMLLayerView2D.js
var j = class {
  constructor() {
    this.allSublayers = /* @__PURE__ */ new Map(), this.allPoints = [], this.allPolylines = [], this.allPolygons = [], this.allMapImages = [];
  }
};
var k = class extends S3(u2) {
  constructor() {
    super(...arguments), this._bitmapIndex = /* @__PURE__ */ new Map(), this._mapImageContainer = new r2(), this._kmlVisualData = new j(), this._fetchController = null, this.allVisiblePoints = new c(), this.allVisiblePolylines = new c(), this.allVisiblePolygons = new c(), this.allVisibleMapImages = new V();
  }
  async hitTest(e3, i) {
    const t2 = this.layer;
    return [this._pointsView?.hitTest(e3), this._polylinesView?.hitTest(e3), this._polygonsView?.hitTest(e3)].flat().filter(Boolean).map(((i2) => (i2.layer = t2, i2.sourceLayer = t2, { type: "graphic", graphic: i2, layer: t2, mapPoint: e3 })));
  }
  update(e3) {
    this._polygonsView && this._polygonsView.processUpdate(e3), this._polylinesView && this._polylinesView.processUpdate(e3), this._pointsView && this._pointsView.processUpdate(e3);
  }
  attach() {
    this._fetchController = new AbortController(), this.container.addChild(this._mapImageContainer), this._polygonsView = new O2({ view: this.view, graphics: this.allVisiblePolygons, requestUpdateCallback: () => this.requestUpdate(), container: new t(this.view.featuresTilingScheme) }), this.container.addChild(this._polygonsView.container), this._polylinesView = new O2({ view: this.view, graphics: this.allVisiblePolylines, requestUpdateCallback: () => this.requestUpdate(), container: new t(this.view.featuresTilingScheme) }), this.container.addChild(this._polylinesView.container), this._pointsView = new O2({ view: this.view, graphics: this.allVisiblePoints, requestUpdateCallback: () => this.requestUpdate(), container: new t(this.view.featuresTilingScheme) }), this.container.addChild(this._pointsView.container), this.addAttachHandles([this.allVisibleMapImages.on("change", ((e3) => {
      e3.added.forEach(((e4) => this._addMapImage(e4))), e3.removed.forEach(((e4) => this._removeMapImage(e4)));
    })), l((() => this.layer.visibleSublayers), ((e3) => {
      for (const i of this._kmlVisualData.allSublayers.values()) i.visibility = 0;
      for (const i of e3) {
        const e4 = this._kmlVisualData.allSublayers.get(i.id);
        e4 && (e4.visibility = 1);
      }
      this._refreshCollections();
    }))]), this._updatingHandles.addPromise(this._fetchService(this._fetchController.signal)), this._imageReprojector = new l3();
  }
  detach() {
    this._fetchController = e2(this._fetchController), this._mapImageContainer.removeAllChildren(), this.container.removeAllChildren(), this._bitmapIndex.clear(), this._polygonsView = u(this._polygonsView), this._polylinesView = u(this._polylinesView), this._pointsView = u(this._pointsView), this._imageReprojector = u(this._imageReprojector);
  }
  viewChange() {
    this._polygonsView.viewChange(), this._polylinesView.viewChange(), this._pointsView.viewChange();
  }
  moveEnd() {
  }
  isUpdating() {
    return this._pointsView.updating || this._polygonsView.updating || this._polylinesView.updating;
  }
  _addMapImage(e3) {
    (this.view.spatialReference?.isWGS84 || this.view.spatialReference?.isWebMercator) && this._imageReprojector.loadAndReprojectBitmapData(e3.href, e3.extent, this.view.spatialReference).then(((i) => {
      const t2 = new S2(i.bitmapData);
      t2.x = i.extent.xmin, t2.y = i.extent.ymax, t2.resolution = i.extent.width / i.bitmapData.width, t2.rotation = e3.rotation, this._mapImageContainer.addChild(t2), this._bitmapIndex.set(e3, t2);
    }));
  }
  async _getViewDependentUrl(e3, t2) {
    const { viewFormat: s, viewBoundScale: a3, httpQuery: o2 } = e3;
    if (null != s) {
      if (null == t2) throw new Error("Loading this network link requires a view state.");
      let n2;
      if (await K(), null != a3 && 1 !== a3) {
        const e4 = new z(t2.extent);
        e4.expand(a3), n2 = e4;
      } else n2 = t2.extent;
      n2 = O(n2, f.WGS84);
      const h = O(n2, f.WebMercator), y = n2.xmin, g3 = n2.xmax, w = n2.ymin, u3 = n2.ymax, b2 = t2.size[0] * t2.pixelRatio, V2 = t2.size[1] * t2.pixelRatio, f4 = Math.max(h.width, h.height), v4 = { "[bboxWest]": y.toString(), "[bboxEast]": g3.toString(), "[bboxSouth]": w.toString(), "[bboxNorth]": u3.toString(), "[lookatLon]": n2.center.x.toString(), "[lookatLat]": n2.center.y.toString(), "[lookatRange]": f4.toString(), "[lookatTilt]": "0", "[lookatHeading]": t2.rotation.toString(), "[lookatTerrainLon]": n2.center.x.toString(), "[lookatTerrainLat]": n2.center.y.toString(), "[lookatTerrainAlt]": "0", "[cameraLon]": n2.center.x.toString(), "[cameraLat]": n2.center.y.toString(), "[cameraAlt]": f4.toString(), "[horizFov]": "60", "[vertFov]": "60", "[horizPixels]": b2.toString(), "[vertPixels]": V2.toString(), "[terrainEnabled]": "0", "[clientVersion]": e, "[kmlVersion]": "2.2", "[clientName]": "ArcGIS API for JavaScript", "[language]": "en-US" }, S4 = (e4) => {
        for (const i in e4) {
          let t3;
          for (t3 in v4) e4[i] = e4[i].replace(t3, v4[t3]);
        }
      }, I = A(s);
      S4(I);
      let x = {};
      null != o2 && (x = A(o2), S4(x));
      const C = f2(e3.href);
      C.query = { ...C.query, ...I, ...x };
      return `${C.path}?${v(I)}`;
    }
    return e3.href;
  }
  async _fetchService(e3) {
    const i = new j();
    await this._loadVisualData(this.layer.url, i, e3), this._kmlVisualData = i, this._refreshCollections();
  }
  _refreshCollections() {
    this.allVisiblePoints.removeAll(), this.allVisiblePolylines.removeAll(), this.allVisiblePolygons.removeAll(), this.allVisibleMapImages.removeAll(), this.allVisiblePoints.addMany(this._kmlVisualData.allPoints.filter(((e3) => this._isSublayerVisible(e3.sublayerId))).map((({ item: e3 }) => e3))), this.allVisiblePolylines.addMany(this._kmlVisualData.allPolylines.filter(((e3) => this._isSublayerVisible(e3.sublayerId))).map((({ item: e3 }) => e3))), this.allVisiblePolygons.addMany(this._kmlVisualData.allPolygons.filter(((e3) => this._isSublayerVisible(e3.sublayerId))).map((({ item: e3 }) => e3))), this.allVisibleMapImages.addMany(this._kmlVisualData.allMapImages.filter(((e3) => this._isSublayerVisible(e3.sublayerId))).map((({ item: e3 }) => e3)));
  }
  _isSublayerVisible(e3) {
    const i = this._kmlVisualData.allSublayers.get(e3);
    return !!i?.visibility && (-1 === i.parentFolderId || this._isSublayerVisible(i.parentFolderId));
  }
  _loadVisualData(e3, i, t2) {
    return this._fetchParsedKML(e3, t2).then((async (e4) => {
      for (const s of e4.sublayers) {
        i.allSublayers.set(s.id, s);
        const e5 = s.points ? await b(s.points) : [], a3 = s.polylines ? await b(s.polylines) : [], o2 = s.polygons ? await b(s.polygons) : [], l4 = s.mapImages?.map(((e6) => p.fromJSON(e6))) ?? [];
        if (i.allPoints.push(...e5.map(((e6) => ({ item: e6, sublayerId: s.id })))), i.allPolylines.push(...a3.map(((e6) => ({ item: e6, sublayerId: s.id })))), i.allPolygons.push(...o2.map(((e6) => ({ item: e6, sublayerId: s.id })))), i.allMapImages.push(...l4.map(((e6) => ({ item: e6, sublayerId: s.id })))), s.networkLink) {
          const e6 = await this._getViewDependentUrl(s.networkLink, this.view.state);
          await this._loadVisualData(e6, i, t2);
        }
      }
    }));
  }
  _fetchParsedKML(e3, i) {
    return g(e3, this.layer.spatialReference, this.layer.refreshInterval, i).then(((e4) => d(e4.data)));
  }
  _removeMapImage(e3) {
    const i = this._bitmapIndex.get(e3);
    i && (this._mapImageContainer.removeChild(i), this._bitmapIndex.delete(e3));
  }
};
r([m()], k.prototype, "_pointsView", void 0), r([m()], k.prototype, "_polylinesView", void 0), r([m()], k.prototype, "_polygonsView", void 0), r([m()], k.prototype, "updating", void 0), k = r([a("esri.views.2d.layers.KMLLayerView2D")], k);
var P2 = k;
export {
  P2 as default
};
//# sourceMappingURL=KMLLayerView2D-DSCLM47N.js.map
