import {
  K,
  ee,
  oe
} from "./chunk-V7GE6MKB.js";
import "./chunk-THA6KPOR.js";
import {
  E,
  N
} from "./chunk-W6SOR4OP.js";
import {
  d as d2
} from "./chunk-LLTSJZOR.js";
import "./chunk-XF5GRUK5.js";
import {
  u
} from "./chunk-5ZA2FFGW.js";
import {
  f
} from "./chunk-E3X3R7JS.js";
import "./chunk-5J3DOLRD.js";
import "./chunk-ITDL4YVK.js";
import {
  L
} from "./chunk-LDDUMPNU.js";
import "./chunk-CCQBS25D.js";
import "./chunk-PXNA3G6N.js";
import "./chunk-OUR2XGMQ.js";
import "./chunk-TSHXWKM2.js";
import {
  j,
  x
} from "./chunk-KZ2G7XW2.js";
import "./chunk-YIVJSMJO.js";
import {
  Z
} from "./chunk-QMUTCCDX.js";
import {
  lt,
  ut
} from "./chunk-24S6C5S6.js";
import "./chunk-7Y4U2JD3.js";
import "./chunk-GCTSCKPO.js";
import "./chunk-6U4EGJOK.js";
import "./chunk-W7U4L72B.js";
import "./chunk-OXO3GGCE.js";
import "./chunk-BOPGQCAL.js";
import "./chunk-C4HV45QS.js";
import "./chunk-FB53UFVR.js";
import "./chunk-UICDKBDP.js";
import "./chunk-HRIEIPLV.js";
import "./chunk-RWNJO2QP.js";
import "./chunk-3M6ALZOH.js";
import "./chunk-QPV4BKBC.js";
import "./chunk-DDDZPNGZ.js";
import "./chunk-XVEUTBL6.js";
import "./chunk-LQQCPLIT.js";
import "./chunk-4O46EK5T.js";
import "./chunk-4R7TSTKL.js";
import "./chunk-UO2UKPG5.js";
import "./chunk-EMULKSUV.js";
import "./chunk-AY3JR4QM.js";
import "./chunk-HH4Q2NN5.js";
import "./chunk-S5G7D7MX.js";
import "./chunk-6BZTNQVP.js";
import "./chunk-IR4HVW2K.js";
import "./chunk-OT2P27SF.js";
import "./chunk-XJOLJK3F.js";
import "./chunk-3CFYBBSV.js";
import "./chunk-ZVNJ2S2Z.js";
import "./chunk-KPGNM4LZ.js";
import "./chunk-P5DG4SNT.js";
import {
  d
} from "./chunk-YVMULGDJ.js";
import "./chunk-CJDZN5K5.js";
import "./chunk-N77BULFI.js";
import "./chunk-6TZIEYTZ.js";
import "./chunk-UMUW6RKM.js";
import "./chunk-XRTNDGK2.js";
import "./chunk-7WPGDYQW.js";
import "./chunk-QDOFETFN.js";
import "./chunk-A6R2FXH6.js";
import "./chunk-H6ZVHKNF.js";
import "./chunk-YAXW2DL6.js";
import "./chunk-MSSQA3XK.js";
import "./chunk-RZGBA4KS.js";
import "./chunk-FSYN2HHU.js";
import "./chunk-7I4TWCTW.js";
import "./chunk-W5UOLFE2.js";
import "./chunk-AZ2S2PYZ.js";
import "./chunk-SCMB64VM.js";
import {
  n as n2
} from "./chunk-FOPBVVXE.js";
import "./chunk-CBCDVQSA.js";
import "./chunk-74GULGYB.js";
import "./chunk-RKF6WUZT.js";
import "./chunk-RMRI4NYS.js";
import "./chunk-YYLIW24Q.js";
import "./chunk-B7BH33JH.js";
import "./chunk-BLBN3L5Q.js";
import "./chunk-CBXZL53X.js";
import "./chunk-HYAO4PVV.js";
import "./chunk-SRNKPAJX.js";
import {
  n
} from "./chunk-MOMLPET6.js";
import "./chunk-VNQUG2TO.js";
import "./chunk-SDIBXPSJ.js";
import "./chunk-LPCUYJ2B.js";
import "./chunk-3QHX4R4B.js";
import "./chunk-SMO33YG7.js";
import "./chunk-LCBAL6ER.js";
import {
  s as s4
} from "./chunk-6JCZVSRM.js";
import "./chunk-LLGOMKTE.js";
import "./chunk-ZB6KRLRI.js";
import "./chunk-67AKDROO.js";
import "./chunk-CM3TIXEV.js";
import "./chunk-2AYGXVZI.js";
import "./chunk-OUZJZB6I.js";
import "./chunk-4AKMPOG7.js";
import "./chunk-2CJBZZN7.js";
import "./chunk-APMQAZ5Z.js";
import {
  r
} from "./chunk-ZJQPHR3K.js";
import "./chunk-NJZD7WM5.js";
import "./chunk-CL7VLXUR.js";
import "./chunk-FCX4ZA3Z.js";
import "./chunk-2ZPU5IZX.js";
import {
  s as s3
} from "./chunk-S62CSPIH.js";
import "./chunk-X26VPODZ.js";
import "./chunk-XNYPRDKK.js";
import "./chunk-JNYZ3I5R.js";
import "./chunk-Y4BWIIWH.js";
import "./chunk-TTJIKWMC.js";
import "./chunk-CMEG2CKL.js";
import "./chunk-VHPBXBDE.js";
import "./chunk-6ACTD4UJ.js";
import "./chunk-5REYU5G2.js";
import {
  b,
  s as s2
} from "./chunk-N626Y23H.js";
import {
  i3 as i,
  s2 as s
} from "./chunk-TJPLHZCD.js";
import "./chunk-KLFJ5V5G.js";
import "./chunk-G26ADAPQ.js";

// node_modules/@arcgis/core/layers/graphics/sources/WFSSourceWorker.js
var S = "esri.layers.WFSLayer";
var j2 = class {
  constructor() {
    this._customParameters = null, this._queryEngine = null, this._supportsPagination = true;
  }
  destroy() {
    this._queryEngine?.destroy(), this._queryEngine = null;
  }
  async load(e, r2 = {}) {
    const { getFeatureUrl: a, getFeatureOutputFormat: o, fields: n3, geometryType: i2, featureType: u2, maxRecordCount: l, maxTotalRecordCount: c, maxPageCount: p, objectIdField: f2, customParameters: g } = e, { spatialReference: y, getFeatureSpatialReference: x2 } = oe(a, u2, e.spatialReference);
    try {
      await x(x2, y);
    } catch {
      throw new s("unsupported-projection", "Projection not supported", { inSpatialReference: x2, outSpatialReference: y });
    }
    s2(r2), this._customParameters = g, this._featureType = u2, this._fieldsIndex = Z.fromLayerJSON({ fields: n3, dateFieldsTimeReference: n3.some(((e2) => "esriFieldTypeDate" === e2.type)) ? { timeZoneIANA: n } : null }), this._geometryType = i2, this._getFeatureUrl = a, this._getFeatureOutputFormat = o, this._getFeatureSpatialReference = x2, this._maxRecordCount = l, this._maxTotalRecordCount = c, this._maxPageCount = p, this._objectIdField = f2, this._spatialReference = y;
    let C = await this._snapshotFeatures(r2);
    if (C.errors.length > 0 && (this._supportsPagination = false, C = await this._snapshotFeatures(r2), C.errors.length > 0)) throw C.errors[0];
    const R = { type: "object-id", fieldName: f2 };
    return this._queryEngine = new L({ fieldsIndex: this._fieldsIndex, geometryType: i2, hasM: false, hasZ: false, featureIdInfo: R, spatialReference: y, timeInfo: null, featureStore: new f({ geometryType: i2, hasM: false, hasZ: false }) }), this._queryEngine.featureStore.addMany(C.features), { warnings: q(C), extent: (await this._queryEngine.fetchRecomputedExtents()).fullExtent };
  }
  async applyEdits() {
    throw new s("wfs-source:editing-not-supported", "applyEdits() is not supported on WFSLayer");
  }
  async queryFeatures(e = {}, t = {}) {
    return await this._waitSnapshotComplete(), this._queryEngine.executeQuery(e, t.signal);
  }
  async queryFeatureCount(e = {}, t = {}) {
    return await this._waitSnapshotComplete(), this._queryEngine.executeQueryForCount(e, t.signal);
  }
  async queryObjectIds(e = {}, t = {}) {
    await this._waitSnapshotComplete();
    return (await this._queryEngine.executeQueryForIds(e, t.signal)).filter(n2);
  }
  async queryExtent(e = {}, t = {}) {
    return await this._waitSnapshotComplete(), this._queryEngine.executeQueryForExtent(e, t.signal);
  }
  async querySnapping(e, t = {}) {
    return await this._waitSnapshotComplete(), u(this._queryEngine, e, t.signal);
  }
  async queryAttributeBins(e, t = {}) {
    return await this._waitSnapshotComplete(), this._queryEngine.executeAttributeBinsQuery(e, t.signal);
  }
  async refresh(t) {
    return this._customParameters = t.customParameters, this._maxRecordCount = t.maxRecordCount, this._maxTotalRecordCount = t.maxTotalRecordCount, this._maxPageCount = t.maxPageCount, this._snapshotTask?.abort(), this._snapshotTask = d(((e) => this._snapshotFeatures({ signal: e }))), this._snapshotTask.promise.then(((e) => {
      this._queryEngine.featureStore.clear(), this._queryEngine.featureStore.addMany(e.features);
      for (const t2 of q(e)) i.getLogger(S).warn(new s3("wfs-layer:refresh-warning", t2.message, t2.details));
      e.errors?.length && i.getLogger(S).warn(new s3("wfs-layer:refresh-error", "Refresh completed with errors", { errors: e.errors }));
    }), (() => {
      this._queryEngine.featureStore.clear();
    })), await this._waitSnapshotComplete(), { extent: (await this._queryEngine.fetchRecomputedExtents()).fullExtent };
  }
  async _waitSnapshotComplete() {
    if (this._snapshotTask && !this._snapshotTask.finished) {
      try {
        await this._snapshotTask.promise;
      } catch {
      }
      return this._waitSnapshotComplete();
    }
  }
  async _snapshotFeatures(e) {
    const t = e?.signal, r2 = this._maxTotalRecordCount, n3 = this._maxPageCount, i2 = this._supportsPagination && n3 > 1 ? await ee(this._getFeatureUrl, this._featureType.typeName, { customParameters: this._customParameters, signal: t }) : void 0;
    let u2 = [];
    const l = [];
    if (null == i2) try {
      u2 = await this._singleQuery(t);
    } catch (c) {
      b(c) || l.push(c);
    }
    else {
      const e2 = Math.min(i2, r2), s5 = T(this, r(Math.ceil(e2 / this._maxRecordCount), 1, n3), t);
      await Promise.allSettled(Array.from({ length: 10 }).map((() => E2(s5, u2, l))));
    }
    return s2(t), { features: u2, totalRecordCount: i2, maxTotalRecordCount: r2, maxPageCount: n3, errors: l };
  }
  async _singleQuery(e) {
    const t = Number.isFinite(this._maxRecordCount) && this._maxRecordCount > 0 ? this._maxRecordCount : void 0, r2 = await K(this._getFeatureUrl, this._featureType.typeName, this._getFeatureSpatialReference, this._getFeatureOutputFormat, { customParameters: this._customParameters, count: t, signal: e });
    return this._processGeoJSON(r2, { signal: e });
  }
  async _pageQuery(e, t) {
    const r2 = e * this._maxRecordCount, a = await K(this._getFeatureUrl, this._featureType.typeName, this._getFeatureSpatialReference, this._getFeatureOutputFormat, { customParameters: this._customParameters, startIndex: r2, count: this._maxRecordCount, signal: t });
    return this._processGeoJSON(a, { startIndex: r2, signal: t });
  }
  _processGeoJSON(e, t) {
    E(e, this._getFeatureSpatialReference.wkid);
    const { startIndex: r2, signal: a } = t;
    s2(a);
    const o = N(e, { geometryType: this._geometryType, hasZ: false, objectIdField: this._objectIdField });
    if (!s4(this._spatialReference, this._getFeatureSpatialReference)) for (const s5 of o) null != s5.geometry && (s5.geometry = ut(j(lt(s5.geometry, this._geometryType, false, false), this._getFeatureSpatialReference, this._spatialReference)));
    let n3 = r2 ?? 1;
    for (const s5 of o) {
      const e2 = {};
      d2(this._fieldsIndex, e2, s5.attributes, true), s5.attributes = e2, null == e2[this._objectIdField] && (s5.objectId = e2[this._objectIdField] = n3++);
    }
    return o;
  }
};
function* T(e, t, r2) {
  for (let a = 0; a < t; a++) yield e._pageQuery(a, r2);
}
async function E2(e, t, r2) {
  let a = e.next();
  for (; !a.done; ) {
    try {
      const e2 = await a.value;
      t.push(...e2);
    } catch (s5) {
      b(s5) || r2.push(s5);
    }
    a = e.next();
  }
}
function q(e) {
  const t = [];
  return null != e.totalRecordCount && (e.features.length < e.totalRecordCount && t.push({ name: "wfs-layer:maxRecordCount-too-low", message: `Could only fetch ${e.features.length} of ${e.totalRecordCount} in ${e.maxPageCount} queries. Try increasing the value of WFSLayer.maxRecordCount.`, details: { recordCount: e.features.length, totalRecordCount: e.totalRecordCount } }), e.totalRecordCount > e.maxTotalRecordCount && t.push({ name: "wfs-layer:large-dataset", message: `The number of ${e.totalRecordCount} features exceeds the maximum allowed of ${e.maxTotalRecordCount}.`, details: { recordCount: e.features.length, totalRecordCount: e.totalRecordCount, maxTotalRecordCount: e.maxTotalRecordCount } })), t;
}
export {
  j2 as default
};
//# sourceMappingURL=WFSSourceWorker-4VLBZSFB.js.map
