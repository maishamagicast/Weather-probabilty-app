import {
  n
} from "./chunk-INI6MHIQ.js";
import {
  a as a2
} from "./chunk-CBCDVQSA.js";
import {
  l
} from "./chunk-FCX4ZA3Z.js";
import {
  b,
  m2 as m
} from "./chunk-2ZPU5IZX.js";
import {
  a2 as a
} from "./chunk-S62CSPIH.js";
import {
  r
} from "./chunk-Y4BWIIWH.js";

// node_modules/@arcgis/core/analysis/support/AnalysisOriginWebScene.js
var t = class extends a2 {
  constructor(r2) {
    super(r2), this.type = "web-scene";
  }
  equals(r2) {
    return this.type === r2.type;
  }
};
r([m()], t.prototype, "type", void 0), t = r([a("esri.analysis.support.AnalysisOriginWebScene")], t);
var p = t;

// node_modules/@arcgis/core/analysis/Analysis.js
var p2 = 0;
var l2 = class extends l.JSONSupportMixin(a2.ClonableMixin(n.IdentifiableMixin(b))) {
  constructor(e) {
    super(e), this.id = `${Date.now().toString(16)}-analysis-${p2++}`, this.origin = null;
  }
  get parent() {
    return this._get("parent");
  }
  set parent(e) {
    const s = this.parent;
    if (null != s) switch (s.type) {
      case "line-of-sight":
      case "dimension":
      case "viewshed":
        s.releaseAnalysis(this);
        break;
      case "2d":
      case "3d":
        s.analyses.includes(this) && s.analyses.remove(this);
    }
    this._set("parent", e);
  }
  equals(e) {
    return true;
  }
};
r([m({ type: String, constructOnly: true, clonable: false })], l2.prototype, "id", void 0), r([m({ clonable: false, value: null })], l2.prototype, "parent", null), r([m({ types: { key: "type", base: null, typeMap: { "web-scene": p } } })], l2.prototype, "origin", void 0), l2 = r([a("esri.analysis.Analysis")], l2);

export {
  l2 as l
};
//# sourceMappingURL=chunk-7CSBO5GV.js.map
