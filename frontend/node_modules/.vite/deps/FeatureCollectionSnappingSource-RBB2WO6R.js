import {
  i as i2,
  o
} from "./chunk-AQ5K3EY6.js";
import "./chunk-MLBT5NSF.js";
import "./chunk-7J3MHRGU.js";
import "./chunk-BAO6UHB5.js";
import {
  t
} from "./chunk-YKE7YQGP.js";
import "./chunk-CRVQAW6F.js";
import "./chunk-3KDNHMA3.js";
import {
  y as y2
} from "./chunk-ONUQSGEP.js";
import "./chunk-37USNU2Q.js";
import "./chunk-YERTKO74.js";
import {
  y
} from "./chunk-WHNSSW5C.js";
import "./chunk-RHVCSVQD.js";
import "./chunk-HUR2TTV7.js";
import "./chunk-DPEZN2CZ.js";
import "./chunk-6T6LJGGM.js";
import "./chunk-HPADPQJ7.js";
import {
  i,
  n,
  r as r3
} from "./chunk-MC5GPFEL.js";
import "./chunk-3JKWT76Y.js";
import "./chunk-LOLNWH3R.js";
import "./chunk-FBGZNF2J.js";
import "./chunk-VJKKOB5K.js";
import "./chunk-3ZX4Y274.js";
import "./chunk-WX3VZIBK.js";
import "./chunk-A2AZM62Y.js";
import "./chunk-2RL34CVC.js";
import "./chunk-BNQMKYX6.js";
import "./chunk-B6C2GOG6.js";
import "./chunk-K3VYMAVM.js";
import "./chunk-P5DG4SNT.js";
import "./chunk-ZBTRSUIE.js";
import "./chunk-D6GGPM6D.js";
import "./chunk-U2JVYDTA.js";
import "./chunk-HH4Q2NN5.js";
import "./chunk-3CFYBBSV.js";
import "./chunk-AACFCXAP.js";
import "./chunk-RZGBA4KS.js";
import "./chunk-SCMB64VM.js";
import "./chunk-APMQAZ5Z.js";
import "./chunk-UZ3YWBWC.js";
import "./chunk-2EOHKZLO.js";
import "./chunk-3M6ALZOH.js";
import "./chunk-QPV4BKBC.js";
import "./chunk-LQQCPLIT.js";
import "./chunk-4O46EK5T.js";
import "./chunk-BPI4BR4E.js";
import "./chunk-UMUW6RKM.js";
import "./chunk-XRTNDGK2.js";
import "./chunk-H6ZVHKNF.js";
import "./chunk-YAXW2DL6.js";
import {
  r as r2
} from "./chunk-62NATJWT.js";
import "./chunk-CBCDVQSA.js";
import "./chunk-RKF6WUZT.js";
import "./chunk-RMRI4NYS.js";
import "./chunk-YYLIW24Q.js";
import "./chunk-B7BH33JH.js";
import "./chunk-BLBN3L5Q.js";
import "./chunk-ZJQPHR3K.js";
import {
  a as a2,
  h as h2,
  l
} from "./chunk-HYAO4PVV.js";
import "./chunk-SRNKPAJX.js";
import "./chunk-MOMLPET6.js";
import "./chunk-3QHX4R4B.js";
import "./chunk-SDIBXPSJ.js";
import "./chunk-CBXZL53X.js";
import "./chunk-LPCUYJ2B.js";
import "./chunk-SMO33YG7.js";
import "./chunk-LCBAL6ER.js";
import "./chunk-6JCZVSRM.js";
import "./chunk-LLGOMKTE.js";
import "./chunk-ZB6KRLRI.js";
import "./chunk-67AKDROO.js";
import "./chunk-CM3TIXEV.js";
import "./chunk-POWGZO3T.js";
import "./chunk-OUZJZB6I.js";
import "./chunk-NJZD7WM5.js";
import "./chunk-CL7VLXUR.js";
import "./chunk-FCX4ZA3Z.js";
import {
  b,
  m2 as m
} from "./chunk-2ZPU5IZX.js";
import {
  a2 as a
} from "./chunk-S62CSPIH.js";
import "./chunk-X26VPODZ.js";
import "./chunk-XNYPRDKK.js";
import {
  r
} from "./chunk-Y4BWIIWH.js";
import "./chunk-TTJIKWMC.js";
import "./chunk-CMEG2CKL.js";
import "./chunk-VHPBXBDE.js";
import "./chunk-6ACTD4UJ.js";
import "./chunk-5REYU5G2.js";
import "./chunk-JNYZ3I5R.js";
import {
  h,
  s
} from "./chunk-N626Y23H.js";
import "./chunk-TJPLHZCD.js";
import "./chunk-KLFJ5V5G.js";
import "./chunk-G26ADAPQ.js";

// node_modules/@arcgis/core/views/interactive/snapping/featureSources/FeatureCollectionSnappingSource.js
var f = class extends b {
  get availability() {
    return 1;
  }
  get _snappingElevationAligner() {
    const { view: e } = this, { layer: t2 } = this.layerSource, i3 = null != e && "3d" === e.type;
    if (!i3 || "subtype-group" === t2.type) return i();
    const r4 = async (i4, r5) => (await h(e.whenLayerView(t2), r5)).elevationAlignPointsInFeatures(i4, r5);
    return i(i3, { elevationInfo: t2.elevationInfo, alignPointsInFeatures: r4 });
  }
  get _snappingElevationFilter() {
    const { view: e } = this, t2 = null != e && "3d" === e.type && "subtype-group" !== this.layerSource.layer.type;
    return r3(t2);
  }
  get _symbologySnappingFetcher() {
    const { view: e } = this, { layer: t2 } = this.layerSource;
    return null != e && "3d" === e.type && "subtype-group" !== t2.type ? n(this._symbologySnappingSupported, (async (i3, n2) => {
      const o2 = await e.whenLayerView(t2);
      return s(n2), o2.queryForSymbologySnapping({ candidates: i3, spatialReference: e.spatialReference }, n2);
    })) : n();
  }
  get _layerView() {
    const { view: e } = this;
    if (null == e) return null;
    const { layer: t2 } = this.layerSource;
    return e.allLayerViews.find(((e2) => e2.layer === t2));
  }
  get _layerView3D() {
    const { view: e } = this;
    return null == e || "2d" === e.type ? null : this._layerView;
  }
  get _symbologySnappingSupported() {
    return null != this._layerView3D && this._layerView3D.symbologySnappingSupported;
  }
  initialize() {
    const { view: e } = this, { layer: t2 } = this.layerSource;
    null != e && "3d" === e.type && "subtype-group" !== t2.type && this.addHandles([e.elevationProvider.on("elevation-change", (({ context: e2 }) => {
      const { elevationInfo: i3 } = t2;
      y(e2, i3) && this._snappingElevationAligner.notifyElevationSourceChange();
    })), l((() => t2.elevationInfo), (() => this._snappingElevationAligner.notifyElevationSourceChange()), h2), l((() => null != this._layerView3D ? this._layerView3D.layer?.renderer : null), (() => this._symbologySnappingFetcher.notifySymbologyChange()), h2), a2((() => this._layerView3D?.layer), ["edits", "apply-edits", "graphic-update"], (() => this._symbologySnappingFetcher.notifySymbologyChange()))]);
  }
  constructor(e) {
    super(e), this.view = null, this.updating = false, this._memoizedMakeGetGroundElevation = t(i2);
  }
  refresh() {
  }
  async fetchCandidates(e, t2) {
    const { layer: i3 } = this.layerSource, { source: n2 } = i3;
    if (!n2?.querySnapping) return [];
    const o2 = i3.createQuery();
    this._layerView && "effectiveDisplayFilter" in this._layerView && (o2.where = r2(o2.where, this._layerView.effectiveDisplayFilter?.where));
    const a3 = "returnZ" in i3 ? i3.returnZ : void 0, s2 = y2({ parameters: e, mode: this.view?.type ?? "2d", returnZ: a3, filter: o2 }), p = await n2.querySnapping(s2, { signal: t2 });
    s(t2);
    const y3 = e.coordinateHelper.spatialReference, c = await this._snappingElevationAligner.alignCandidates(p.candidates, y3, t2);
    s(t2);
    const g = await this._symbologySnappingFetcher.fetch(c, t2);
    s(t2);
    const m2 = 0 === g.length ? c : [...c, ...g], d = this._snappingElevationFilter.filter(s2, m2), v = this._memoizedMakeGetGroundElevation(this.view, y3);
    return d.map(((e2) => o(e2, v)));
  }
};
r([m({ constructOnly: true })], f.prototype, "layerSource", void 0), r([m({ constructOnly: true })], f.prototype, "view", void 0), r([m()], f.prototype, "_snappingElevationAligner", null), r([m()], f.prototype, "_snappingElevationFilter", null), r([m()], f.prototype, "_symbologySnappingFetcher", null), r([m()], f.prototype, "_layerView", null), r([m()], f.prototype, "_layerView3D", null), r([m()], f.prototype, "_symbologySnappingSupported", null), f = r([a("esri.views.interactive.snapping.featureSources.FeatureCollectionSnappingSource")], f);
export {
  f as FeatureCollectionSnappingSource
};
//# sourceMappingURL=FeatureCollectionSnappingSource-RBB2WO6R.js.map
