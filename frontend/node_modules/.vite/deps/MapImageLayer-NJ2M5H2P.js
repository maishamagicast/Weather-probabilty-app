import {
  y
} from "./chunk-623HSPCL.js";
import "./chunk-GYPE5A7A.js";
import {
  ae,
  f as f2,
  m as m2
} from "./chunk-CLALZLYE.js";
import {
  e as e3
} from "./chunk-NJEKKV7N.js";
import {
  t as t3
} from "./chunk-LP5PTXVN.js";
import "./chunk-DYJFNOYL.js";
import "./chunk-N36OHHH6.js";
import "./chunk-NQ2IXS5Y.js";
import "./chunk-UN7Z22YY.js";
import {
  A
} from "./chunk-BZSAIP56.js";
import "./chunk-5ZJG2W6X.js";
import "./chunk-7JSCPQTK.js";
import "./chunk-EYECC3PG.js";
import "./chunk-LUPQ25XG.js";
import {
  i
} from "./chunk-3GQTEESV.js";
import {
  t as t4
} from "./chunk-UBVWE2LK.js";
import {
  l
} from "./chunk-32DGBWKL.js";
import "./chunk-DJRZXLB2.js";
import {
  i as i2
} from "./chunk-3ESJRJZD.js";
import "./chunk-L6GG77AZ.js";
import "./chunk-XOKYRVJ5.js";
import "./chunk-D2DRG2DH.js";
import {
  e as e2
} from "./chunk-HOVLU5XA.js";
import {
  c as c2
} from "./chunk-2DCDAX3U.js";
import "./chunk-EZ5REY53.js";
import "./chunk-3HYSKSYM.js";
import {
  f
} from "./chunk-EWP4DLQF.js";
import {
  p
} from "./chunk-CHGKJUJ3.js";
import "./chunk-3YBQQHIP.js";
import "./chunk-OJQCHQYS.js";
import {
  t as t2
} from "./chunk-N3W3EVP3.js";
import {
  b2,
  y as y2
} from "./chunk-ZJXLBTN2.js";
import "./chunk-SIRTOV2N.js";
import "./chunk-V7CFMRVF.js";
import "./chunk-LINWZZJL.js";
import "./chunk-QZISYUPA.js";
import "./chunk-HQRWZZNA.js";
import "./chunk-CKFS2QIU.js";
import "./chunk-PI2R2EZ2.js";
import "./chunk-JLGVQWP5.js";
import "./chunk-LCT65JMM.js";
import "./chunk-IR6JOM7Y.js";
import "./chunk-MK7DDFJN.js";
import {
  j
} from "./chunk-H2PFGMJP.js";
import {
  S
} from "./chunk-OFINLTIW.js";
import "./chunk-EU5HNJUP.js";
import "./chunk-CJSURDZH.js";
import "./chunk-FFY3IMAS.js";
import "./chunk-YT2ORY5Z.js";
import "./chunk-2UINVE7X.js";
import "./chunk-PTLGJ4Y6.js";
import "./chunk-KXZAYF3U.js";
import "./chunk-PHSQVJNW.js";
import "./chunk-KFNWBWN4.js";
import "./chunk-K55CXVYD.js";
import "./chunk-G2F62CY5.js";
import "./chunk-Q37ABIVM.js";
import "./chunk-VFMQPCCZ.js";
import "./chunk-63ZT5BWV.js";
import "./chunk-OPQ3FCJ4.js";
import {
  c as c3
} from "./chunk-W3BJJE6D.js";
import "./chunk-UZ3YWBWC.js";
import "./chunk-TZZ746IQ.js";
import "./chunk-K5CV62SX.js";
import "./chunk-P7KAQGGQ.js";
import "./chunk-J6CZRLYU.js";
import "./chunk-4QXO2FM6.js";
import "./chunk-2EOHKZLO.js";
import "./chunk-S7GLMIAQ.js";
import "./chunk-YIVJSMJO.js";
import "./chunk-QMUTCCDX.js";
import "./chunk-24S6C5S6.js";
import "./chunk-7Y4U2JD3.js";
import "./chunk-GCTSCKPO.js";
import "./chunk-6U4EGJOK.js";
import "./chunk-W7U4L72B.js";
import "./chunk-UICDKBDP.js";
import "./chunk-3M6ALZOH.js";
import "./chunk-QPV4BKBC.js";
import "./chunk-LQQCPLIT.js";
import "./chunk-4O46EK5T.js";
import "./chunk-UO2UKPG5.js";
import "./chunk-EMULKSUV.js";
import "./chunk-AY3JR4QM.js";
import "./chunk-A2AZM62Y.js";
import "./chunk-LQYJLB4P.js";
import "./chunk-D6GGPM6D.js";
import "./chunk-FQY65CBA.js";
import "./chunk-HH4Q2NN5.js";
import "./chunk-IR4HVW2K.js";
import "./chunk-OT2P27SF.js";
import "./chunk-XJOLJK3F.js";
import "./chunk-3CFYBBSV.js";
import "./chunk-ZVNJ2S2Z.js";
import {
  t
} from "./chunk-EU64TE5C.js";
import "./chunk-LBDNG364.js";
import {
  h
} from "./chunk-R25QZWQ7.js";
import "./chunk-BELQIHLO.js";
import {
  u
} from "./chunk-BPI4BR4E.js";
import "./chunk-YVMULGDJ.js";
import "./chunk-CJDZN5K5.js";
import "./chunk-N77BULFI.js";
import "./chunk-6TZIEYTZ.js";
import "./chunk-UMUW6RKM.js";
import "./chunk-XRTNDGK2.js";
import "./chunk-A6R2FXH6.js";
import "./chunk-H6ZVHKNF.js";
import "./chunk-YAXW2DL6.js";
import "./chunk-QLKHFYAN.js";
import "./chunk-FV6ZNHFI.js";
import "./chunk-PBKE5BCM.js";
import "./chunk-FOALQHMM.js";
import "./chunk-7HS3ESHX.js";
import "./chunk-2CS746FZ.js";
import "./chunk-NEI5HAVK.js";
import "./chunk-RCOFAQFP.js";
import "./chunk-CO2J5JPW.js";
import "./chunk-CHAHOTAY.js";
import "./chunk-RZGBA4KS.js";
import "./chunk-FSYN2HHU.js";
import "./chunk-7I4TWCTW.js";
import "./chunk-W5UOLFE2.js";
import "./chunk-AZ2S2PYZ.js";
import "./chunk-SCMB64VM.js";
import "./chunk-FOPBVVXE.js";
import "./chunk-INI6MHIQ.js";
import "./chunk-R7YP6EQJ.js";
import "./chunk-QUZZIDFR.js";
import "./chunk-CBCDVQSA.js";
import "./chunk-74GULGYB.js";
import "./chunk-RKF6WUZT.js";
import "./chunk-RMRI4NYS.js";
import "./chunk-YYLIW24Q.js";
import "./chunk-B7BH33JH.js";
import "./chunk-BLBN3L5Q.js";
import "./chunk-5EWIWLNU.js";
import "./chunk-TOCH3L2K.js";
import {
  z
} from "./chunk-CBXZL53X.js";
import "./chunk-HYAO4PVV.js";
import "./chunk-SRNKPAJX.js";
import {
  a as a3
} from "./chunk-MOMLPET6.js";
import "./chunk-VNQUG2TO.js";
import "./chunk-EULNFFHG.js";
import "./chunk-SDIBXPSJ.js";
import "./chunk-LPCUYJ2B.js";
import "./chunk-3QHX4R4B.js";
import "./chunk-SMO33YG7.js";
import "./chunk-LCBAL6ER.js";
import {
  c
} from "./chunk-6JCZVSRM.js";
import "./chunk-LLGOMKTE.js";
import "./chunk-ZB6KRLRI.js";
import "./chunk-67AKDROO.js";
import "./chunk-CM3TIXEV.js";
import {
  H
} from "./chunk-2AYGXVZI.js";
import "./chunk-OUZJZB6I.js";
import "./chunk-WO5FLTVY.js";
import "./chunk-MGA7XBRB.js";
import "./chunk-XNUSHDFN.js";
import "./chunk-4AKMPOG7.js";
import "./chunk-2CJBZZN7.js";
import "./chunk-APMQAZ5Z.js";
import "./chunk-ZJQPHR3K.js";
import {
  o
} from "./chunk-NJZD7WM5.js";
import {
  r as r2
} from "./chunk-CL7VLXUR.js";
import "./chunk-FCX4ZA3Z.js";
import {
  e,
  m2 as m,
  n2 as n
} from "./chunk-2ZPU5IZX.js";
import {
  a2
} from "./chunk-S62CSPIH.js";
import {
  x
} from "./chunk-X26VPODZ.js";
import "./chunk-XNYPRDKK.js";
import "./chunk-JNYZ3I5R.js";
import {
  r
} from "./chunk-Y4BWIIWH.js";
import "./chunk-TTJIKWMC.js";
import "./chunk-CMEG2CKL.js";
import "./chunk-VHPBXBDE.js";
import "./chunk-6ACTD4UJ.js";
import "./chunk-5REYU5G2.js";
import {
  a,
  b,
  k
} from "./chunk-N626Y23H.js";
import {
  s2 as s
} from "./chunk-TJPLHZCD.js";
import "./chunk-KLFJ5V5G.js";
import "./chunk-G26ADAPQ.js";

// node_modules/@arcgis/core/layers/MapImageLayer.js
var k2 = class extends p(c2(t2(m2(f2(l(b2(j(S(f(i(e2(h)))))))))))) {
  constructor(...e4) {
    super(...e4), this._exportImageParameters = new y({ layer: this }), this.dateFieldsTimeZone = null, this.datesInUnknownTimezone = false, this.dpi = 96, this.elevationInfo = new c3({ mode: "on-the-ground" }), this.gdbVersion = null, this.imageFormat = "png24", this.imageMaxHeight = 2048, this.imageMaxWidth = 2048, this.imageTransparency = true, this.isReference = null, this.labelsVisible = false, this.operationalLayerType = "ArcGISMapServiceLayer", this.preferredTimeZone = null, this.sourceJSON = null, this.sublayers = null, this.type = "map-image", this.url = null, this._debouncedSaveOperations = k((async (e5, r3, t5) => {
      const { save: s2, saveAs: i3 } = await import("./mapImageLayerUtils-JO6IMJKK.js");
      switch (e5) {
        case A.SAVE:
          return s2(this, r3);
        case A.SAVE_AS:
          return i3(this, t5, r3);
      }
    }));
  }
  normalizeCtorArgs(e4, r3) {
    return "string" == typeof e4 ? { url: e4, ...r3 } : e4;
  }
  load(e4) {
    const r3 = null != e4 ? e4.signal : null;
    return this.addResolvingPromise(this.loadFromPortal({ supportedTypes: ["Map Service"] }, e4).catch(a).then((() => this._fetchService(r3)))), Promise.resolve(this);
  }
  destroy() {
    this._exportImageParameters.destroy();
  }
  readImageFormat(e4, r3) {
    const t5 = r3.supportedImageFormatTypes;
    return t5 && t5.includes("PNG32") ? "png32" : "png24";
  }
  writeSublayers(e4, r3, t5, s2) {
    if (!this.loaded || !e4) return;
    const i3 = e4.slice().reverse().flatten((({ sublayers: e5 }) => e5 && e5.toArray().reverse())).toArray();
    let o2 = false;
    const a4 = n(s2.origin);
    let n2;
    if (this.capabilities?.operations.supportsExportMap && this.capabilities?.exportMap?.supportsDynamicLayers) {
      if (a4 === e.PORTAL_ITEM) {
        const e5 = this.createSublayersForOrigin("service").sublayers;
        o2 = e3(i3, e5, e.SERVICE);
      } else if (a4 > e.PORTAL_ITEM) {
        const e5 = this.createSublayersForOrigin("portal-item");
        o2 = e3(i3, e5.sublayers, n(e5.origin)), n2 = e5.originWithPartialOverrides;
      }
    }
    const p2 = [], m3 = { writeSublayerStructure: o2, ...s2, minimumWritableOrigin: n2 };
    let l2 = o2 || this.hasVisibleLayersForOrigin(a4);
    i3.forEach(((e5) => {
      const r4 = e5.write({}, m3);
      p2.push(r4), l2 = l2 || "user" === e5.originOf("visible");
    }));
    p2.some(((e5) => Object.keys(e5).length > 1)) && (r3.layers = p2), l2 && (r3.visibleLayers = i3.filter(((e5) => e5.visible)).map(((e5) => e5.id)));
  }
  createExportImageParameters(e4, r3, t5, s2) {
    const i3 = s2?.pixelRatio || 1;
    e4 && this.version >= 10 && (e4 = e4.clone().shiftCentralMeridian()), this._exportImageParameters.floors = s2?.floors ?? null, this._exportImageParameters.scale = i2({ extent: e4, width: r3 }) * i3;
    const o2 = this._exportImageParameters.toJSON(), a4 = !s2?.rotation || this.version < 10.3 ? {} : { rotation: -s2.rotation }, n2 = e4?.spatialReference, p2 = c(n2);
    o2.dpi *= i3;
    const m3 = {};
    if (s2?.timeExtent) {
      const { start: e5, end: r4 } = s2.timeExtent.toJSON();
      m3.time = e5 && r4 && e5 === r4 ? "" + e5 : `${e5 ?? "null"},${r4 ?? "null"}`;
    } else this.timeInfo && !this.timeInfo.hasLiveData && (m3.time = "null,null");
    return { bbox: e4 ? e4.xmin + "," + e4.ymin + "," + e4.xmax + "," + e4.ymax : void 0, bboxSR: p2, imageSR: p2, size: r3 + "," + t5, ...o2, ...a4, ...m3 };
  }
  async fetchImage(e4, r3, t5, s2) {
    const { data: i3 } = await this._fetchImage("image", e4, r3, t5, s2);
    return i3;
  }
  async fetchImageBitmap(e4, r3, t5, s2) {
    const { data: i3, url: o2 } = await this._fetchImage("blob", e4, r3, t5, s2);
    return t3(i3, o2, s2?.signal);
  }
  async fetchRecomputedExtents(e4 = {}) {
    const t5 = { ...e4, query: { returnUpdates: true, f: "json", ...this.customParameters, token: this.apiKey } }, { data: s2 } = await H(this.url, t5), { extent: i3, fullExtent: o2, timeExtent: a4 } = s2, n2 = i3 || o2;
    return { fullExtent: n2 && z.fromJSON(n2), timeExtent: a4 && u.fromJSON({ start: a4[0], end: a4[1] }) };
  }
  loadAll() {
    return t(this, ((e4) => {
      e4(this.allSublayers), e4(this.subtables);
    }));
  }
  async save(e4) {
    return this._debouncedSaveOperations(A.SAVE, e4);
  }
  async saveAs(e4, r3) {
    return this._debouncedSaveOperations(A.SAVE_AS, r3, e4);
  }
  serviceSupportsSpatialReference(e4) {
    return t4(this, e4);
  }
  async _fetchImage(e4, s2, i3, o2, a4) {
    const p2 = { responseType: e4, signal: a4?.signal ?? null, query: { ...this.parsedUrl.query, ...this.createExportImageParameters(s2, i3, o2, a4), f: "image", ...this.refreshParameters, ...this.customParameters, token: this.apiKey } }, m3 = this.parsedUrl.path + "/export";
    if (null != p2.query?.dynamicLayers && !this.capabilities?.exportMap?.supportsDynamicLayers) throw new s("mapimagelayer:dynamiclayer-not-supported", `service ${this.url} doesn't support dynamic layers, which is required to be able to change the sublayer's order, rendering, labeling or source.`, { query: p2.query });
    try {
      const { data: e5 } = await H(m3, p2);
      return { data: e5, url: m3 };
    } catch (l2) {
      if (b(l2)) throw l2;
      throw new s("mapimagelayer:image-fetch-error", `Unable to load image: ${m3}`, { error: l2 });
    }
  }
  async _fetchService(e4) {
    if (this.sourceJSON) return void this.read(this.sourceJSON, { origin: "service", url: this.parsedUrl });
    const { data: t5, ssl: s2 } = await H(this.parsedUrl.path, { query: { f: "json", ...this.parsedUrl.query, ...this.customParameters, token: this.apiKey }, signal: e4 });
    s2 && (this.url = this.url.replace(/^http:/i, "https:")), this.sourceJSON = t5, this.read(t5, { origin: "service", url: this.parsedUrl });
  }
  hasVisibleLayersForOrigin(e4) {
    return !(null == e4 || !this.sublayersSourceJSON[e4]?.visibleLayers);
  }
};
r([m(a3("dateFieldsTimeReference"))], k2.prototype, "dateFieldsTimeZone", void 0), r([m({ type: Boolean })], k2.prototype, "datesInUnknownTimezone", void 0), r([m()], k2.prototype, "dpi", void 0), r([m()], k2.prototype, "elevationInfo", void 0), r([m()], k2.prototype, "gdbVersion", void 0), r([m()], k2.prototype, "imageFormat", void 0), r([o("imageFormat", ["supportedImageFormatTypes"])], k2.prototype, "readImageFormat", null), r([m({ json: { origins: { service: { read: { source: "maxImageHeight" } } } } })], k2.prototype, "imageMaxHeight", void 0), r([m({ json: { origins: { service: { read: { source: "maxImageWidth" } } } } })], k2.prototype, "imageMaxWidth", void 0), r([m()], k2.prototype, "imageTransparency", void 0), r([m({ type: Boolean, json: { read: false, write: { enabled: true, overridePolicy: () => ({ enabled: false }) } } })], k2.prototype, "isReference", void 0), r([m({ json: { read: false, write: false } })], k2.prototype, "labelsVisible", void 0), r([m({ type: ["ArcGISMapServiceLayer"] })], k2.prototype, "operationalLayerType", void 0), r([m({ json: { read: false, write: false } })], k2.prototype, "popupEnabled", void 0), r([m(a3("preferredTimeReference"))], k2.prototype, "preferredTimeZone", void 0), r([m()], k2.prototype, "sourceJSON", void 0), r([m({ json: { write: { ignoreOrigin: true } } })], k2.prototype, "sublayers", void 0), r([r2("sublayers", { layers: { type: [ae] }, visibleLayers: { type: [x] } })], k2.prototype, "writeSublayers", null), r([m({ type: ["show", "hide", "hide-children"], json: { origins: { "portal-item": { read: false, write: false } } } })], k2.prototype, "listMode", void 0), r([m({ json: { read: false }, readOnly: true, value: "map-image" })], k2.prototype, "type", void 0), r([m(y2)], k2.prototype, "url", void 0), k2 = r([a2("esri.layers.MapImageLayer")], k2);
var G = k2;
export {
  G as default
};
//# sourceMappingURL=MapImageLayer-NJ2M5H2P.js.map
