import {
  A,
  E,
  F,
  N,
  O,
  P,
  S as S2,
  T,
  T2,
  a as a4,
  a2 as a5,
  a3 as a6,
  c as c2,
  c2 as c5,
  d as d2,
  d2 as d3,
  d3 as d4,
  e as e4,
  f,
  f2,
  f3,
  f4,
  g,
  h,
  h2,
  i as i4,
  k,
  l2 as l4,
  l3 as l5,
  l4 as l6,
  l5 as l7,
  m,
  m2,
  n as n3,
  o as o3,
  o2 as o4,
  o3 as o5,
  o4 as o6,
  p,
  p2,
  r as r4,
  r2 as r5,
  s as s2,
  s2 as s3,
  s3 as s4,
  s4 as s6,
  t,
  u as u3,
  u2 as u4,
  x,
  y
} from "./chunk-76RFKKMC.js";
import {
  s2 as s5
} from "./chunk-NA4PNORD.js";
import {
  c as c3
} from "./chunk-TRRRRFK2.js";
import {
  e as e3
} from "./chunk-W7HTQBDK.js";
import {
  a3 as a7,
  r as r3
} from "./chunk-ISZVN2MZ.js";
import {
  a as a3,
  c,
  l as l3
} from "./chunk-YF3MIHOZ.js";
import {
  r
} from "./chunk-Q2JFTIYQ.js";
import {
  i as i3
} from "./chunk-SNXPARJV.js";
import {
  c as c4
} from "./chunk-Z6F6OCSR.js";
import {
  d
} from "./chunk-KXZAYF3U.js";
import {
  G,
  o as o2,
  w
} from "./chunk-K55CXVYD.js";
import {
  dt,
  lt
} from "./chunk-24S6C5S6.js";
import {
  e as e2
} from "./chunk-6U4EGJOK.js";
import {
  n as n2
} from "./chunk-YGH6TKDR.js";
import {
  M,
  i as i2
} from "./chunk-QNRDEVXA.js";
import {
  r as r2
} from "./chunk-QIPPWPN2.js";
import {
  a as a2,
  si,
  ti
} from "./chunk-P3R3JSYO.js";
import {
  B,
  S,
  l as l2,
  o,
  u as u2,
  v
} from "./chunk-BNQMKYX6.js";
import {
  n
} from "./chunk-B6C2GOG6.js";
import {
  u
} from "./chunk-4AKMPOG7.js";
import {
  e
} from "./chunk-JNYZ3I5R.js";
import {
  a,
  i3 as i,
  l2 as l,
  s2 as s
} from "./chunk-TJPLHZCD.js";
import {
  L
} from "./chunk-KLFJ5V5G.js";

// node_modules/@arcgis/core/views/2d/engine/webgl/shaderGraph/techniques/animated/ComputedAnimatedParams.js
function i5(i6) {
  let { pixelDimensions: t2, texelDimensions: s7, baseSize: r7, referenceSize: n4, strokeWidth: o7, sizeRatio: f5 } = i6;
  if (t2 || (t2 = i6.sprite.sdf ? [0, 0] : [i6.sprite.width, i6.sprite.height]), s7 || (s7 = i6.sprite.sdf ? [0, 0] : t2), null != i6.patternHeight) {
    const e5 = i6.patternHeight / t2[1];
    t2[1] *= e5, t2[0] *= e5;
  }
  -1 === r7 && (r7 = t2[1]), r7 = u(r7), n4 = u(n4), o7 = u(o7);
  const p3 = (i6.sprite.sdfDecodeCoeff ?? 1) * f5;
  return { ...i6, pixelDimensions: t2, texelDimensions: s7, baseSize: r7, referenceSize: n4, strokeWidth: o7, sdfDecodeCoeff: p3 };
}

// node_modules/@arcgis/core/views/2d/engine/webgl/shaderGraph/techniques/animated/AnimatedMarkerMeshWriter.js
var w2 = 64;
var b = 64;
var v2 = 2;
var _ = class extends o3 {
  get vertexSpec() {
    return { createComputedParams: i5, optionalAttributes: { zoomRange: a5, value1Position2Value2: s3, lineLength: l5 }, attributes: { id: m2, bitset: y, pos: F, offset: f2.marker, uv: O.marker, animationPointerAndBaseSizeAndReferenceSize: d2, sizing: x, angle: N } };
  }
  _write(e5, t2) {
    const i6 = this.evaluatedMeshParams.sprite, { textureBinding: r7 } = i6;
    e5.recordStart(this.instanceId, this.attributeLayout, r7);
    const s7 = t2.getDisplayId();
    if (this.shift && "esriGeometryPolyline" === t2.geometryType) this._writeParticles(e5, t2);
    else if (null != this.evaluatedMeshParams.placement) this._writePlacedMarkers(e5, t2);
    else if ("esriGeometryPolygon" === t2.geometryType) {
      const i7 = t2.readCentroidForDisplay();
      if (!i7) return;
      const [r8, o7] = i7.coords;
      this._writeQuad(e5, s7, r8, o7);
    } else if ("esriGeometryPoint" === t2.geometryType) {
      const i7 = t2.readXForDisplay(), r8 = t2.readYForDisplay();
      this._writeQuad(e5, s7, i7, r8);
    } else {
      const i7 = t2.readGeometryForDisplay();
      i7 && i7.forEachVertex(((t3, i8) => {
        this._writeQuad(e5, s7, t3, i8);
      }));
    }
    e5.recordEnd();
  }
  _writePlacedMarkers(r7, o7) {
    const n4 = a3.fromFeatureSetReaderCIM(o7)?.clone();
    if (!n4) return;
    const a8 = -1, c6 = e4.getPlacement(n4, a8, this.evaluatedMeshParams.placement, u(1), r7.id, t());
    if (!c6) return;
    const m3 = o7.getDisplayId();
    let l8 = c6.next(), d5 = null;
    for (; null != l8; ) {
      const e5 = l8.tx, t2 = -l8.ty;
      if (Math.abs(e5) > r || Math.abs(t2) > r) {
        l8 = c6.next();
        continue;
      }
      const s7 = -l8.getAngle();
      r7.recordBounds(e5, t2, w2, b), this.shift ? d5 && this._writeQuad(r7, m3, d5[0], d5[1], void 0, s7) : this._writeQuad(r7, m3, e5, t2, void 0, s7), d5 = [e5, t2], l8 = c6.next();
    }
  }
  _writeParticles(e5, t2) {
    const i6 = t2.getDisplayId(), s7 = t2.readGeometryForDisplay();
    if (!s7) return;
    const o7 = [];
    s7.forEachVertex(((e6, t3) => {
      o7.push([e6, t3]);
    }));
    const n4 = j(o7);
    let a8 = 0;
    for (let r7 = 1; r7 < o7.length; r7++) {
      const e6 = o7[r7][0] - o7[r7 - 1][0], t3 = o7[r7][1] - o7[r7 - 1][1], i7 = Math.sqrt(e6 * e6 + t3 * t3);
      a8 += i7;
    }
    const c6 = (t3) => {
      for (const r7 of n4) {
        const { a: s8, b: o8 } = r7;
        this._writeQuad(e5, i6, s8.position[0], s8.position[1], [s8.distance - t3, o8.position[0], o8.position[1], o8.distance - t3], this.evaluatedMeshParams.angleToLine ? Math.atan2(s8.direction[1], s8.direction[0]) : 0, a8, true);
      }
    }, { placement: m3 } = this.evaluatedMeshParams;
    if (!m3 || "placementTemplate" in m3 || "CIMMarkerPlacementOnVertices" === m3.type) {
      let e6;
      if (m3 && "CIMMarkerPlacementOnVertices" !== m3.type) e6 = m3.placementTemplate;
      else {
        e6 = [0];
        for (const t4 of n4) {
          const { a: i7, b: r7 } = t4, s8 = i7.position[0] - r7.position[0], o8 = i7.position[1] - r7.position[1], n5 = Math.sqrt(s8 * s8 + o8 * o8);
          e6.push(n5);
        }
      }
      let t3 = -1 * a8;
      for (; t3 < (1 + v2 / 2) * a8; ) for (const i7 of e6) t3 += i7, c6(t3);
    } else "CIMMarkerPlacementAtExtremities" === m3.type ? m3.extremityPlacement === o2.JustBegin ? c6(1) : m3.extremityPlacement === o2.JustEnd ? (c6(a8 - 1), c6(-1)) : m3.extremityPlacement === o2.Both && (c6(1), c6(a8 - 1)) : "CIMMarkerPlacementOnLine" === m3.type && c6(a8 / 2);
  }
  _writeQuad(e5, t2, i6, r7, s7, n4 = 0, a8 = 0, c6 = false) {
    const m3 = this.evaluatedMeshParams.sprite, { rect: l8 } = m3, d5 = l8.x + ti, p3 = l8.y + ti, h4 = l8.x + l8.width - ti, u5 = l8.y + l8.height - ti, f5 = e5.vertexCount();
    c6 || e5.recordBounds(i6, r7, w2, w2);
    const y4 = { texXmin: d5, texYmin: p3, texXmax: h4, texYmax: u5, value1Position2Value2: s7, angle: n4 / c3, lineLength: a8 };
    for (let o7 = 0; o7 < 4; o7++) this._writeVertex(e5, t2, i6, r7, y4);
    e5.indexEnsureSize(6), e5.indexWrite(f5), e5.indexWrite(f5 + 1), e5.indexWrite(f5 + 2), e5.indexWrite(f5 + 1), e5.indexWrite(f5 + 3), e5.indexWrite(f5 + 2);
  }
};
function j(e5) {
  const t2 = [];
  let i6 = 0;
  for (let r7 = 1; r7 < e5.length; r7++) {
    const s7 = e5[r7 - 1], o7 = e5[r7], n4 = o7[0] - s7[0], a8 = o7[1] - s7[1], c6 = Math.sqrt(n4 * n4 + a8 * a8), m3 = n4 / c6, l8 = a8 / c6;
    t2.push({ a: { position: s7, distance: i6, direction: [m3, l8] }, b: { position: o7, distance: i6 + c6, direction: [m3, l8] } }), i6 += c6;
  }
  return t2;
}
var C = class extends _ {
  constructor() {
    super(...arguments), this.shift = false;
  }
};
var I = class extends _ {
  constructor() {
    super(...arguments), this.shift = true;
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/shaderGraph/techniques/animated/AnimatedPolyMeshWriters.js
var C2 = class extends o3 {
  _write(t2, i6, s7) {
    const r7 = s7 ?? a3.fromFeatureSetReaderCIM(i6);
    if (!r7) return;
    const n4 = this.evaluatedMeshParams.sprite, { textureBinding: o7 } = n4;
    t2.recordStart(this.instanceId, this.attributeLayout, o7);
    const a8 = i6.getDisplayId();
    this._writePoly(t2, a8, r7.asOptimized()), t2.recordEnd();
  }
};
var j2 = class extends C2 {
  constructor() {
    super(...arguments), this.vertexSpec = { createComputedParams: i5, attributes: { id: m2, bitset: y, pos: F, offset: f2.fill, tlbr: S2, animationPointerAndBaseSizeAndReferenceSize: d2, sizing: x }, optionalAttributes: { zoomRange: a5, value1Position2Value2: p2, lineLength: r5 } };
  }
  _writePoly(t2, e5, i6) {
    const s7 = [];
    if (!a6(s7, i6)) return;
    const r7 = t2.vertexCount();
    i6.forEachVertex(((i7, s8) => {
      this._writeVertex(t2, e5, i7, s8);
    })), t2.indexEnsureSize(s7.length);
    for (const n4 of s7) t2.indexWrite(r7 + n4);
  }
};
var z = class {
  constructor() {
    this.id = 0, this.bitset = 0, this.indexCount = 0, this.vertexCount = 0, this.vertexFrom = 0, this.vertexBounds = 0, this.pathLength = 0;
  }
};
var S3 = 65535;
var T3 = class extends C2 {
  constructor() {
    super(...arguments), this.vertexSpec = { createComputedParams: i5, attributes: { id: m2, bitset: y, pos: F, offset: f2.line, tlbr: S2, animationPointerAndBaseSizeAndReferenceSize: d2, sizing: x, accumulatedDistance: k, normal: T, segmentDirection: u3 }, optionalAttributes: { zoomRange: a5, value1Position2Value2: p2, lineLength: l5 } }, this._tessParams = new d4(), this._currentWrite = new z(), this._tessellationOptions = { halfWidth: 0, pixelCoordRatio: 1, offset: 0, wrapDistance: S3, textured: false }, this._lineLength = 0, this._lineTessellator = new c4(((t2, e5, i6, s7, r7, n4, o7, a8, h4, m3, l8) => this._writeTesselatedVertex(t2, e5, i6, s7, r7, n4, o7, a8, h4, m3, l8, this._lineLength)), this._writeTriangle.bind(this), false);
  }
  _writePoly(r7, o7, a8) {
    const h4 = 64, m3 = false, l8 = d3(a3.fromOptimized(a8, "esriGeometryPolyline"), h4);
    if (null == l8) return;
    const { _currentWrite: u5, _tessellationOptions: c6 } = this, { baseSize: d5, capType: p3, joinType: f5, miterLimit: x2 } = this.evaluatedMeshParams, _3 = u(0.5 * d5);
    c6.halfWidth = _3, c6.capType = h(p3 || w.Round), c6.joinType = p(f5 || G.Round), c6.miterLimit = x2 || 2, u5.out = r7, u5.id = o7, u5.vertexCount = 0, u5.indexCount = 0, u5.vertexFrom = r7.vertexCount(), u5.vertexBounds = 1;
    for (const { line: t2, start: e5, pathLength: i6 } of l8) {
      c6.initialDistance = e5 % S3, u5.pathLength = i6, this._lineLength = 0;
      for (let e6 = 1; e6 < t2.length; e6++) {
        const i7 = t2[e6].x - t2[e6 - 1].x, s7 = t2[e6].y - t2[e6 - 1].y;
        this._lineLength += Math.sqrt(i7 * i7 + s7 * s7);
      }
      this._lineTessellator.tessellate(t2, c6, m3);
    }
  }
  _writeTesselatedVertex(t2, e5, i6, s7, r7, n4, o7, a8, h4, m3, l8, u5) {
    const { out: c6, id: d5, vertexBounds: p3, pathLength: f5 } = this._currentWrite;
    return this.hasEffects && c6.recordBounds(t2, e5, p3, p3), this._tessParams.extrusionOffsetX = o7, this._tessParams.extrusionOffsetY = a8, this._tessParams.normalX = h4, this._tessParams.normalY = m3, this._tessParams.directionX = r7, this._tessParams.directionY = n4, this._tessParams.distance = l8, this._tessParams.pathLength = f5, this._tessParams.lineLength = u5, this._writeVertex(c6, d5, t2, e5, this._tessParams), this._currentWrite.vertexFrom + this._currentWrite.vertexCount++;
  }
  _writeTriangle(t2, e5, i6) {
    const { out: s7 } = this._currentWrite;
    s7.indexEnsureSize(3), s7.indexWrite(t2), s7.indexWrite(e5), s7.indexWrite(i6), this._currentWrite.indexCount += 3;
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/shaderGraph/techniques/labels/LabelMeshWriter.js
var S4 = 1;
var z2 = 0;
var j3 = 128;
function A2(e5, t2) {
  return l(`${e5}${t2}`);
}
function D(e5, t2, r7) {
  return l(`${e5}${t2}${r7}`);
}
function G2(e5, t2, r7, s7) {
  return l(`${e5}${t2}${r7 * 2 ** (P - s7)}`);
}
function Z(e5, t2, r7, s7, o7) {
  return l(`${e5}${o7}${t2}${r7 * 2 ** (P - s7)}`);
}
var k2 = e(((e5) => {
  let t2 = 0;
  if (0 === e5) return 1 / 0;
  for (; !(e5 % 2); ) t2++, e5 /= 2;
  return t2;
}));
var F2 = class extends A {
  constructor() {
    super(...arguments), this._zoomLevel = 0;
  }
  _write(e5, t2, i6, r7) {
    if (this._zoomLevel = r7 || 0, null != i6) throw new Error("InternalError: EffectGeometry not support for LabelMeshWriter");
    switch (t2.geometryType) {
      case "esriGeometryPoint": {
        const i7 = t2.readXForDisplay(), r8 = t2.readYForDisplay();
        this._writePoint(e5, i7, r8, 0, t2);
        break;
      }
      case "esriGeometryEnvelope":
      case "esriGeometryPolygon": {
        const i7 = t2.readCentroidForDisplay();
        if (!i7) return;
        const [r8, s7] = i7.coords;
        this._writePoint(e5, r8, s7, 0, t2);
        break;
      }
      case "esriGeometryMultipoint": {
        let i7 = 0;
        const r8 = a3.fromFeatureSetReader(t2);
        if (r8?.nextPath()) for (; r8.nextPoint(); ) this._writePoint(e5, r8.x, r8.y, i7++, t2);
        break;
      }
      case "esriGeometryPolyline":
        this._writeLines(e5, t2);
    }
  }
  _getMetricDir() {
    const { horizontalAlignment: e5, verticalAlignment: t2 } = this.evaluatedMeshParams;
    return ["center" === e5 ? 0 : "right" === e5 ? -1 : 1, "middle" === t2 ? 0 : "bottom" === t2 ? -1 : 1];
  }
  _createLineLabelMetric(e5, t2, i6, r7, s7, o7) {
    const [n4, a8] = this._getMetricDir(), l8 = this.evaluatedMeshParams.scaleInfo?.maxScale ?? 0, h4 = this.evaluatedMeshParams.scaleInfo?.minScale ?? 0, c6 = this.evaluatedMeshParams.labelClassId;
    return new a7(e5, c6, t2, i6, r7, s7, n4, a8, l8, h4, o7);
  }
  _writePoint(e5, t2, i6, r7, s7) {
    if (t2 < 0 || t2 > a2 || i6 < 0 || i6 > a2) return;
    const o7 = this._getShaping();
    if (!o7) return;
    const n4 = s7.getDisplayId(), a8 = this.evaluatedMeshParams.labelClassId, l8 = A2(s7.getObjectId(), r7), h4 = D(s7.getObjectId(), a8, r7), [c6, m3] = this._getMetricDir(), u5 = this.evaluatedMeshParams.scaleInfo?.maxScale ?? 0, d5 = this.evaluatedMeshParams.scaleInfo?.minScale ?? 0, f5 = this._getPointReferenceBounds() || { offsetX: 0, offsetY: 0, size: 0 };
    e5.metricStart(new a7(n4, a8, l8, h4, t2, i6, c6, m3, u5, d5, f5)), this._writeGlyphs(e5, n4, t2, i6, o7, 0, f5, void 0, false), e5.metricBoxWrite(o7.boundsT), e5.metricEnd();
  }
  _getPointReferenceBounds() {
    if (!this._references) return null;
    for (const e5 of this._references) {
      const t2 = e5.getBoundsInfo();
      if (t2) return t2;
    }
    return null;
  }
  _writeLines(e5, t2) {
    const { scaleInfo: i6, verticalAlignment: r7 } = this.evaluatedMeshParams, s7 = this.evaluatedMeshParams.repeatLabelDistance || 128, o7 = this._getShaping("middle");
    if (!o7) return;
    const n4 = (e6, t3, i7, r8) => this._placeSubdivGlyphs(e6, t3, i7, r8), a8 = (o7.bounds.width + s7) / (1 << S4);
    this._current = { out: e5, id: t2.getDisplayId(), objId: t2.getObjectId(), shaping: o7, zoomRange: m(i6, this.getTileInfo()), referenceBounds: this._getPointReferenceBounds() || { offsetX: 0, offsetY: 0, size: 0 }, offsetDirection: null, pathIndex: 0 }, this._verticalPlacement = "bottom" === r7 ? "above" : "top" === r7 ? "below" : null, this._verticalPlacement ? this._writeAboveAndBelowAlong(t2, n4, a8) : this._writeCenterAlong(t2, n4, a8);
  }
  _writeAboveAndBelowAlong(e5, t2, i6) {
    const { repeatLabel: r7 } = this.evaluatedMeshParams, { shaping: s7 } = this._current, o7 = s7.bounds.halfHeight, n4 = e5.readGeometryForDisplay();
    if (!n4) return;
    const a8 = new e2();
    dt(a8, n4, false, false, "esriGeometryPolyline", 1);
    const l8 = C3(new e2(), a8, o7), h4 = C3(new e2(), a8, -o7), c6 = lt(h4, "esriGeometryPolyline", false, false), m3 = lt(l8, "esriGeometryPolyline", false, false), u5 = l3(m3.paths, s7.bounds.width), d5 = l3(c6.paths, s7.bounds.width);
    this._current.offsetDirection = "above";
    for (let f5 = 0; f5 < u5.length; f5++) this._current.pathIndex = f5, c(u5[f5], i6, t2, !!r7);
    this._current.offsetDirection = "below";
    for (let f5 = 0; f5 < d5.length; f5++) this._current.pathIndex = f5, c(d5[f5], i6, t2, !!r7);
  }
  _writeCenterAlong(e5, t2, i6) {
    const { repeatLabel: r7 } = this.evaluatedMeshParams, { shaping: s7 } = this._current, o7 = l3(e5.readLegacyGeometryForDisplay().paths, s7.bounds.width);
    for (let n4 = 0; n4 < o7.length; n4++) this._current.pathIndex = n4, c(o7[n4], i6, t2, !!r7);
  }
  _placeSubdivGlyphs(e5, t2, i6, r7) {
    const { allowOverrun: s7, labelPosition: o7, repeatLabelDistance: n4 } = this.evaluatedMeshParams, a8 = this._current.zoomRange[0], l8 = k2(t2), h4 = this._current.shaping.bounds.width / (1 << S4), c6 = Math.sqrt(n4 || j3) / (1 << S4), m3 = Math.min(i6, r7 - i6), u5 = this._current.shaping.isMultiline ? P : Math.log2(m3 / (c6 + h4 / 2)), d5 = 0 === t2 ? u5 : Math.min(l8, u5), f5 = Math.max(a8, this._zoomLevel + S4 - d5), g2 = this._zoomLevel - f5, _3 = this._current.shaping.bounds.width / 2 * 2 ** g2, p3 = G2(this._current.objId, this._current.pathIndex, t2, this._zoomLevel), b2 = Z(this._current.objId, this._current.pathIndex, t2, this._zoomLevel, this.evaluatedMeshParams.labelClassId);
    this._current.shaping.isMultiline ? 0 === t2 && this._placeStraight(e5, f5, p3, b2) : s7 && g2 < 0 ? this._placeStraightAlong(e5, a8, p3, b2) : "parallel" === o7 ? this._placeStraightAlong(e5, f5, p3, b2) : "curved" === o7 && this._placeCurved(e5, f5, _3, p3, b2);
  }
  _placeStraight(e5, t2, i6, r7) {
    const { out: s7, id: o7, shaping: n4, referenceBounds: a8 } = this._current, { x: l8, y: h4 } = e5;
    s7.metricStart(this._createLineLabelMetric(o7, i6, r7, l8, h4)), s7.metricBoxWrite(n4.boundsT);
    const c6 = e5.angle * (180 / Math.PI) % 360, m3 = (e5.angle * (180 / Math.PI) + 180) % 360, u5 = { clipAngle: c6, mapAligned: true, isLineLabel: true, minZoom: t2 };
    this._writeGlyphs(s7, o7, l8, h4, n4, 0, a8, u5, false);
    const d5 = { clipAngle: m3, mapAligned: true, isLineLabel: true, minZoom: t2 };
    this._writeGlyphs(s7, o7, l8, h4, n4, 0, a8, d5, false), s7.metricEnd();
  }
  _placeCurved(e5, t2, i6, r7, s7) {
    const { out: o7, id: n4 } = this._current;
    o7.metricStart(this._createLineLabelMetric(n4, r7, s7, e5.x, e5.y));
    const a8 = e5.clone(), l8 = e5.angle * (180 / Math.PI) % 360, h4 = (e5.angle * (180 / Math.PI) + 180) % 360;
    this._verticalPlacement && this._verticalPlacement !== this._current.offsetDirection || (this._placeFirst(a8, t2, 1, l8), this._placeBack(e5, a8, t2, i6, 1, l8), this._placeForward(e5, a8, t2, i6, 1, l8)), this._verticalPlacement && this._verticalPlacement === this._current.offsetDirection || (this._placeFirst(a8, t2, 0, h4), this._placeBack(e5, a8, t2, i6, 0, h4), this._placeForward(e5, a8, t2, i6, 0, h4)), o7.metricEnd();
  }
  _placeStraightAlong(e5, i6, n4, a8) {
    const { out: l8, id: h4, shaping: c6, zoomRange: m3, referenceBounds: d5 } = this._current, { boxBorderLineColor: f5, boxBackgroundColor: g2 } = this.evaluatedMeshParams, _3 = e5.clone(), p3 = e5.angle * (180 / Math.PI) % 360, b2 = (e5.angle * (180 / Math.PI) + 180) % 360, x2 = c6.glyphs.length > 0 && !(!f5 && !g2);
    if (l8.metricStart(this._createLineLabelMetric(h4, n4, a8, e5.x, e5.y)), x2) {
      const n5 = Math.max(i6, m3[0], 0), a9 = Math.min(P, m3[1]), f6 = M(n2(), -e5.angle), g3 = { minZoom: n5, maxZoom: a9, clipAngle: p3, mapAligned: true, isLineLabel: true }, _4 = u(this.evaluatedMeshParams.offsetX), x3 = u(this.evaluatedMeshParams.offsetY);
      if (!this._verticalPlacement || this._verticalPlacement === this._current.offsetDirection) {
        const t2 = r2(_4, -1 * x3), [i7, r7] = c6.shapeBackground(i2(n2(), f6, t2));
        l8.recordStart(this.instanceId, this.attributeLayout, c6.glyphs[0].textureBinding), this._writeTextBox(l8, h4, e5.x, e5.y, r7, d5, g3), l8.recordEnd();
      }
      if (!this._verticalPlacement || this._verticalPlacement !== this._current.offsetDirection) {
        const t2 = r2(_4, x3), [i7, r7] = c6.shapeBackground(i2(n2(), f6, t2));
        g3.clipAngle = b2, l8.recordStart(this.instanceId, this.attributeLayout, c6.glyphs[0].textureBinding), this._writeTextBox(l8, h4, e5.x, e5.y, r7, d5, g3), l8.recordEnd();
      }
    }
    this._verticalPlacement && this._verticalPlacement !== this._current.offsetDirection || this._placeFirst(_3, i6, 1, p3, true), this._verticalPlacement && this._verticalPlacement === this._current.offsetDirection || this._placeFirst(_3, i6, 0, b2, true), l8.metricEnd();
  }
  _placeBack(e5, t2, i6, r7, s7, o7) {
    const n4 = e5.clone();
    let a8 = e5.backwardLength + z2;
    for (; n4.prev() && !(a8 >= r7); ) this._placeOnSegment(n4, t2, a8, i6, -1, s7, o7), a8 += n4.length + z2;
  }
  _placeForward(e5, t2, i6, r7, s7, o7) {
    const n4 = e5.clone();
    let a8 = e5.remainingLength + z2;
    for (; n4.next() && !(a8 >= r7); ) this._placeOnSegment(n4, t2, a8, i6, 1, s7, o7), a8 += n4.length + z2;
  }
  _placeFirst(e5, i6, s7, a8, l8 = false) {
    const { out: h4, id: c6, shaping: m3, zoomRange: d5, referenceBounds: f5 } = this._current, g2 = m3.glyphs, _3 = u(this.evaluatedMeshParams.offsetX), p3 = u(this.evaluatedMeshParams.offsetY), b2 = r2(_3, p3), x2 = M(n2(), -e5.angle);
    S(b2, b2, x2);
    for (const t2 of g2) {
      const r7 = t2.x > m3.bounds.x ? s7 : 1 - s7, o7 = r7 * e5.remainingLength + (1 - r7) * e5.backwardLength, n4 = Math.abs(t2.x + t2.width / 2 - m3.bounds.x), u5 = Math.max(0, this._zoomLevel + Math.log2(n4 / (o7 + z2))), g3 = Math.max(i6, l8 ? 0 : u5);
      if (t2.maxZoom = Math.min(d5[1], P), t2.angle = e5.angle + (1 - s7) * Math.PI, t2.minZoom = Math.max(d5[0], g3), this._writeLineGlyph(h4, c6, e5.x, e5.y, t2, a8, f5, true), (s7 || this._current.offsetDirection) && this._isVisible(t2.minZoom, t2.maxZoom)) {
        const e6 = new i3(t2.bounds.x + b2[0], t2.bounds.y + b2[1], t2.bounds.width, t2.bounds.height);
        h4.metricBoxWrite(e6);
      }
    }
  }
  _placeOnSegment(e5, i6, s7, a8, l8, h4, c6) {
    const { out: m3, id: d5, shaping: f5, referenceBounds: g2 } = this._current, _3 = f5.glyphs, p3 = e5.dx / e5.length, b2 = e5.dy / e5.length, x2 = { x: e5.x + s7 * -l8 * p3, y: e5.y + s7 * -l8 * b2 }, v4 = u(this.evaluatedMeshParams.offsetX), y4 = u(this.evaluatedMeshParams.offsetY), P3 = r2(v4, y4), w3 = M(n2(), -e5.angle);
    S(P3, P3, w3);
    for (const t2 of _3) {
      const i7 = t2.x > f5.bounds.x ? h4 : 1 - h4;
      if (!(i7 && 1 === l8 || !i7 && -1 === l8)) continue;
      const r7 = Math.abs(t2.x + t2.width / 2 - f5.bounds.x), o7 = Math.max(0, this._zoomLevel + Math.log2(r7 / s7) - 0.1), n4 = Math.max(a8, this._zoomLevel + Math.log2(r7 / (s7 + e5.length + z2)));
      if (0 !== o7 && (t2.angle = e5.angle + (1 - h4) * Math.PI, t2.minZoom = n4, t2.maxZoom = o7, this._writeLineGlyph(m3, d5, x2.x, x2.y, t2, c6, g2, true), (h4 || this._current.offsetDirection) && this._isVisible(t2.minZoom, t2.maxZoom))) {
        const e6 = new i3(t2.bounds.x + P3[0], t2.bounds.y + P3[1], t2.bounds.width, t2.bounds.height);
        m3.metricBoxWrite(e6);
      }
    }
  }
  _writeLineGlyph(e5, t2, i6, r7, s7, o7, n4, a8) {
    if (i6 < 0 || i6 > a2 || r7 < 0 || r7 > a2) return;
    e5.recordStart(this.instanceId, this.attributeLayout, s7.textureBinding);
    const { texcoords: l8, offsets: h4 } = s7, { fontSize: c6, haloSize: m3, outlineSize: u5 } = this._textMeshTransformProps;
    this._writeQuad(e5, t2, i6, r7, { texcoords: l8, offsets: h4, fontSize: c6, haloSize: m3, outlineSize: u5, color: g(this.evaluatedMeshParams.color), isBackground: false, referenceBounds: n4, minZoom: Math.max(this._current.zoomRange[0], s7.minZoom), maxZoom: Math.min(this._current.zoomRange[1], s7.maxZoom), clipAngle: o7, mapAligned: a8, isLineLabel: true }), e5.recordEnd();
  }
  _packedZoom(e5) {
    return Math.floor(e5 * si) / si;
  }
  _isVisible(e5, t2) {
    let i6 = Math.max(this._current.zoomRange[0], e5), r7 = Math.min(this._current.zoomRange[1], t2);
    i6 = this._packedZoom(i6), r7 = this._packedZoom(r7);
    const s7 = this._packedZoom(this._zoomLevel);
    return i6 <= s7 && s7 <= r7;
  }
};
function C3(e5, t2, i6) {
  const { coords: r7, lengths: s7 } = t2, o7 = n(), n4 = n(), u5 = n(), f5 = n(), g2 = n(), _3 = n(), p3 = 2;
  let b2 = 0;
  for (let d5 = 0; d5 < s7.length; d5++) {
    const t3 = s7[d5];
    for (let s8 = 0; s8 < t3; s8++) {
      const d6 = p3 * (s8 + b2 - 1), x2 = p3 * (s8 + b2), M2 = p3 * (s8 + b2 + 1);
      s8 > 0 ? o(o7, r7[d6], r7[d6 + 1]) : o(o7, 0, 0), o(n4, r7[x2], r7[x2 + 1]), s8 < t3 - 1 ? o(u5, r7[M2], r7[M2 + 1]) : o(u5, 0, 0), 0 === s8 ? o(f5, 0, 0) : (B(f5, n4, o7), v(f5, f5), o(f5, f5[1], -f5[0])), s8 === t3 - 1 ? o(g2, 0, 0) : (B(g2, u5, n4), v(g2, g2), o(g2, g2[1], -g2[0])), u2(_3, f5, g2), v(_3, _3);
      const v4 = _3[0] * g2[0] + _3[1] * g2[1];
      0 !== v4 && l2(_3, _3, v4), l2(_3, _3, i6), e5.coords.push(n4[0] + _3[0], n4[1] + _3[1]);
    }
    e5.lengths.push(t3), b2 += t3;
  }
  return e5;
}

// node_modules/@arcgis/core/views/2d/layers/features/support/DictionaryValue.js
var r6 = class extends s5 {
  constructor(e5) {
    super(), this._value = e5;
  }
  resize(e5) {
  }
  read(e5, r7) {
    return this._value;
  }
  readWithDefault(e5, r7, t2) {
    return this._value;
  }
  hasArcadeDependency(e5) {
    return false;
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/shaderGraph/techniques/mesh/MeshWriterInputEvaluator.js
var y2 = () => i.getLogger("esri.views.2d.engine.webgl.shaderGraph.techniques.mesh.MeshWriterInputEvaluator");
async function h3(e5, r7, t2, s7) {
  const { defaultValue: o7, valueExpressionInfo: a8, value: i6 } = r7;
  if (a8) {
    if ("dictionary-template" === a8.type) return { ...r7, computed: e5.createDictionaryTemplateField(a8, t2), defaultValue: o7 };
    const { expression: i7 } = a8, n4 = await e5.createComputedField({ expression: i7 }, s7);
    return n4 ? { ...r7, computed: n4, defaultValue: o7 } : null;
  }
  return { ...r7, computed: new r6(i6), defaultValue: o7 };
}
async function v3(e5, r7, t2) {
  const { valueExpressionInfo: s7 } = r7, o7 = "dictionary-template" === s7.type ? e5.createDictionaryTemplateField(s7, t2) : await e5.createComputedField({ expression: s7.expression });
  return o7 ? { ...r7, computed: o7 } : null;
}
function P2(e5) {
  return "object" == typeof e5 && null != e5 && (!(!("valueExpressionInfo" in e5) || !e5.valueExpressionInfo) || "type" in e5 && "Process" === e5.type && "op" in e5 && "Random" === e5.op);
}
function _2(e5) {
  if (Array.isArray(e5)) {
    for (const r7 of e5) if (_2(r7)) return true;
  }
  if ("object" == typeof e5) {
    if (P2(e5)) return true;
    for (const r7 in e5) {
      if (_2(e5[r7])) return true;
    }
  }
  return false;
}
var I2 = class _I {
  static async create(r7, t2, s7, o7) {
    const a8 = {}, i6 = /* @__PURE__ */ new Map(), m3 = /* @__PURE__ */ new Map(), f5 = /* @__PURE__ */ new Map(), l8 = /* @__PURE__ */ new Map(), d5 = /* @__PURE__ */ new Map(), u5 = /* @__PURE__ */ new Map();
    for (const y4 in s7) {
      const I3 = s7[y4];
      if (null != I3 && "object" == typeof I3) if (Array.isArray(I3)) {
        if ("object" == typeof I3[0]) throw new Error(`InternalError: Cannot handle ${y4}. Nested array params are not supported`);
        a8[y4] = I3;
      } else if ("valueExpressionInfo" in I3) {
        if (I3.value) {
          a8[y4] = I3.value;
          continue;
        }
        const e5 = await v3(r7, I3, o7);
        if (!e5) {
          a8[y4] = I3.defaultValue;
          continue;
        }
        i6.set(y4, e5), a8[y4] = null;
      } else switch (I3.type) {
        case "cim-effect-infos":
          if (I3.effectInfos.some(((e5) => e5.overrides.length))) {
            m3.set(y4, { effects: await Promise.all(I3.effectInfos.map((async (t3) => {
              const s8 = t3.overrides.map(((e5) => h3(r7, e5, o7, false)));
              return { effect: t3.effect, compiledOverrides: (await Promise.all(s8)).filter(L) };
            }))) });
            break;
          }
          a8[y4] = I3.effectInfos.map(((e5) => e5.effect));
          break;
        case "cim-marker-placement-param":
          I3.overrides.length && f5.set(y4, { placementInfo: I3, compiledOverrides: (await Promise.all(I3.overrides.map(((e5) => h3(r7, e5, o7, false))))).filter(L) }), a8[y4] = I3.placement;
          break;
        case "text-rasterization-param": {
          if (I3.overrides.length) {
            const t3 = I3.overrides.map(((e5) => h3(r7, e5, o7, I3.useLegacyLabelEvaluationRules ?? false)));
            l8.set(y4, { compiledOverrides: (await Promise.all(t3)).filter(L), rasterizationParam: I3, objectIdToResourceId: /* @__PURE__ */ new Map() });
            continue;
          }
          const s8 = { type: "cim-rasterization-info", resource: I3.resource };
          a8[y4] = await t2.fetchResourceImmediate(s8) ?? null;
          break;
        }
        case "sprite-rasterization-param": {
          if (I3.overrides.length) {
            const t3 = I3.overrides.map(((e5) => h3(r7, e5, o7, false)));
            l8.set(y4, { compiledOverrides: (await Promise.all(t3)).filter(L), rasterizationParam: I3, objectIdToResourceId: /* @__PURE__ */ new Map() });
            continue;
          }
          if ("animated" === I3.resource.type) {
            l8.set(y4, { compiledOverrides: [], rasterizationParam: I3, objectIdToResourceId: /* @__PURE__ */ new Map() });
            continue;
          }
          const s8 = { type: "cim-rasterization-info", resource: I3.resource };
          a8[y4] = await t2.fetchResourceImmediate(s8) ?? null;
          break;
        }
        case "cim-marker-transform-param": {
          const { params: e5 } = I3;
          if (_2(e5)) {
            const t3 = { compiledMarkerInfos: [] };
            await Promise.all(e5.map((async (e6) => {
              const s8 = { props: {} };
              for (const t4 in e6) if (P2(e6[t4])) {
                const a9 = await v3(r7, e6[t4], o7);
                s8.compiledExpressionMap || (s8.compiledExpressionMap = /* @__PURE__ */ new Map());
                const i7 = s8.compiledExpressionMap;
                a9 && i7.set(t4, a9);
              } else s8.props[t4] = e6[t4];
              t3.compiledMarkerInfos.push(s8);
            }))), d5.set(y4, t3);
          } else a8[y4] = { type: "cim-marker-transform-info", infos: e5 };
          break;
        }
        case "animation-params": {
          const { params: e5 } = I3, s8 = r4(e5);
          if (_2(s8)) {
            const e6 = await Promise.all(s8.map(((e7) => c2(e7, r7))));
            u5.set(y4, { params: e6, propertyIdToResourceId: /* @__PURE__ */ new Map(), key: y4 });
          } else {
            const e6 = s2(s8), r8 = await t2.fetchResourceImmediate({ type: "animation-info", resource: e6 });
            null != r8 && "sprite" === r8.type && (a8[y4] = { dataRow: r8.rect.y, dataColumn: r8.rect.x });
          }
          break;
        }
        default:
          a8[y4] = I3;
      }
      else a8[y4] = I3;
    }
    return new _I(s7, a8, i6, m3, f5, l8, d5, u5);
  }
  constructor(e5, r7, t2, s7, a8, i6, n4, c6) {
    this.inputMeshParams = e5, this._resolvedMeshParams = r7, this._dynamicProperties = t2, this._dynamicEffectProperties = s7, this._dynamicPlacementProperties = a8, this._dynamicAsyncProperties = i6, this._dynamicTransformProperties = n4, this._dynamicAsyncAnimations = c6, this.evaluator = (e6) => e6, this._arcadeDependencies = /* @__PURE__ */ new Set();
    for (const p3 of this._expressions()) d(this._arcadeDependencies, p3);
  }
  get hasDynamicProperties() {
    return !!(this._dynamicProperties.size || this._dynamicAsyncProperties.size || this._dynamicEffectProperties.size || this._dynamicTransformProperties.size || this._dynamicPlacementProperties.size || this._dynamicAsyncAnimations.size);
  }
  get evaluatedMeshParams() {
    return this._evaluatedMeshParams || (this._evaluatedMeshParams = this.evaluator(this._resolvedMeshParams)), this._evaluatedMeshParams;
  }
  enqueueRequest(e5, s7, o7) {
    for (const i6 of this._dynamicAsyncProperties.values()) {
      const c6 = a(i6.rasterizationParam.resource);
      "animated" === i6.rasterizationParam.resource.type && i6.rasterizationParam.resource.randomizeStartTime && (c6.primitiveName = "__RESERVED__PRIMITIVE__NAME__", c6.startGroup = o4(s7.getObjectId() || 0));
      for (const { primitiveName: e6, propertyName: t2, computed: a8, defaultValue: m3, valueExpressionInfo: f5 } of i6.compiledOverrides) try {
        const r7 = "animated" === i6.rasterizationParam.resource.type ? c6.primitiveName : e6;
        r3(c6, r7, t2, a8, s7, o7, m3);
      } catch (n4) {
        y2().errorOnce(new s("invalid-arcade-expression", "Encountered an error when evaluating the arcade expression", { error: n4, valueExpressionInfo: f5 }));
      }
      const p3 = e5.enqueueRequest({ type: "cim-rasterization-info", resource: c6 });
      i6.objectIdToResourceId.set(s7.getObjectId(), p3);
    }
    for (const r7 of this._dynamicAsyncAnimations.values()) {
      const t2 = r7.params.map(((e6) => l4(e6, s7, o7))).map(n3).map(((e6) => e6.simplify())), a8 = a4(t2), n4 = e5.enqueueRequest({ type: "animation-info", resource: a8 });
      r7.propertyIdToResourceId.set(s7.getObjectId() + "." + r7.key, n4);
    }
  }
  evaluateMeshParams(e5, r7, t2) {
    for (const [s7, o7] of this._dynamicProperties.entries()) this._resolvedMeshParams[s7] = o7.computed.readWithDefault(r7, t2, o7.defaultValue);
    for (const [s7, o7] of this._dynamicPlacementProperties.entries()) for (const { computed: e6, defaultValue: a8, propertyName: i6 } of o7.compiledOverrides) {
      const n4 = e6.readWithDefault(r7, t2, a8);
      o7.placementInfo.placement[i6] = n4, this._resolvedMeshParams[s7] = o7.placementInfo.placement;
    }
    for (const [s7, o7] of this._dynamicEffectProperties.entries()) for (const e6 of o7.effects) {
      for (const { computed: s8, defaultValue: o8, propertyName: a8 } of e6.compiledOverrides) {
        const i6 = s8.readWithDefault(r7, t2, o8);
        e6.effect[a8] = i6;
      }
      this._resolvedMeshParams[s7] = o7.effects.map(((e7) => e7.effect));
    }
    for (const [s7, o7] of this._dynamicTransformProperties.entries()) {
      const e6 = { type: "cim-marker-transform-info", infos: [] };
      for (const s8 of o7.compiledMarkerInfos) {
        const o8 = { ...s8.props };
        if (s8.compiledExpressionMap) for (const [e7, a8] of s8.compiledExpressionMap) {
          const s9 = a8.computed.readWithDefault(r7, t2, a8.defaultValue);
          o8[e7] = "number" == typeof s9 || "boolean" == typeof s9 ? s9 : a8.defaultValue;
        }
        e6.infos.push(o8);
      }
      this._resolvedMeshParams[s7] = e6;
    }
    for (const [s7, o7] of this._dynamicAsyncProperties.entries()) {
      const t3 = o7.objectIdToResourceId.get(r7.getObjectId());
      if (null == t3) continue;
      const a8 = e5.getResource(t3);
      this._resolvedMeshParams[s7] = a8;
    }
    for (const [s7, o7] of this._dynamicAsyncAnimations.entries()) {
      const t3 = o7.propertyIdToResourceId.get(r7.getObjectId() + "." + s7);
      if (null == t3) continue;
      const a8 = e5.getResource(t3);
      this._resolvedMeshParams[s7] = { dataRow: a8.rect.y, dataColumn: a8.rect.x };
    }
    return this._evaluatedMeshParams = this.evaluator(this._resolvedMeshParams), this.evaluatedMeshParams;
  }
  hasArcadeDependency(e5) {
    return this._arcadeDependencies.has(e5);
  }
  *_expressions() {
    for (const e5 of this._dynamicProperties.values()) yield e5.computed;
    for (const e5 of this._dynamicEffectProperties.values()) for (const r7 of e5.effects) for (const e6 of r7.compiledOverrides) yield e6.computed;
    for (const e5 of this._dynamicPlacementProperties.values()) for (const r7 of e5.compiledOverrides) yield r7.computed;
    for (const e5 of this._dynamicAsyncProperties.values()) for (const r7 of e5.compiledOverrides) yield r7.computed;
    for (const e5 of this._dynamicTransformProperties.values()) for (const r7 of e5.compiledMarkerInfos) if (null != r7.compiledExpressionMap) for (const e6 of r7.compiledExpressionMap.values()) yield e6.computed;
    for (const e5 of this._dynamicAsyncAnimations.values()) for (const r7 of e5.params) yield* f(r7);
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/shaderGraph/techniques/mesh/MeshWriterRegistry.js
var y3 = class {
  async createMeshWriter(e5, r7, t2, i6, s7) {
    const a8 = this._getMeshWriter(i6.techniqueType), n4 = await I2.create(e5, r7, i6.inputParams, s7), l8 = new a8(i6.id, n4, i6.optionalAttributes, t2);
    return await l8.loadDependencies(), l8;
  }
  _getMeshWriter(F3) {
    switch (F3) {
      case e3.Fill:
        return c5;
      case e3.DotDensity:
        return s4;
      case e3.ComplexFill:
        return h2;
      case e3.PatternFill:
        return o5;
      case e3.GradientFill:
        return u4;
      case e3.OutlineFill:
        return f3;
      case e3.PatternOutlineFill:
        return o6;
      case e3.ComplexOutlineFill:
        return f4;
      case e3.Marker:
        return E;
      case e3.PieChart:
        return s6;
      case e3.Text:
        return A;
      case e3.Line:
        return T2;
      case e3.TexturedLine:
        return l7;
      case e3.GradientStroke:
        return l6;
      case e3.Heatmap:
        return i4;
      case e3.Label:
        return F2;
      case e3.AnimatedMarker:
        return C;
      case e3.AnimatedMarkerShift:
        return I;
      case e3.AnimatedFill:
        return j2;
      case e3.AnimatedLine:
        return T3;
      default:
        throw new Error("Internal Error: Mesh writer not in the registry");
    }
  }
};

export {
  r6 as r,
  y3 as y
};
//# sourceMappingURL=chunk-DZ2XVKBF.js.map
