import {
  t
} from "./chunk-MX6BY66A.js";
import {
  Xe
} from "./chunk-C5CBDIA7.js";
import "./chunk-AZEP7CSW.js";
import "./chunk-OWKLTNBY.js";
import "./chunk-QTUVUQOQ.js";
import "./chunk-JXBJIDCW.js";
import "./chunk-RAGXHCS7.js";
import "./chunk-PJNFSNDQ.js";
import "./chunk-5SFHR6UX.js";
import "./chunk-6MTOD3IG.js";
import "./chunk-37SJUCLT.js";
import "./chunk-IRVDJYGL.js";
import "./chunk-6CJTWEUR.js";
import "./chunk-5ZJG2W6X.js";
import "./chunk-UVVPMLPB.js";
import "./chunk-EYECC3PG.js";
import "./chunk-LUPQ25XG.js";
import "./chunk-DJRZXLB2.js";
import "./chunk-L6GG77AZ.js";
import "./chunk-XOKYRVJ5.js";
import "./chunk-GBOUNRWE.js";
import "./chunk-OLNO472C.js";
import "./chunk-ROOICUH3.js";
import "./chunk-YWISQGMO.js";
import "./chunk-EU5HNJUP.js";
import "./chunk-2WPJ2N7Z.js";
import "./chunk-YKZMZKSQ.js";
import "./chunk-4MVMXF4W.js";
import "./chunk-RY6GJKN7.js";
import "./chunk-EZYDA2X4.js";
import "./chunk-XOTDRYLO.js";
import "./chunk-QHD5R6KE.js";
import "./chunk-XOOEFPJ4.js";
import "./chunk-PTLGJ4Y6.js";
import "./chunk-TSUTFMFQ.js";
import "./chunk-YIVJSMJO.js";
import "./chunk-UICDKBDP.js";
import {
  h,
  i as i2,
  r
} from "./chunk-AUHP32YH.js";
import "./chunk-AY3JR4QM.js";
import "./chunk-UXVQ5YGS.js";
import "./chunk-A2AZM62Y.js";
import "./chunk-ZT7UIVVR.js";
import "./chunk-FV6ZNHFI.js";
import "./chunk-BZSAIP56.js";
import "./chunk-QMLCJTBC.js";
import "./chunk-CEHNSC4S.js";
import "./chunk-GYJ4UTXD.js";
import "./chunk-BMKLG7HR.js";
import "./chunk-SCZN6GUJ.js";
import "./chunk-OUFI3E5Y.js";
import "./chunk-QOICX6SF.js";
import "./chunk-LUNNU672.js";
import "./chunk-FFY3IMAS.js";
import "./chunk-DJ5QZHL6.js";
import "./chunk-IR6JOM7Y.js";
import {
  g
} from "./chunk-YR234R2O.js";
import "./chunk-FI3Y4ZNX.js";
import "./chunk-M6LH7ANK.js";
import "./chunk-FTX3VFJX.js";
import "./chunk-COXNSOYZ.js";
import "./chunk-PHSQVJNW.js";
import "./chunk-KFNWBWN4.js";
import "./chunk-K5CV62SX.js";
import "./chunk-S7GLMIAQ.js";
import "./chunk-SUYBRL4O.js";
import "./chunk-EMULKSUV.js";
import "./chunk-2CDQ56FJ.js";
import "./chunk-3YHKSRHV.js";
import "./chunk-ZBTRSUIE.js";
import "./chunk-D6GGPM6D.js";
import "./chunk-U2JVYDTA.js";
import "./chunk-HH4Q2NN5.js";
import "./chunk-3CFYBBSV.js";
import "./chunk-AACFCXAP.js";
import {
  d
} from "./chunk-VCKINPGN.js";
import "./chunk-SDCRJECE.js";
import "./chunk-4G42CJX6.js";
import "./chunk-NEI5HAVK.js";
import "./chunk-D7G7U7XX.js";
import "./chunk-2CS746FZ.js";
import "./chunk-UET4BL4J.js";
import "./chunk-YMT7TAQQ.js";
import "./chunk-RZGBA4KS.js";
import "./chunk-FSYN2HHU.js";
import "./chunk-7I4TWCTW.js";
import "./chunk-SCMB64VM.js";
import "./chunk-MBJ7YPSH.js";
import "./chunk-D34PNYRG.js";
import "./chunk-APMQAZ5Z.js";
import "./chunk-LNLFY27J.js";
import "./chunk-P4O4YCLI.js";
import "./chunk-MSSQA3XK.js";
import "./chunk-R7YP6EQJ.js";
import "./chunk-3GQTEESV.js";
import "./chunk-RYQ7D3GL.js";
import "./chunk-HOVLU5XA.js";
import "./chunk-EWP4DLQF.js";
import "./chunk-CHGKJUJ3.js";
import "./chunk-3YBQQHIP.js";
import "./chunk-OJQCHQYS.js";
import "./chunk-N3W3EVP3.js";
import "./chunk-5BYUGSWZ.js";
import "./chunk-SIRTOV2N.js";
import "./chunk-ORRXYRSR.js";
import "./chunk-OFINLTIW.js";
import "./chunk-Y3I5OGQC.js";
import "./chunk-K55CXVYD.js";
import "./chunk-M4XVX74D.js";
import "./chunk-UZ3YWBWC.js";
import "./chunk-2EOHKZLO.js";
import "./chunk-3M6ALZOH.js";
import "./chunk-QPV4BKBC.js";
import "./chunk-LQQCPLIT.js";
import "./chunk-4O46EK5T.js";
import "./chunk-A7I2KMJU.js";
import "./chunk-BPI4BR4E.js";
import "./chunk-3L5JZOMH.js";
import "./chunk-N77BULFI.js";
import "./chunk-NEIJCC5O.js";
import "./chunk-UMUW6RKM.js";
import "./chunk-XRTNDGK2.js";
import "./chunk-A6R2FXH6.js";
import "./chunk-H6ZVHKNF.js";
import "./chunk-YAXW2DL6.js";
import {
  e2 as e
} from "./chunk-4KZLIAP7.js";
import "./chunk-62NATJWT.js";
import "./chunk-FOPBVVXE.js";
import "./chunk-INI6MHIQ.js";
import "./chunk-QUZZIDFR.js";
import "./chunk-CBCDVQSA.js";
import "./chunk-RKF6WUZT.js";
import "./chunk-RMRI4NYS.js";
import "./chunk-YYLIW24Q.js";
import "./chunk-B7BH33JH.js";
import "./chunk-BLBN3L5Q.js";
import "./chunk-XNUSHDFN.js";
import "./chunk-4AKMPOG7.js";
import "./chunk-2CJBZZN7.js";
import "./chunk-ZJQPHR3K.js";
import "./chunk-R4XAU2TW.js";
import "./chunk-YVMULGDJ.js";
import "./chunk-3LLHBKLI.js";
import "./chunk-74GULGYB.js";
import "./chunk-HYAO4PVV.js";
import "./chunk-SRNKPAJX.js";
import "./chunk-VNQUG2TO.js";
import "./chunk-MOMLPET6.js";
import "./chunk-3QHX4R4B.js";
import {
  C
} from "./chunk-ORMKIVR7.js";
import "./chunk-TOCH3L2K.js";
import "./chunk-EULNFFHG.js";
import "./chunk-SDIBXPSJ.js";
import "./chunk-CBXZL53X.js";
import "./chunk-LPCUYJ2B.js";
import "./chunk-SMO33YG7.js";
import "./chunk-LCBAL6ER.js";
import "./chunk-6JCZVSRM.js";
import "./chunk-LLGOMKTE.js";
import "./chunk-ZB6KRLRI.js";
import "./chunk-67AKDROO.js";
import "./chunk-CM3TIXEV.js";
import "./chunk-POWGZO3T.js";
import "./chunk-OUZJZB6I.js";
import "./chunk-NJZD7WM5.js";
import "./chunk-CL7VLXUR.js";
import "./chunk-FCX4ZA3Z.js";
import {
  m
} from "./chunk-2ZPU5IZX.js";
import "./chunk-S62CSPIH.js";
import "./chunk-X26VPODZ.js";
import "./chunk-XNYPRDKK.js";
import "./chunk-Y4BWIIWH.js";
import "./chunk-TTJIKWMC.js";
import "./chunk-CMEG2CKL.js";
import "./chunk-VHPBXBDE.js";
import "./chunk-6ACTD4UJ.js";
import "./chunk-5REYU5G2.js";
import "./chunk-JNYZ3I5R.js";
import "./chunk-N626Y23H.js";
import {
  a,
  i3 as i,
  s2 as s
} from "./chunk-TJPLHZCD.js";
import "./chunk-KLFJ5V5G.js";
import "./chunk-G26ADAPQ.js";

// node_modules/@arcgis/core/arcade.js
var y = null;
function f(e2, t2, a2, n = {}) {
  const o = t2.elementType, c = "value", s2 = "array" === o.type ? [{ name: c, type: o.type, elementType: o.elementType }] : "dictionary" === o.type ? [{ name: c, type: o.type, properties: o.properties }] : [{ name: c, type: o.type }];
  return new t(e2.map(((e3) => {
    const t3 = {};
    return g2(t3, s2, { [c]: e3 }, a2, n), t3[c];
  })));
}
function d2(e2, t2, r2 = {}) {
  const a2 = e2 instanceof g ? new Xe({ source: e2.features, geometryType: e2.geometryType, fields: e2.fields, spatialReference: e2.spatialReference }) : e2;
  return t2.constructFeatureSet(a2, r2.spatialReference, null, true, r2.lruCache, r2.interceptor);
}
function b(e2, t2, r2 = {}) {
  const { spatialReference: a2, interceptor: n, lruCache: o } = r2;
  return "string" == typeof e2 ? t2.createFeatureSetCollectionFromService(e2, a2, o, n) : t2.createFeatureSetCollectionFromMap(e2, a2, o, n);
}
function v(e2, t2, r2, a2 = {}) {
  const n = /* @__PURE__ */ Object.create(null);
  return g2(n, t2.properties, e2, r2, a2), new y.Dictionary(n);
}
function g2(e2, r2, a2, n, o = {}) {
  const c = {};
  for (const t2 of Object.keys(a2)) c[t2.toLowerCase()] = a2[t2];
  for (const p of r2) {
    const r3 = p.name.toLowerCase();
    if (o.variablesPreProcessed) e2[r3] = c[r3];
    else switch (p.type) {
      case "array": {
        const t2 = c[r3];
        e2[r3] = null == t2 ? null : f(t2, p, n, o);
        break;
      }
      case "feature": {
        const t2 = c[r3];
        e2[r3] = null == t2 ? null : y.Feature.createFromGraphic(t2, o?.timeZone);
        break;
      }
      case "featureSet": {
        const t2 = c[r3];
        e2[r3] = null == t2 ? null : n ? d2(t2, n, o) : null;
        break;
      }
      case "featureSetCollection": {
        const t2 = c[r3];
        e2[r3] = null == t2 ? null : n ? b(t2, n, o) : null;
        break;
      }
      case "dictionary": {
        const t2 = c[r3];
        e2[r3] = null == t2 ? null : v(t2, p, n, o);
        break;
      }
      case "date": {
        const a3 = c[r3];
        e2[r3] = a3 ? a3 instanceof h ? a3 : o?.timeZone ? h.dateJSAndZoneToArcadeDate(a3, o?.timeZone) : h.dateJSToArcadeDate(a3) : null;
        break;
      }
      case "dateOnly": {
        const t2 = c[r3];
        e2[r3] = t2 ? t2 instanceof i2 ? t2 : i2.fromReader(t2) : null;
        break;
      }
      case "time": {
        const t2 = c[r3];
        e2[r3] = t2 ? t2 instanceof r ? t2 : r.fromReader(t2) : null;
        break;
      }
      case "knowledgeGraph":
      case "geometry":
      case "boolean":
      case "text":
      case "number":
        e2[r3] = c[r3];
        break;
      case "voxel": {
        const t2 = c[r3];
        e2[r3] = null == t2 ? null : new y.Voxel(t2, o?.timeZone);
        break;
      }
    }
  }
}
function w(e2, t2) {
  for (const r2 of e2) t2.push(r2), "dictionary" === r2.type && w(r2.properties, t2);
  return t2;
}
function S(e2, t2, r2, a2, n) {
  const { spatialReference: o, interceptor: c, lruCache: s2, console: i3, abortSignal: p, timeZone: l, services: m2 = { portal: C.getDefault() } } = r2, y2 = { vars: {}, spatialReference: o, interceptor: c, timeZone: l, lrucache: s2, useAsync: n, services: m2, console: i3, abortSignal: p };
  return t2 ? (g2(y2.vars, e2.variables, t2, a2, r2), y2) : y2;
}
function h2(t2, r2) {
  switch (r2.getArcadeType(t2)) {
    case "number":
    case "text":
    case "boolean":
    case "point":
    case "polygon":
    case "polyline":
    case "multipoint":
    case "extent":
      return t2;
    case "date":
      return t2.toJSDate();
    case "time":
    case "dateOnly":
      return t2.toString();
    case "feature": {
      const r3 = (t2.type, t2), a2 = "geometry" in r3 ? r3.geometry() : null, n = "readAttributes" in r3 ? r3.readAttributes() : r3.attributes;
      return new d({ geometry: a2, attributes: n });
    }
    case "dictionary": {
      const e2 = t2, a2 = e2.attributes, n = {};
      for (const t3 of Object.keys(a2)) n[t3] = h2(e2.field(t3), r2);
      return n;
    }
    case "array":
      return ("toArray" in t2 ? t2.toArray() : t2).map(((e2) => h2(e2, r2)));
  }
  return t2;
}
var $ = { variables: [{ name: "$feature", type: "feature" }, { name: "$layer", type: "featureSet" }, { name: "$datastore", type: "featureSetCollection" }, { name: "$map", type: "featureSetCollection" }, { name: "$userInput", type: "geometry" }, { name: "$graph", type: "knowledgeGraph" }, { name: "$view", type: "dictionary", properties: [{ name: "scale", type: "number" }, { name: "timeProperties", type: "dictionary", properties: [{ name: "currentStart", type: "date" }, { name: "currentEnd", type: "date" }, { name: "startIncluded", type: "boolean" }, { name: "endIncluded", type: "boolean" }] }] }] };
var x = { variables: [{ name: "$feature", type: "feature" }, { name: "$aggregatedFeatures", type: "featureSet" }, { name: "$view", type: "dictionary", properties: [{ name: "scale", type: "number" }, { name: "timeProperties", type: "dictionary", properties: [{ name: "currentStart", type: "date" }, { name: "currentEnd", type: "date" }, { name: "startIncluded", type: "boolean" }, { name: "endIncluded", type: "boolean" }] }] }] };
var C2 = { variables: [{ name: "$voxel", type: "voxel" }] };
var j = /* @__PURE__ */ new Map([["aggregate-field", { variables: [{ name: "$feature", type: "feature" }] }], ["form-constraint", { variables: [{ name: "$feature", type: "feature" }] }], ["feature-z", { variables: [{ name: "$feature", type: "feature" }] }], ["field-calculation", { variables: [{ name: "$feature", type: "feature" }, { name: "$datastore", type: "featureSetCollection" }] }], ["form-calculation", { variables: [{ name: "$feature", type: "feature" }, { name: "$originalFeature", type: "feature" }, { name: "$layer", type: "featureSet" }, { name: "$featureSet", type: "featureSet" }, { name: "$datastore", type: "featureSetCollection" }, { name: "$map", type: "featureSetCollection" }, { name: "$editContext", type: "dictionary", properties: [{ name: "editType", type: "text" }] }] }], ["labeling", { variables: [{ name: "$feature", type: "feature" }, { name: "$view", type: "dictionary", properties: [{ name: "scale", type: "number" }, { name: "timeProperties", type: "dictionary", properties: [{ name: "currentStart", type: "date" }, { name: "currentEnd", type: "date" }, { name: "startIncluded", type: "boolean" }, { name: "endIncluded", type: "boolean" }] }] }] }], ["popup", $], ["popup-element", $], ["popup-feature-reduction", x], ["popup-element-feature-reduction", x], ["visualization", { variables: [{ name: "$feature", type: "feature" }, { name: "$view", type: "dictionary", properties: [{ name: "scale", type: "number" }, { name: "timeProperties", type: "dictionary", properties: [{ name: "currentStart", type: "date" }, { name: "currentEnd", type: "date" }, { name: "startIncluded", type: "boolean" }, { name: "endIncluded", type: "boolean" }] }] }] }], ["popup-voxel", C2], ["popup-element-voxel", C2]]);
function A(e2) {
  "feature-reduction-popup" === e2 ? (m(i.getLogger("esri.arcade"), 'profile name: "feature-reduction-popup"', { replacement: '"popup-feature-reduction"', version: "4.32", warnOnce: true }), e2 = "popup-feature-reduction") : "feature-reduction-popup-element" === e2 && (m(i.getLogger("esri.arcade"), 'profile name: "feature-reduction-popup-element"', { replacement: '"popup-element-feature-reduction"', version: "4.32", warnOnce: true }), e2 = "popup-element-feature-reduction");
  const t2 = j.get(e2);
  if (!t2) {
    const t3 = Array.from(j.keys()).map(((e3) => `'${e3}'`)).join(", ");
    throw new s("createArcadeProfile:invalid-profile-name", `Invalid profile name '${e2}'. You must specify one of the following values: ${t3}`);
  }
  return a(t2);
}
async function k(e2, t2, r2 = {}) {
  y || (y = await e());
  const { arcade: a2, arcadeUtils: o, batchExec: { createBatchExecutor: c }, aiServices: { BatchTranslationServiceFactory: s2, PortalTranslationService: i3 } } = y, { loadScriptDependencies: p, referencesMember: l, scriptIsAsync: f2 } = a2, d3 = w(t2.variables, []), b2 = d3.filter(((e3) => "featureSet" === e3.type || "featureSetCollection" === e3.type)).map(((e3) => e3.name.toLowerCase())), v2 = a2.parseScript(e2, b2);
  if (!v2) throw new s("arcade:invalid-script", "Unable to create SyntaxTree");
  const g3 = o.extractFieldNames(v2), $2 = a2.scriptTouchesGeometry(v2), x2 = d3.map(((e3) => e3.name.toLowerCase())).filter(((e3) => l(v2, e3))), C3 = f2(v2, b2);
  await p(v2, C3, b2);
  const j2 = { vars: {}, useAsync: C3 };
  for (const n of x2) j2.vars[n] = "any";
  const { lruCache: A2, services: k2 } = r2, T = a2.compileScript(v2, j2), F = a2.featureSetUtils(), I = (e3, r3 = {}) => {
    if (C3) throw new s("arcade:invalid-execution-mode", "Cannot execute the script in synchronous mode");
    const a3 = { ...k2, ...r3.services }, c2 = { lruCache: A2, ...r3, services: a3 }, s3 = T(S(t2, e3, c2, F, C3));
    return r3.rawOutput ? s3 : h2(s3, o);
  }, O = async (e3, r3 = {}) => {
    const a3 = { ...k2, ...r3.services }, n = { lruCache: A2, ...r3, services: a3 }, c2 = await T(S(t2, e3, n, F, C3));
    return r3.rawOutput ? c2 : h2(c2, o);
  }, D = async (e3, r3, a3 = {}) => {
    const n = [], p2 = c(e3, (async (e4, c2) => {
      const s3 = r3(e4);
      try {
        const e5 = { ...l2, translation: m2.create(c2) }, r4 = { lruCache: A2, ...a3, services: e5 }, i4 = await T(S(t2, s3, r4, F, C3)), p3 = a3.rawOutput ? i4 : h2(i4, o);
        n.push({ id: c2.id, result: { status: "fulfilled", value: p3 } });
      } catch (i4) {
        throw n.push({ id: c2.id, result: { status: "rejected", reason: i4 } }), i4;
      }
    }), a3.maxConcurrency ?? 64, a3.abortSignal), l2 = { ...k2, ...a3.services }, m2 = new s2(p2, l2.translation ?? new i3(l2.portal ?? C.getDefault(), a3.console));
    return await p2.run(), n.sort((({ id: e4 }, { id: t3 }) => e4 - t3)).map((({ result: e4 }) => e4));
  };
  return { execute: I, executeAsync: O, executeAsyncBatch: D, isAsync: C3, variablesUsed: x2, fieldsUsed: g3, geometryUsed: $2, syntaxTree: v2 };
}
export {
  k as createArcadeExecutor,
  A as createArcadeProfile
};
//# sourceMappingURL=arcade-V6YHBIIO.js.map
