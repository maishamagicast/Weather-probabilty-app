import {
  t as t2
} from "./chunk-DPYNRAFQ.js";
import {
  E as E4,
  P,
  r as r5
} from "./chunk-E6GSKN5N.js";
import {
  r as r6
} from "./chunk-7J3MHRGU.js";
import {
  r as r7
} from "./chunk-BAO6UHB5.js";
import {
  r as r4
} from "./chunk-JP6AJGWT.js";
import {
  Z,
  f as f3,
  l as l5,
  t,
  z
} from "./chunk-UIFFN73A.js";
import {
  c as c6,
  l as l6,
  l2 as l7,
  r as r3
} from "./chunk-BCSNVZ5T.js";
import {
  g as g2,
  g2 as g3
} from "./chunk-A5TNL24S.js";
import {
  n as n5,
  p as p4,
  s as s5
} from "./chunk-VEPPH26Q.js";
import "./chunk-RGNIL2SR.js";
import {
  p as p3
} from "./chunk-CFDUDTHD.js";
import "./chunk-OTD22OSX.js";
import "./chunk-AP7A45V5.js";
import {
  r as r8
} from "./chunk-RXMA26FH.js";
import "./chunk-IE6QJMDY.js";
import {
  r as r9
} from "./chunk-LSS4RXAI.js";
import "./chunk-3KDNHMA3.js";
import {
  E as E3,
  N,
  g
} from "./chunk-ONUQSGEP.js";
import {
  E,
  E2,
  h as h5,
  p as p2
} from "./chunk-37USNU2Q.js";
import {
  R,
  b as b2,
  q as q2,
  v as v3
} from "./chunk-YERTKO74.js";
import {
  a as a4,
  l as l4
} from "./chunk-OG7E7GTZ.js";
import {
  S,
  S2,
  d as d5,
  h as h4
} from "./chunk-U4MNSZBG.js";
import {
  c as c3
} from "./chunk-TXQFMFGJ.js";
import "./chunk-Y6UIOJ4V.js";
import {
  f as f2,
  j as j3,
  l as l3,
  v as v2
} from "./chunk-WHNSSW5C.js";
import {
  v
} from "./chunk-TNWEXAUF.js";
import "./chunk-TM5UR4RA.js";
import {
  n as n3
} from "./chunk-IS6QSGYZ.js";
import "./chunk-RHVCSVQD.js";
import "./chunk-HUR2TTV7.js";
import {
  e as e3
} from "./chunk-PGNIZQW2.js";
import {
  D,
  J,
  O as O2,
  p
} from "./chunk-DPEZN2CZ.js";
import "./chunk-6T6LJGGM.js";
import "./chunk-HPADPQJ7.js";
import "./chunk-QYV34ZYV.js";
import "./chunk-4QM2FHGA.js";
import "./chunk-3JKWT76Y.js";
import "./chunk-LOLNWH3R.js";
import {
  l as l2,
  m as m2
} from "./chunk-BM643MQD.js";
import "./chunk-M2WW46LJ.js";
import {
  n as n4
} from "./chunk-RFSLNSEE.js";
import {
  c as c4
} from "./chunk-FBGZNF2J.js";
import {
  _
} from "./chunk-VJKKOB5K.js";
import "./chunk-3ZX4Y274.js";
import "./chunk-WX3VZIBK.js";
import {
  c as c5
} from "./chunk-746KDGCX.js";
import "./chunk-ANUSP5DZ.js";
import "./chunk-QZBNKN5E.js";
import "./chunk-A2AZM62Y.js";
import {
  h as h3
} from "./chunk-FPALEK52.js";
import "./chunk-2RL34CVC.js";
import "./chunk-BNQMKYX6.js";
import "./chunk-B6C2GOG6.js";
import {
  j as j2,
  o as o2,
  q
} from "./chunk-K3VYMAVM.js";
import "./chunk-P5DG4SNT.js";
import "./chunk-3FFCJ4YU.js";
import "./chunk-ZBTRSUIE.js";
import "./chunk-D6GGPM6D.js";
import "./chunk-U2JVYDTA.js";
import "./chunk-HH4Q2NN5.js";
import "./chunk-3CFYBBSV.js";
import "./chunk-AACFCXAP.js";
import "./chunk-VCKINPGN.js";
import "./chunk-SDCRJECE.js";
import {
  a as a3,
  d as d4,
  x
} from "./chunk-4G42CJX6.js";
import "./chunk-NEI5HAVK.js";
import "./chunk-D7G7U7XX.js";
import "./chunk-2CS746FZ.js";
import "./chunk-UET4BL4J.js";
import {
  m as m4
} from "./chunk-YMT7TAQQ.js";
import "./chunk-RZGBA4KS.js";
import "./chunk-FSYN2HHU.js";
import "./chunk-7I4TWCTW.js";
import "./chunk-SCMB64VM.js";
import {
  u as u3
} from "./chunk-MBJ7YPSH.js";
import {
  m as m3
} from "./chunk-D34PNYRG.js";
import "./chunk-APMQAZ5Z.js";
import "./chunk-R7YP6EQJ.js";
import "./chunk-CHGKJUJ3.js";
import "./chunk-3YBQQHIP.js";
import "./chunk-OJQCHQYS.js";
import "./chunk-N3W3EVP3.js";
import "./chunk-SIRTOV2N.js";
import "./chunk-M4XVX74D.js";
import "./chunk-UZ3YWBWC.js";
import "./chunk-2EOHKZLO.js";
import "./chunk-3M6ALZOH.js";
import "./chunk-QPV4BKBC.js";
import "./chunk-A7I2KMJU.js";
import "./chunk-BPI4BR4E.js";
import {
  K,
  L,
  O,
  Q,
  k
} from "./chunk-3L5JZOMH.js";
import "./chunk-N77BULFI.js";
import "./chunk-NEIJCC5O.js";
import "./chunk-UMUW6RKM.js";
import "./chunk-XRTNDGK2.js";
import "./chunk-A6R2FXH6.js";
import "./chunk-H6ZVHKNF.js";
import "./chunk-YAXW2DL6.js";
import "./chunk-4KZLIAP7.js";
import "./chunk-62NATJWT.js";
import "./chunk-FOPBVVXE.js";
import "./chunk-INI6MHIQ.js";
import "./chunk-QUZZIDFR.js";
import "./chunk-CBCDVQSA.js";
import {
  n as n2
} from "./chunk-RKF6WUZT.js";
import {
  y
} from "./chunk-RMRI4NYS.js";
import {
  e as e2
} from "./chunk-YYLIW24Q.js";
import "./chunk-B7BH33JH.js";
import "./chunk-BLBN3L5Q.js";
import "./chunk-XNUSHDFN.js";
import "./chunk-4AKMPOG7.js";
import "./chunk-2CJBZZN7.js";
import "./chunk-ZJQPHR3K.js";
import {
  w as w2
} from "./chunk-R4XAU2TW.js";
import {
  d as d3
} from "./chunk-YVMULGDJ.js";
import {
  V
} from "./chunk-74GULGYB.js";
import {
  U,
  a as a2,
  f,
  h as h2,
  j,
  l,
  w
} from "./chunk-HYAO4PVV.js";
import "./chunk-SRNKPAJX.js";
import {
  o
} from "./chunk-VNQUG2TO.js";
import "./chunk-MOMLPET6.js";
import "./chunk-3QHX4R4B.js";
import "./chunk-ORMKIVR7.js";
import "./chunk-TOCH3L2K.js";
import "./chunk-EULNFFHG.js";
import "./chunk-SDIBXPSJ.js";
import "./chunk-CBXZL53X.js";
import "./chunk-LPCUYJ2B.js";
import "./chunk-SMO33YG7.js";
import "./chunk-LCBAL6ER.js";
import {
  ce,
  s as s3,
  s2 as s4
} from "./chunk-6JCZVSRM.js";
import "./chunk-LLGOMKTE.js";
import "./chunk-ZB6KRLRI.js";
import "./chunk-67AKDROO.js";
import "./chunk-CM3TIXEV.js";
import "./chunk-POWGZO3T.js";
import "./chunk-OUZJZB6I.js";
import "./chunk-NJZD7WM5.js";
import "./chunk-CL7VLXUR.js";
import "./chunk-FCX4ZA3Z.js";
import {
  b,
  m2 as m
} from "./chunk-2ZPU5IZX.js";
import {
  a2 as a
} from "./chunk-S62CSPIH.js";
import "./chunk-X26VPODZ.js";
import "./chunk-XNYPRDKK.js";
import {
  r
} from "./chunk-Y4BWIIWH.js";
import "./chunk-TTJIKWMC.js";
import "./chunk-CMEG2CKL.js";
import "./chunk-VHPBXBDE.js";
import "./chunk-6ACTD4UJ.js";
import "./chunk-5REYU5G2.js";
import "./chunk-JNYZ3I5R.js";
import {
  c,
  c3 as c2,
  d as d2,
  e2 as e,
  h,
  r as r2,
  s as s2,
  u2 as u,
  u3 as u2
} from "./chunk-N626Y23H.js";
import {
  i3 as i,
  s2 as s
} from "./chunk-TJPLHZCD.js";
import {
  d,
  n
} from "./chunk-KLFJ5V5G.js";
import "./chunk-G26ADAPQ.js";

// node_modules/@arcgis/core/views/3d/interactive/editingTools/reshape/isSupportedObject.js
function e4(t3) {
  return o3(t3).result;
}
function o3(e6) {
  if (e6.graphic && "graphics" !== e6.graphic.layer?.type) return { result: P.GRAPHICS_LAYER_MISSING };
  if (!e6.operations) return { result: P.GEOMETRY_MISSING };
  if (v2(e6.elevationInfo)) return { result: P.ELEVATION_MODE_UNSUPPORTED };
  const o6 = e6.operations.data.type, i4 = e6.operations.data.geometry;
  return "point" === o6 || "mesh" === o6 || "polyline" === o6 || "polygon" === o6 ? { result: P.SUPPORTED, geometry: i4 } : { result: P.GEOMETRY_TYPE_UNSUPPORTED };
}

// node_modules/@arcgis/core/views/3d/interactive/editingTools/transform/isSupportedGraphic.js
function r10(r12) {
  if ("graphics" !== r12.layer?.type) return P.GRAPHICS_LAYER_MISSING;
  if (null == r12.geometry) return P.GEOMETRY_MISSING;
  switch (r12.geometry.type) {
    case "point":
      break;
    case "polygon":
    case "polyline":
    case "multipoint":
    case "extent":
    case "mesh":
      return P.SUPPORTED;
    default:
      return P.GEOMETRY_TYPE_UNSUPPORTED;
  }
  const s8 = null != r12.symbol && "point-3d" === r12.symbol.type && r12.symbol.symbolLayers;
  if (!s8 || !s8.some(((e6) => "object" === e6.type))) return P.SYMBOL_TYPE_UNSUPPORTED;
  return "on-the-ground" !== l3(r12) && f2(r12) ? P.ELEVATION_MODE_UNSUPPORTED : P.SUPPORTED;
}

// node_modules/@arcgis/core/views/interactive/snapping/FeatureSnappingLayerSource.js
var i2 = class extends b {
  constructor(o6) {
    super(o6), this.layer = null, this.enabled = true, this.updating = false, this.availability = 1, this.sublayerSources = new V();
  }
};
r([m({ constructOnly: true })], i2.prototype, "layer", void 0), r([m()], i2.prototype, "enabled", void 0), r([m()], i2.prototype, "updating", void 0), r([m()], i2.prototype, "availability", void 0), r([m()], i2.prototype, "sublayerSources", void 0), i2 = r([a("esri.views.interactive.snapping.FeatureSnappingLayerSource")], i2);

// node_modules/@arcgis/core/views/interactive/snapping/SnappingOptions.js
var u4 = class extends b {
  constructor(e6) {
    super(e6), this.enabled = false, this.enabledToggled = false, this.forceDisabled = false, this.selfEnabled = true, this.featureEnabled = true, this.gridEnabled = false, this.attributeRulesEnabled = false, this.featureSources = new V(), this.distance = p3.distance, this.touchSensitivityMultiplier = p3.touchSensitivityMultiplier;
  }
  get effectiveEnabled() {
    return !this.forceDisabled && (this.enabledToggled ? !this.enabled : this.enabled);
  }
  get effectiveGridEnabled() {
    return this.effectiveEnabled && this.gridEnabled;
  }
  get effectiveSelfEnabled() {
    return this.effectiveEnabled && this.selfEnabled;
  }
  get effectiveFeatureEnabled() {
    return this.effectiveEnabled && this.featureEnabled;
  }
  get _effectiveFeatureSources() {
    const e6 = this.featureSources;
    e6.some(c7) && i.getLogger(this).warnOnce("Do not configure SubtypeGroupLayer sources in SnappingOptions.featureSources directly. Create a FeatureSnappingLayerSource for each SubtypeSublayer.");
    const t3 = e6.filter(d6), s8 = this._get("_effectiveFeatureSources")?.filter(c7) ?? new V();
    for (const r12 of t3) {
      const e7 = s8.find(((e8) => e8.layer === r12.layer.parent));
      if (e7) e7.sublayerSources.includes(r12) || e7.sublayerSources.add(r12);
      else if (r12.layer.parent) {
        const e8 = new i2({ layer: r12.layer.parent });
        e8.sublayerSources.add(r12), s8.add(e8);
      }
    }
    for (const r12 of s8) {
      const e7 = r12.sublayerSources.filter(((e8) => !t3.includes(e8)));
      r12.sublayerSources.removeMany(e7);
    }
    s8.removeMany(s8.filter(((e7) => 0 === e7.sublayerSources.length)));
    const a8 = e6.filter(p5), l9 = this._get("_effectiveFeatureSources") ?? new V(), { added: u7, removed: f5 } = d(l9.toArray(), [...a8, ...s8]);
    return l9.removeMany(f5), l9.addMany(u7), l9;
  }
};
function c7(e6) {
  return "subtype-group" === e6.layer.type;
}
function p5(e6) {
  return "subtype-group" !== e6.layer.type;
}
function d6(e6) {
  return "subtype-sublayer" === e6.layer.type;
}
r([m()], u4.prototype, "enabled", void 0), r([m()], u4.prototype, "enabledToggled", void 0), r([m()], u4.prototype, "forceDisabled", void 0), r([m()], u4.prototype, "selfEnabled", void 0), r([m()], u4.prototype, "featureEnabled", void 0), r([m()], u4.prototype, "gridEnabled", void 0), r([m()], u4.prototype, "attributeRulesEnabled", void 0), r([m({ type: V.ofType(i2) })], u4.prototype, "featureSources", void 0), r([m()], u4.prototype, "distance", void 0), r([m()], u4.prototype, "touchSensitivityMultiplier", void 0), r([m({ readOnly: true })], u4.prototype, "effectiveEnabled", null), r([m({ readOnly: true })], u4.prototype, "effectiveGridEnabled", null), r([m({ readOnly: true })], u4.prototype, "effectiveSelfEnabled", null), r([m({ readOnly: true })], u4.prototype, "effectiveFeatureEnabled", null), r([m({ readOnly: true })], u4.prototype, "_effectiveFeatureSources", null), u4 = r([a("esri.views.interactive.snapping.SnappingOptions")], u4);

// node_modules/@arcgis/core/views/support/geodesicLengthMeasurementUtils.js
function m5(e6) {
  const { spatialReference: t3 } = e6;
  return t(t3, j4, h6, e6);
}
function f4(e6, t3) {
  if (!s3(e6.spatialReference, t3.spatialReference)) return null;
  const { spatialReference: r12 } = e6;
  return x2[0] = e6.x, x2[1] = e6.y, x2[2] = e6.hasZ ? e6.z : 0, U2[0] = t3.x, U2[1] = t3.y, U2[2] = t3.hasZ ? t3.z : 0, p6(x2, U2, r12);
}
function p6(e6, t3, r12) {
  return t(r12, y2, d7, e6, t3, r12);
}
var l8 = { geodesicLength: m5, geodesicDistanceBetweenPoints: f4, geodesicDistance: p6 };
async function g4() {
  return await m2(), l8;
}
function y2(t3, r12, n10) {
  return a4(q2(w3, t3, r12, n10).distance, "meters");
}
function d7(t3, r12, n10) {
  return a4(l2(R2(t3, r12, n10), { unit: "meters" }), "meters");
}
function j4(t3) {
  return a4(R([t3], "meters")[0], "meters");
}
function h6(t3) {
  return a4(l2(t3, { unit: "meters" }), "meters");
}
function R2(e6, t3, n10) {
  return new y({ spatialReference: n10, paths: [[[...e6], [...t3]]] });
}
var w3 = new b2();
var x2 = n2();
var U2 = n2();

// node_modules/@arcgis/core/views/interactive/snapping/SnappingManager.js
var x3 = class extends o.EventedMixin(b) {
  constructor(e6) {
    super(e6), this.options = new u4(), this._engineCache = /* @__PURE__ */ new Map(), this._loadTask = null, this._engines = [], this._currentMainCandidate = null, this._currentOtherActiveCandidates = [], this._currentSnappedType = b3.MAIN;
  }
  initialize() {
    this.addHandles([l((() => {
      const { distance: e6, touchSensitivityMultiplier: t3, effectiveSelfEnabled: n10, effectiveFeatureEnabled: i4, effectiveGridEnabled: s8 } = this.options;
      return { selfEnabled: n10, featureEnabled: i4, gridEnabled: "2d" === this.view.type && s8, viewReady: this.view.ready, viewSpatialReference: this.view.spatialReference, distance: e6, touchSensitivityMultiplier: t3 };
    }), ((e6, t3) => {
      t3 && (this.doneSnapping(), this.emit("changed")), this._loadTask?.abort(), this._loadTask = d3(((n10) => this._updateEngines(e6, t3, n10)));
    }), w), l((() => this.options), ((e6) => {
      for (const t3 of this._engines) t3.options = e6;
    }), U)]);
  }
  destroy() {
    this._loadTask?.abort(), this._destroyEngines();
  }
  get updating() {
    return this._engines.some(((e6) => e6.updating)) || !this._loadTask?.finished;
  }
  _destroyEngines() {
    this._engineCache.forEach(((e6) => e6.destroy())), this._engineCache.clear(), this._engines = [];
  }
  async _updateEngines(e6, t3, n10) {
    if (!e6.viewReady) return void this._destroyEngines();
    t3?.viewSpatialReference !== e6.viewSpatialReference && this._destroyEngines();
    const i4 = this._engineCache, s8 = await Promise.allSettled([e6.featureEnabled && !i4.has("feature") ? this._createFeatureSnappingEngine(n10) : void 0, e6.selfEnabled && !i4.has("self") ? this._createSelfSnappingEngine(n10) : void 0, e6.gridEnabled && !i4.has("grid") ? this._createGridSnappingEngine(n10) : void 0]);
    if (n10.aborted) for (const a8 of s8) "fulfilled" === a8.status && a8.value?.engine.destroy();
    else {
      for (const e7 of s8) "fulfilled" === e7.status && e7.value && i4.set(e7.value.type, e7.value.engine);
      this._engines = Array.from(i4.values());
    }
  }
  async _createSelfSnappingEngine(e6) {
    const [{ SelfSnappingEngine: t3 }, n10] = await Promise.all([import("./SelfSnappingEngine-FMBC47GM.js"), g4()]);
    return s2(e6), { type: "self", engine: new t3({ view: this.view, options: this.options, geodesicLengthMeasurementUtils: n10 }) };
  }
  async _createGridSnappingEngine(e6) {
    const { view: t3 } = this;
    if ("2d" !== t3.type) return;
    const { GridSnappingEngine: n10 } = await import("./GridSnappingEngine-5EO5IBUI.js");
    return s2(e6), { type: "grid", engine: new n10({ view: t3, options: this.options }) };
  }
  async _createFeatureSnappingEngine(e6) {
    const { FeatureSnappingEngine: t3 } = await import("./FeatureSnappingEngine-IYLITA2Z.js");
    s2(e6);
    const { view: n10, options: i4 } = this, { spatialReference: a8 } = n10;
    return { type: "feature", engine: new t3({ view: n10, options: i4, spatialReference: a8 }) };
  }
  get _squaredMouseProximityThreshold() {
    return this.options.distance * this.options.distance;
  }
  get _squaredTouchProximityThreshold() {
    const { distance: e6, touchSensitivityMultiplier: t3 } = this.options, n10 = e6 * t3;
    return n10 * n10;
  }
  snap(e6) {
    return k2(e6) ? this._snapMultiPoint(e6) : this._snapSinglePoint(e6);
  }
  update(e6) {
    const { point: t3, context: n10 } = e6;
    this._removeVisualization();
    const i4 = this._currentMainCandidate;
    if (null == i4) return t3;
    const s8 = this._selectUpdateInput(e6);
    if (null == s8) return t3;
    const { spatialReference: a8 } = n10, r12 = O(s8, a8);
    if (null == r12) return t3;
    const { view: o6 } = this, { elevationInfo: p8, visualizer: d9 } = n10, c9 = [], l9 = E(r12, o6, p8), u7 = i4.constraint.closestTo(l9);
    if (!this._arePointsWithinScreenThreshold(l9, u7, n10) || !L2(i4, n10.drawConstraints)) return this._resetSnappingState(), t3;
    i4.targetPoint = p2(u7), c9.push(...i4.hints);
    for (const h8 of this._currentOtherActiveCandidates) L2(h8, n10.drawConstraints) && (h8.targetPoint = p2(u7), c9.push(...h8.hints));
    return null != d9 && this.addHandles(d9.draw(c9, { spatialReference: a8, elevationInfo: H(n10), view: o6, selfSnappingZ: n10.selfSnappingZ }), z2), h5(u7, o6, t3, n10);
  }
  doneSnapping() {
    this._removeVisualization(), this._resetSnappingState();
  }
  _selectUpdateInput({ point: e6, scenePoint: t3 }) {
    switch (this._currentSnappedType) {
      case b3.MAIN:
        return e6;
      case b3.SCENE:
        return t3;
    }
  }
  _resetSnappingState() {
    this._currentMainCandidate = null, this._currentOtherActiveCandidates = [], this._currentSnappedType = b3.MAIN;
  }
  _removeVisualization() {
    this.removeHandles(z2);
  }
  async _snapSinglePoint({ point: e6, context: t3, signal: n10 }) {
    const { view: i4 } = this, { elevationInfo: s8 } = t3, a8 = E(e6, i4, s8), r12 = await this._fetchCandidates(a8, E2.ALL, t3, n10);
    return this._createSnapResult(a8, b3.MAIN, r12, i4, e6, t3, n10);
  }
  async _snapMultiPoint({ point: e6, scenePoint: t3, context: n10, signal: i4 }) {
    const { view: s8 } = this, { coordinateHelper: a8, elevationInfo: r12, spatialReference: o6 } = n10;
    await Q(t3.spatialReference, o6);
    const p8 = O(t3, o6), d9 = E(p8, s8, r12), c9 = await this._fetchCandidates(d9, E2.FEATURE, n10, i4);
    if (c9.length > 0) {
      const e7 = await this._fetchCandidates(d9, E2.SELF, n10, i4);
      return this._createSnapResult(d9, b3.SCENE, [...c9, ...e7], s8, p8, n10, i4);
    }
    const u7 = E(e6, s8, r12), g7 = await this._fetchCandidates(u7, E2.SELF, n10, i4);
    return this._createSnapResult(u7, b3.MAIN, g7, s8, { z: a8.hasZ() && e6.hasZ ? e6.z ?? 0 : void 0, m: a8.hasM() && e6.hasM ? e6.m ?? 0 : void 0 }, n10, i4);
  }
  async _fetchCandidates(e6, t3, n10, i4) {
    return (await Promise.all(this._engines.map(((s8) => s8.fetchCandidates(e6, t3, n10, i4))))).flat();
  }
  _createSnapResult(e6, t3, n10, i4, s8, r12, o6) {
    return { get valid() {
      return !c2(o6);
    }, apply: () => {
      const { spatialReference: a8 } = r12, { snappedPoint: o7, hints: p8 } = this._processCandidates(e6, t3, n10, r12);
      return this._removeVisualization(), null != r12.visualizer && this.addHandles(r12.visualizer.draw(p8, { spatialReference: a8, elevationInfo: j3, view: i4, selfSnappingZ: r12.selfSnappingZ }), z2), h5(o7, i4, s8, r12);
    } };
  }
  _processCandidates(e6, t3, n10, i4) {
    if (n10.length < 1) return this.doneSnapping(), { snappedPoint: e6, hints: [] };
    this._currentSnappedType !== t3 && this._resetSnappingState(), E3(e6, n10);
    const s8 = this._currentMainCandidate;
    if (null != s8) {
      const a8 = N2(s8, n10);
      if (a8 >= 0) {
        if (!(n10[a8] instanceof r8)) return this._intersectWithOtherCandidates(a8, n10, e6, t3, i4);
        if (this._arePointsWithinScreenThreshold(e6, s8.targetPoint, i4)) return this._updateSnappingCandidate(s8, t3, n10, i4);
      }
    }
    return this._intersectWithOtherCandidates(0, n10, e6, t3, i4);
  }
  _intersectWithOtherCandidates(e6, t3, n10, i4, s8) {
    const { coordinateHelper: a8 } = s8, r12 = t3[e6], o6 = [];
    for (let p8 = 0; p8 < t3.length; ++p8) {
      if (p8 === e6) continue;
      const i5 = t3[p8], s9 = r12.constraint.intersect(i5.constraint);
      if (s9) for (const e7 of s9.closestPoints(r12.targetPoint)) o6.push([new r8(p2(e7), r12, i5, i5.isDraped), this._squaredScreenDistance(n10, e7, a8)]);
    }
    return o6.length > 0 && (o6.sort(((e7, t4) => e7[1] - t4[1])), o6[0][1] < this._squaredPointProximityThreshold(s8.pointer)) ? this._updateSnappingCandidate(o6[0][0], i4, t3, s8) : L2(r12, s8.drawConstraints) ? this._updateSnappingCandidate(r12, i4, t3, s8) : { snappedPoint: n10, hints: [] };
  }
  _updateSnappingCandidate(e6, t3, n10, i4) {
    this.doneSnapping(), this._currentMainCandidate = e6, this._currentSnappedType = t3;
    const s8 = this._currentMainCandidate.targetPoint, a8 = [];
    a8.push(...e6.hints);
    for (const r12 of n10) {
      if (e6 instanceof r8) {
        if (r12.constraint.equals(e6.first.constraint) || r12.constraint.equals(e6.second.constraint)) continue;
      } else if (r12.constraint.equals(e6.constraint)) continue;
      const t4 = r12.constraint.closestTo(s8);
      this._squaredScreenDistance(t4, s8, i4.coordinateHelper) < U3() && (r12.targetPoint = s8, this._currentOtherActiveCandidates.push(r12), a8.push(...r12.hints));
    }
    return { snappedPoint: s8, hints: a8 };
  }
  _squaredPointProximityThreshold(e6) {
    return "touch" === e6 ? this._squaredTouchProximityThreshold : this._squaredMouseProximityThreshold;
  }
  _arePointsWithinScreenThreshold(e6, t3, n10) {
    return this._squaredScreenDistance(e6, t3, n10.coordinateHelper) < this._squaredPointProximityThreshold(n10.pointer);
  }
  _squaredScreenDistance(e6, t3, n10) {
    return g(this._toScreen(e6, n10), this._toScreen(t3, n10));
  }
  _toScreen(e6, t3) {
    return s5(e6, t3.spatialReference, j3, this.view);
  }
  get test() {
  }
};
var b3;
r([m({ constructOnly: true })], x3.prototype, "view", void 0), r([m()], x3.prototype, "options", void 0), r([m({ readOnly: true })], x3.prototype, "updating", null), r([m()], x3.prototype, "_loadTask", void 0), r([m()], x3.prototype, "_engines", void 0), r([m()], x3.prototype, "_squaredMouseProximityThreshold", null), r([m()], x3.prototype, "_squaredTouchProximityThreshold", null), x3 = r([a("esri.views.interactive.snapping.SnappingManager")], x3), (function(e6) {
  e6[e6.MAIN = 0] = "MAIN", e6[e6.SCENE = 1] = "SCENE";
})(b3 || (b3 = {}));
var z2 = "visualization-handle";
function U3() {
  return p3.satisfiesConstraintScreenThreshold * p3.satisfiesConstraintScreenThreshold;
}
function L2(e6, t3) {
  return !t3 || null == t3.direction && null == t3.distance || !(e6 instanceof r6 || e6 instanceof r7 || e6 instanceof r9 || e6 instanceof g2 || e6 instanceof g3) && (!(e6 instanceof n5) || null == t3.direction && e6.selfSnappingType === p4.LastVertex);
}
function N2(e6, t3) {
  return e6 instanceof r8 ? O3(t3, e6.first) >= 0 && O3(t3, e6.second) >= 0 ? 0 : -1 : O3(t3, e6);
}
function O3(e6, t3) {
  let n10 = -1;
  for (let i4 = 0; i4 < e6.length; ++i4) if (t3.constraint.equals(e6[i4].constraint)) {
    n10 = i4;
    break;
  }
  return n10;
}
function k2(e6) {
  return null != e6.scenePoint;
}
function H({ coordinateHelper: e6, elevationInfo: t3 }) {
  return e6.hasZ() ? j3 : t3;
}

// node_modules/@arcgis/core/views/support/euclideanAreaMeasurementUtils.js
function g5(t3, o6 = k3()) {
  return h7(t3, o6);
}
function j5(t3, o6 = k3()) {
  return h7(t3, o6, false);
}
function h7(r12, g7, j6 = r12.hasZ) {
  const h8 = l5(r12.spatialReference), k5 = ce(h8);
  if (null == k5) return null;
  const b6 = (t3, o6) => !(o6.length < 2) && (o2(t3, o6[0], o6[1], j6 && o6[2] || 0), true);
  let v4 = 0;
  for (const t3 of r12.rings) {
    const o6 = t3.length;
    if (o6 < 3) continue;
    const { positionsWorldCoords: a8 } = g7;
    for (; a8.length < o6; ) a8.push(n2());
    const j7 = y3, k6 = o2(d8, 0, 0, 0), x4 = 1 / o6;
    for (let n10 = 0; n10 < o6; n10++) {
      if (!b6(j7, t3[n10])) return null;
      if (!n3(j7, r12.spatialReference, a8[n10], h8)) return null;
      q(k6, k6, a8[n10], x4);
    }
    const C = p(a8[0], a8[1], k6, D());
    if (0 === j2(O2(C))) continue;
    for (let t4 = 0; t4 < o6; t4++) J(C, k6, a8[t4], a8[t4]);
    const R3 = U4(a8);
    for (let t4 = 0; t4 < R3.length; t4 += 3) v4 += v(a8[R3[t4]], a8[R3[t4 + 1]], a8[R3[t4 + 2]]);
  }
  return l4(v4, k5);
}
var y3 = n2();
var d8 = n2();
function k3() {
  return { positionsWorldCoords: [] };
}
function U4(t3) {
  return e3(b4(t3), [], 2);
}
function b4(t3) {
  const o6 = new Float64Array(2 * t3.length);
  for (let r12 = 0; r12 < t3.length; ++r12) {
    const n10 = t3[r12], e6 = 2 * r12;
    o6[e6] = n10[0], o6[e6 + 1] = n10[1];
  }
  return o6;
}

// node_modules/@arcgis/core/views/support/geodesicAreaMeasurementUtils.js
var s6 = (e6) => ({ geodesicArea(r12) {
  const { spatialReference: s8 } = r12;
  return t(s8, n6, ((r13) => a5(e6, r13)), r12);
} });
async function o4() {
  const e6 = await import("./geometryEngine-POMAS4W2.js");
  return s6(e6);
}
function n6(t3) {
  return l4(Math.abs(v3([t3], "square-meters")[0]), "square-meters");
}
function a5(r12, t3) {
  try {
    return l4(Math.abs(r12.geodesicArea(t3, "square-meters")), "square-meters");
  } catch (s8) {
    return null;
  }
}

// node_modules/@arcgis/core/views/support/automaticAreaMeasurementUtils.js
var n7 = (o6) => ({ autoAreaByElevationMode(n10, a8, u7 = k3()) {
  if ("on-the-ground" === a8) {
    const e6 = o6.geodesicArea(n10);
    return null != e6 ? e6 : j5(n10, u7);
  }
  return g5(n10, u7);
}, autoArea2D(t3, r12 = k3()) {
  return this.autoAreaByElevationMode(t3, "on-the-ground", r12);
} });
var a6 = null;
async function u5() {
  return a6 || (a6 = n7(await o4())), a6;
}

// node_modules/@arcgis/core/views/support/automaticLengthMeasurementUtils.js
function s7(e6) {
  return { autoLength2D: (t3) => e6.geodesicLength(t3) ?? f3(t3), autoDistanceBetweenPoints2D: (t3, i4) => e6.geodesicDistanceBetweenPoints(t3, i4) ?? z(t3, i4), autoDistance2D: (n10, i4, o6) => (r11[0] = n10[0], r11[1] = n10[1], r11[2] = 3 === n10.length ? n10[2] : 0, a7[0] = i4[0], a7[1] = i4[1], a7[2] = 3 === i4.length ? i4[2] : 0, e6.geodesicDistance(r11, a7, o6) ?? Z(r11, a7, o6)) };
}
async function c8() {
  return s7(await g4());
}
var r11 = n2();
var a7 = n2();

// node_modules/@arcgis/core/widgets/Sketch/support/OperationHandle.js
var n8 = class extends o.EventedAccessor {
  constructor(e6) {
    super(e6), this.cancelled = false, this.history = { undo: [], redo: [] }, this.type = null;
  }
  get tool() {
    if (!this.activeComponent) return null;
    switch (this.activeComponent.type) {
      case "graphic-mover":
      case "move-3d":
        return "move";
      case "box":
      case "transform-3d":
        return "transform";
      case "reshape":
      case "reshape-3d":
        return "reshape";
      case "draw-2d":
      case "draw-3d":
        return this.activeComponent.geometryType;
      default:
        n(this.activeComponent);
    }
    return null;
  }
  addToHistory(e6) {
    this.history.redo = [], this.history.undo.push(e6);
  }
  resetHistory() {
    this.history.redo = [], this.history.undo = [];
  }
  canUndo() {
    return this.history.undo.length > 0;
  }
  canRedo() {
    return this.history.redo.length > 0;
  }
  complete() {
    this._reset(), this.onEnd(), this.emit("complete");
  }
  cancel() {
    this.cancelled = true, this.complete();
  }
  _reset() {
    this.activeComponent?.reset();
  }
  refreshComponent() {
    const e6 = this.activeComponent;
    e6 && ("box" !== e6.type && "reshape" !== e6.type && "graphic-mover" !== e6.type || e6.refresh());
  }
  set undo(e6) {
    this._set("undo", (() => {
      this.canUndo() && e6();
    }));
  }
  set redo(e6) {
    this._set("redo", (() => {
      this.canRedo() && e6();
    }));
  }
};
r([m()], n8.prototype, "activeComponent", void 0), r([m()], n8.prototype, "cancelled", void 0), r([m()], n8.prototype, "history", void 0), r([m()], n8.prototype, "tool", null), r([m()], n8.prototype, "type", void 0), r([m()], n8.prototype, "canUndo", null), r([m()], n8.prototype, "canRedo", null), r([m()], n8.prototype, "onEnd", void 0), r([m()], n8.prototype, "undo", null), r([m()], n8.prototype, "redo", null), r([m()], n8.prototype, "toggleTool", void 0), r([m()], n8.prototype, "addToSelection", void 0), r([m()], n8.prototype, "removeFromSelection", void 0), n8 = r([a("esri.widgets.Sketch.support.OperationHandle")], n8);
var p7 = class extends n8 {
};
r([m()], p7.prototype, "activeComponent", void 0), p7 = r([a("esri.widgets.Sketch.support.OperationHandle.CreateOperationHandle")], p7);
var i3 = class extends n8 {
};
r([m()], i3.prototype, "activeComponent", void 0), i3 = r([a("esri.widgets.Sketch.support.OperationHandle.UpdateOperationHandle")], i3);

// node_modules/@arcgis/core/widgets/Sketch/support/sketchUtils.js
function e5(e6, n10) {
  if ("freehandPolygon" === n10 || "freehandPolyline" === n10) return "freehand";
  return e6 ?? ("rectangle" === n10 || "circle" === n10 ? "hybrid" : "click");
}
function n9(e6) {
  switch (e6) {
    case "freehandPolygon":
      return "polygon";
    case "freehandPolyline":
      return "polyline";
    default:
      return e6;
  }
}
var o5;
!(function(e6) {
  e6[e6.ForceCollapse = -1] = "ForceCollapse", e6[e6.Low = 0] = "Low", e6[e6.Medium = 10] = "Medium", e6[e6.High = 100] = "High", e6[e6.Max = 1e3] = "Max";
})(o5 || (o5 = {}));

// node_modules/@arcgis/core/widgets/Sketch/SketchViewModel.js
var ae = { defaultZ: 0 };
var se = { reshapeOptions: { edgeOperation: "split", shapeOperation: "move", vertexOperation: "move" }, enableMoveAllGraphics: true, enableRotation: true, enableScaling: true, multipleSelectionEnabled: true, preserveAspectRatio: false, toggleToolOnClick: true, enableZ: true, highlightOptions: { enabled: true, name: c5 }, tool: "transform" };
var re = class extends o.EventedAccessor {
  constructor(e6) {
    super(e6), this._defaultSnappingManager = null, this._updatingHandles = new h3(), this._internalGraphicsLayer = new c3({ listMode: "hide", internal: true, title: "SVM Internal" }), this._operationHandle = null, this._viewHandlesKey = "viewHandles", this.activeFillSymbol = null, this.activeLineSymbol = null, this.activeVertexSymbol = null, this.allowDeleteKey = true, this.layer = null, this.pointSymbol = new u3({ style: "circle", size: 6, color: [255, 255, 255], outline: { color: [50, 50, 50], width: 1 } }), this.polygonSymbol = new m4({ color: [150, 150, 150, 0.2], outline: { color: [50, 50, 50], width: 2 } }), this.polylineSymbol = new m3({ color: [130, 130, 130, 1], width: 2 }), this.meshSymbol = new a3({ symbolLayers: new V([new d4()]) }), this.updateGraphics = new V(), this.updateOnGraphicClick = true, this.creationMode = "single", this.vertexSymbol = new u3({ style: "circle", size: 6, color: [255, 255, 255], outline: { color: [50, 50, 50], width: 1 } }), this.sketchOptions = new l7(), this._moduleLoaderAbortController = null, this._viewReadyAbortController = null, this._sketchContinuationFlag = false, this._originalPopupEnabled = null, this.defaultCreateOptions = ae, this.defaultUpdateOptions = se, this.snappingOptions = e6?.snappingManager?.options ?? e6?.snappingOptions ?? new u4();
  }
  initialize() {
    this.addHandles([a2((() => this.view?.map?.layers), "change", ((e6) => {
      e6.removed.includes(this.layer) && this.cancel();
    })), a2((() => this.layer?.graphics), "change", ((e6) => {
      if (null != this._operationHandle) for (const t3 of e6.removed) this.updateGraphics.includes(t3) && (this.updateGraphics.length > 1 ? this._operationHandle.removeFromSelection(t3) : this._operationHandle.cancel());
    })), l((() => this.layer?.elevationInfo ?? null), ((e6) => {
      e6 !== this._internalGraphicsLayer.elevationInfo && (this.cancel(), this._internalGraphicsLayer.elevationInfo = e6);
    }), w), l((() => this.view), ((e6) => {
      this._defaultSnappingManager = u(this._defaultSnappingManager), e6 && (this.snappingManager || (this._defaultSnappingManager = new x3({ view: e6, options: this.snappingOptions })), "2d" === e6.type ? import("./editingTools-4VDHRMT4.js") : "3d" === e6.type && (import("./editingTools-MFCRZSTL.js"), import("./GraphicsLayerView3D-NP7U3IKD.js")));
    }), w), l((() => this.view?.spatialReference), ((e6, t3) => {
      e6 && t3 && !e6.equals(t3) && this.cancel();
    }))]), N(this);
  }
  destroy() {
    this.cancel(), this._removeDefaultLayer(), this._defaultSnappingManager = u(this._defaultSnappingManager), this._set("snappingManager", null), this._set("view", null), this._updatingHandles.destroy(), this.emit("destroy");
  }
  get updating() {
    return this._updatingHandles.updating || null != this.snappingManager && this.snappingManager.updating;
  }
  get activeTool() {
    return this._operationHandle?.tool ?? null;
  }
  get activeCreateToolDrawMode() {
    return "create" === this._operationHandle?.type && this._operationHandle.activeComponent && "mode" in this._operationHandle.activeComponent ? this._operationHandle.activeComponent.mode : null;
  }
  get activeTooltip() {
    const { activeComponent: e6, destroyed: t3 } = this, o6 = !t3 && e6 && "tooltip" in e6 ? e6.tooltip : null;
    return o6?.visible ? o6 : null;
  }
  get activeComponent() {
    return this._operationHandle?.activeComponent ?? null;
  }
  get createGraphic() {
    return null == this.activeComponent || "draw-3d" !== this.activeComponent.type && "draw-2d" !== this.activeComponent.type ? this._get("createGraphic") : this.activeComponent.graphic;
  }
  get defaultCreateOptions() {
    return this._get("defaultCreateOptions");
  }
  set defaultCreateOptions(e6) {
    this._set("defaultCreateOptions", { ...ae, ...e6 });
  }
  get defaultUpdateOptions() {
    return this._get("defaultUpdateOptions");
  }
  set defaultUpdateOptions(e6) {
    this._set("defaultUpdateOptions", { ...se, ...e6, reshapeOptions: { ...se.reshapeOptions, ...e6?.reshapeOptions }, highlightOptions: { ...se.highlightOptions, ...e6?.highlightOptions } });
  }
  get labelOptions() {
    return this.sketchOptions.labels;
  }
  set labelOptions(e6) {
    this.sketchOptions.labels = e6;
  }
  get snappingOptions() {
    return this.snappingManager?.options ?? this._get("snappingOptions");
  }
  set snappingOptions(e6) {
    null != this._defaultSnappingManager && (this._defaultSnappingManager.options = e6), this._set("snappingOptions", e6);
  }
  get snappingManager() {
    return this._isOverridden("snappingManager") && this._get("snappingManager"), this._defaultSnappingManager;
  }
  set snappingManager(e6) {
    if (e6) this._isOverridden("snappingManager") || (this._defaultSnappingManager = u(this._defaultSnappingManager)), this._override("snappingManager", e6);
    else {
      const { view: e7 } = this;
      !this._defaultSnappingManager && e7 && (this._defaultSnappingManager = new x3({ options: this.snappingOptions, view: e7 })), this._clearOverride("snappingManager");
    }
  }
  get state() {
    const e6 = !(!this.view?.ready || !this.layer), t3 = this._operationHandle;
    return e6 && t3 ? "active" : e6 ? "ready" : "disabled";
  }
  get tooltipOptions() {
    return this.sketchOptions.tooltips;
  }
  set tooltipOptions(e6) {
    this.sketchOptions.tooltips = e6;
  }
  get valueOptions() {
    return this.sketchOptions.values;
  }
  set valueOptions(e6) {
    this.sketchOptions.values = e6;
  }
  get view() {
    return this._get("view");
  }
  set view(e6) {
    const t3 = this._get("view");
    if (t3) {
      const { container: e7, map: o7 } = t3;
      e7 && (t3.cursor = null), o7?.remove(this._internalGraphicsLayer), this.removeHandles(this._viewHandlesKey), this.cancel();
    }
    const o6 = "view-ready";
    this.removeHandles(o6), e6 && this.addHandles(f((() => e6.ready), ((t4) => {
      this.removeHandles(this._viewHandlesKey), t4 && this.addHandles(this._generateViewHandles(e6), this._viewHandlesKey);
    }), w), o6), this._set("view", e6);
  }
  cancel() {
    this._moduleLoaderAbortController = e(this._moduleLoaderAbortController), this._viewReadyAbortController = e(this._viewReadyAbortController), this._sketchContinuationFlag = true, this._operationHandle && this._operationHandle.cancel();
  }
  complete() {
    this._operationHandle && this._operationHandle.complete();
  }
  delete() {
    const { state: e6, updateGraphics: t3 } = this;
    if ("active" === e6 && t3.length) {
      const { activeTool: e7, layer: o6 } = this, i4 = t3.toArray();
      o6.removeMany(i4), this.cancel(), this._emitDeleteEvent({ graphics: i4, tool: e7 });
    }
  }
  duplicate() {
    if ("active" === this.state && this.updateGraphics.length) {
      const e6 = this.updateGraphics.map(((e7) => e7.clone())).toArray();
      return this.layer.addMany(e6), this.emit("duplicate", { graphics: e6, type: "duplicate" }), e6;
    }
    return [];
  }
  async create(e6, t3) {
    this.cancel(), await this._waitViewReady();
    const { view: o6, layer: i4 } = this;
    if (!o6 || "disabled" === this.state) throw i4 || this._logMissingLayer(), u2();
    if (null != o6.activeTool && (o6.activeTool = null), !e6) return void this._logError("sketch:missing-parameter", "Missing parameter 'tool'.");
    t2(o6, this._internalGraphicsLayer);
    const a8 = await this._updatingHandles.addPromise(this._setupCreateOperation(e6, t3));
    if (null == a8 || this.destroyed) return void o6.map.remove(this._internalGraphicsLayer);
    const s8 = () => {
      if (a8 === this._operationHandle) {
        const o7 = this.createGraphic, s9 = this._operationHandle.cancelled;
        if (this._operationHandle.destroy(), this._operationHandle = null, this._set("createGraphic", null), this.view?.map && this.view.map.remove(this._internalGraphicsLayer), a8.cancelled || null == o7 || i4.add(o7), this._sketchContinuationFlag = false, this.emit("create", { graphic: o7, state: s9 ? "cancel" : "complete", tool: e6, toolEventInfo: null, type: "create" }), s9 || this._sketchContinuationFlag) return;
        const { creationMode: r12 } = this;
        if ("continuous" === r12) {
          if (t3?.geometryToPlace) return;
          this._updatingHandles.addPromise(d2(this.create(e6, t3)));
        } else "update" === r12 && o7 && this._updatingHandles.addPromise(d2(this.update([o7])));
      }
    };
    a8.on("complete", s8), this._operationHandle = a8, o6.ready && o6.focus();
  }
  async place(e6, t3) {
    return this.create("mesh", { mode: "click", hasZ: e6.hasZ, geometryToPlace: e6, ...t3 });
  }
  async update(e6, t3) {
    this.cancel(), await this._waitViewReady();
    const { layer: o6, view: i4, state: a8 } = this;
    if (!i4 || "disabled" === a8) throw o6 || this._logMissingLayer(), u2();
    null != i4.activeTool && (i4.activeTool = null);
    const s8 = Array.isArray(e6) ? e6 : [e6];
    if (null == e6 || !s8?.length) return void this._logError("sketch:missing-parameter", "Missing parameter 'graphics'.");
    if (s8.some(((e7) => e7.layer !== o6 ? (this._logError("sketch:invalid-parameter", "Parameter 'graphics' contains one or more graphics missing from the supplied GraphicsLayer."), true) : null == e7.geometry && (this._logError("sketch:invalid-parameter", "Parameter 'graphics' contains one or more graphics with an unsupported geometry."), true)))) return;
    const r12 = await this._updatingHandles.addPromise(this._setupUpdateOperation(s8, t3));
    this.destroyed || null == r12 || ge(r12) || (t2(i4, this._internalGraphicsLayer), this._setUpdateOperationHandle(r12, t3), this.emit("update", { graphics: s8, state: "start", aborted: false, tool: r12.tool, toolEventInfo: null, type: "update" }));
  }
  async _updateSpatialReference(e6) {
    const t3 = this.view;
    if (t3) {
      e6 = Array.isArray(e6) ? e6 : [e6];
      for (const o6 of e6) null == o6.geometry || "mesh" === o6.geometry.type || s3(o6.geometry.spatialReference, t3.spatialReference) || (L(o6.geometry.spatialReference, t3.spatialReference) || k() || await K(), o6.geometry = O(o6.geometry, t3.spatialReference));
    } else this._logMissingView();
  }
  undo() {
    this.canUndo() && this._operationHandle?.undo();
  }
  redo() {
    this.canRedo() && this._operationHandle?.redo();
  }
  canUndo() {
    return !!this._operationHandle?.canUndo();
  }
  canRedo() {
    return !!this._operationHandle?.canRedo();
  }
  toggleUpdateTool() {
    this._operationHandle?.toggleTool();
  }
  async _getFirstHit(e6) {
    const t3 = this.view;
    if (!t3) return this._logMissingView(), null;
    if ("2d" === t3.type) {
      const o7 = [];
      t3.map.allLayers.forEach(((e7) => {
        "vector-tile" !== e7.type && "imagery" !== e7.type || o7.push(e7);
      }));
      const i5 = await t3.hitTest(e6, { exclude: o7 });
      return r4(i5.results);
    }
    const o6 = [t3.map.ground];
    t3.map.allLayers.forEach(((e7) => {
      w2(e7.type) && o6.push(e7);
    }));
    const i4 = await t3.hitTest(e6, { exclude: o6 });
    if (i4.results.length > 0) {
      const e7 = i4.results[0];
      if (null != e7 && "graphic" === e7.type && e7.graphic && (!i4.ground.mapPoint || t3.map.ground.opacity < 1 || i4.ground.distance - (e7.distance ?? 0) > -Math.min(3 * i4.ground.distance, "global" === t3.viewingMode ? s4(t3.renderCoordsHelper.spatialReference).radius / t3.renderCoordsHelper.unitInMeters : Number.POSITIVE_INFINITY))) return e7;
    }
    return null;
  }
  _generateViewHandles(e6) {
    return [e6.on("immediate-click", (async (e7) => {
      const t3 = "active" === this.state && "create" === this._operationHandle?.type;
      "disabled" !== this.state && !t3 && this.updateOnGraphicClick && await this._updatingHandles.addPromise(this._handleImmediateClick(e7));
    }), _.WIDGET)];
  }
  async _handleImmediateClick(e6) {
    const t3 = await e6.defer((() => this._getFirstHit(n4(e6))));
    let o6 = null;
    if (null != t3) {
      const i4 = t3.graphic;
      this.updateGraphics.includes(i4) || i4.layer === this.layer ? (e6.stopPropagation(), o6 = i4) : "2d" !== this.view?.type || this._isComponentGraphic(i4) || "active" !== this.state || this.cancel();
    } else "active" === this.state && this.cancel();
    null == o6 || this.updateGraphics.includes(o6) || await this.update([o6], { ...this.defaultUpdateOptions, reshapeOptions: { ...this.defaultUpdateOptions.reshapeOptions } });
  }
  async _setupCreateOperation(e6, t3) {
    const o6 = this.view;
    if (!o6) return this._logMissingView(), null;
    const i4 = { hasZ: "3d" === o6.type, ...this.defaultCreateOptions, ...t3 }, a8 = await this._setupDrawGraphicTool(e6, o6, i4);
    return null == a8 ? null : (o6.tools.add(a8), o6.activeTool = a8, this._setupCreateOperationHandle(a8));
  }
  async _setupDrawGraphicTool(e6, t3, o6) {
    if ("multipoint" === e6 && "3d" === t3.type) return this._logError("sketch:create", "Multipoint geometries are not supported in SceneView."), null;
    if (!t3) return this._logMissingView(), null;
    const { cursor: i4, defaultZ: a8, hasZ: s8, geometryToPlace: r12, graphicProperties: n10, mode: p8, preserveAspectRatio: l9 } = o6, h8 = e5(p8, e6), c9 = n9(e6), d9 = o6?.optionsPerTool?.has(e6) ? o6.optionsPerTool.get(e6) : {}, u7 = d9?.preserveAspectRatio ?? l9 ?? "rectangle" !== e6, m6 = { centered: "rectangle" !== e6 && !("circle" === e6 && !u7), cursor: i4, defaultZ: a8, forceUniformSize: u7, graphicProperties: { ...n10, attributes: { ...n10?.attributes } }, geometryToPlace: r12, geometryType: c9, mode: h8, graphicSymbol: this._getGraphicSymbolFromTool(e6), hasZ: s8, snappingManager: this.snappingManager, snapToScene: false, view: t3, ...d9 };
    return "2d" === t3.type ? this._makeDrawGraphicTool2D(m6) : this._makeDrawGraphicTool3D(m6);
  }
  async _makeDrawGraphicTool2D(e6) {
    const [t3, o6, i4] = await Promise.all([this._requireModule(import("./editingTools-4VDHRMT4.js")), u5(), c8()]);
    return ge(t3) || this.destroyed ? null : new t3.module.DrawGraphicTool2D({ ...e6, activeVertexSymbol: this.activeVertexSymbol, regularVerticesSymbol: this.vertexSymbol, activeLineSymbol: this.activeLineSymbol, activeFillSymbol: le(e6.geometryType) ? this.activeFillSymbol : null, sketchOptions: this.sketchOptions, automaticAreaMeasurementUtils: o6, automaticLengthMeasurementUtils: i4 });
  }
  async _makeDrawGraphicTool3D(e6) {
    const [t3, o6, i4] = await Promise.all([this._requireModule(import("./editingTools-MFCRZSTL.js")), u5(), c8()]);
    if (ge(t3) || this.destroyed) return null;
    const { elevationInfo: a8 } = this.layer;
    return new t3.module.DrawGraphicTool3D({ ...e6, elevationInfo: a8, snapToScene: true, sketchOptions: this.sketchOptions, automaticAreaMeasurementUtils: o6, automaticLengthMeasurementUtils: i4 });
  }
  _setupCreateOperationHandle(e6) {
    const t3 = this.view;
    if (!t3) return this._logMissingView(), null;
    let o6 = null;
    const i4 = e6.forceUniformSize, s8 = e6.centered, r12 = [t3.on("key-down", ((t4) => {
      if (t4.key === c4.pan) t4.stopPropagation(), t4.repeat || (e6.enabled = false);
      else if (t4.key === c4.complete) t4.stopPropagation(), e6.completeCreateOperation();
      else if (t4.key !== c4.vertexAdd || t4.repeat) t4.key === c4.undo ? (t4.stopPropagation(), n10.undo()) : t4.key === c4.redo ? (t4.stopPropagation(), n10.redo()) : t4.key !== c4.constraint || "rectangle" !== e6.geometryType && "circle" !== e6.geometryType || t4.repeat ? t4.key === c4.center && (t4.repeat || (e6.centered = !s8, t4.stopPropagation())) : (e6.forceUniformSize = !i4, t4.stopPropagation());
      else {
        const o7 = e6.drawOperation.geometryType;
        "polyline" !== o7 && "polygon" !== o7 && "multipoint" !== o7 || (t4.stopPropagation(), e6.drawOperation.commitStagedVertex());
      }
    }), _.WIDGET), t3.on("key-up", ((t4) => {
      t4.key === c4.pan ? e6.enabled = true : t4.key !== c4.constraint || "rectangle" !== e6.geometryType && "circle" !== e6.geometryType ? t4.key === c4.center && (e6.centered = s8, t4.stopPropagation()) : (e6.forceUniformSize = i4, t4.stopPropagation());
    }), _.WIDGET), e6.on("vertex-add", ((t4) => {
      switch (o6 = null == o6 ? "start" : "active", t4.operation) {
        case "apply":
          this.emit("create", { graphic: e6.graphic, state: o6, tool: this.activeTool, toolEventInfo: t4, type: "create" });
          break;
        case "undo":
          this._emitUndoEvent({ graphics: [e6.graphic], tool: e6.geometryType });
          break;
        case "redo":
          this._emitRedoEvent({ graphics: [e6.graphic], tool: e6.geometryType });
      }
    })), e6.on("cursor-update", ((t4) => {
      e6.drawOperation.numCommittedVertices > 0 && this.emit("create", { graphic: e6.graphic, state: "active", tool: this.activeTool, toolEventInfo: { coordinates: t4.vertices[0].coordinates, type: "cursor-update" }, type: "create" });
    })), e6.on("vertex-remove", ((t4) => {
      switch (t4.operation) {
        case "apply":
          this.emit("create", { graphic: e6.graphic, state: "active", tool: this.activeTool, toolEventInfo: t4, type: "create" });
          break;
        case "undo":
          this._emitUndoEvent({ graphics: [e6.graphic], tool: e6.geometryType });
          break;
        case "redo":
          this._emitRedoEvent({ graphics: [e6.graphic], tool: e6.geometryType });
      }
    })), e6.on("complete", ((e7) => {
      this._set("createGraphic", e7.graphic), o6 = "complete", e7.aborted ? n10 && n10.cancel() : n10 && n10.complete();
    })), l((() => this._getGraphicSymbolFromTool(e6.geometryType)), ((t4) => {
      e6.graphicSymbol = t4;
    }))], n10 = new p7({ activeComponent: e6, tool: e6.geometryType, type: "create", onEnd: () => {
      r2(r12), t3.tools?.remove(e6);
    }, undo: () => {
      e6.canUndo && e6.undo();
    }, redo: () => {
      e6.canRedo && e6.redo();
    }, canUndo: () => e6.canUndo, canRedo: () => e6.canRedo });
    return n10;
  }
  _getGraphicSymbolFromTool(e6) {
    switch (e6) {
      case "point":
      case "multipoint":
        return this.pointSymbol;
      case "polyline":
      case "freehandPolyline":
        return this.polylineSymbol;
      case "circle":
      case "rectangle":
      case "polygon":
      case "freehandPolygon":
        return this.polygonSymbol;
      case "mesh":
        return this.meshSymbol;
    }
  }
  async _setupUpdateOperation(e6, t3) {
    const { layer: o6, view: i4 } = this;
    if (!i4) return this._logMissingView(), null;
    const a8 = { ...this.defaultUpdateOptions, ...t3, reshapeOptions: { ...this.defaultUpdateOptions.reshapeOptions, ...t3?.reshapeOptions }, highlightOptions: { ...this.defaultUpdateOptions.highlightOptions, ...t3?.highlightOptions } };
    let s8 = a8.tool ?? se.tool;
    for (const r12 of e6) o6.remove(r12), o6.add(r12);
    if ("3d" === i4.type) {
      if (0 === e6.length) return null;
      switch (s8) {
        case "move":
          return this._setupMove3DOperation(e6, a8, i4, s8);
        case "reshape":
          return e6.length > 1 ? (this._logError("sketch:reshape-multiple", "Reshape operation does not support multiple graphics."), null) : this._setupReshape3DOperation(e6[0], a8, i4);
        case "transform":
          return this._setupGraphicTransform3DOperation(e6, a8, i4);
      }
    }
    switch (s8) {
      case "move":
        return this._setupMove2DOperation(e6, a8, i4);
      case "reshape":
        return e6.length > 1 ? (this._logError("sketch:reshape-multiple", "Reshape operation does not support multiple graphics."), null) : this._setupTransformOrReshape2DOperation(e6, s8, a8, i4);
      case "transform":
        if (1 === e6.length) {
          const t4 = e6[0].geometry?.type;
          "point" !== t4 && "multipoint" !== t4 || (s8 = "reshape");
        }
        return this._setupTransformOrReshape2DOperation(e6, s8, a8, i4);
    }
  }
  async _setupMove3DOperation(e6, t3, o6, i4, s8 = false) {
    const [r12, n10] = await Promise.all([this._requireModule(import("./editingTools-MFCRZSTL.js")), c8()]);
    if (ge(r12)) return r12;
    const { ManipulatedObject3DGraphic: p8, MoveTool3D: l9 } = r12.module, h8 = /* @__PURE__ */ new Map(), c9 = () => {
      h8.forEach(((e7) => e7.destroy())), h8.clear();
    };
    for (const a8 of e6) {
      const e7 = new p8({ view: o6, graphic: a8 }), t4 = r5(e7);
      if (t4 !== P.SUPPORTED) return c9(), this._logError("sketch:move", `Move operation not supported for provided graphic(s) (${E4(t4)}).`), null;
      h8.set(a8, e7);
    }
    const d9 = new l9({ view: o6, enableZ: t3.enableZ, snappingManager: this.snappingManager, sketchOptions: this.sketchOptions, autoLengthMeasurementUtils: n10 });
    o6.tools.add(d9), d9.objects.addMany(Array.from(h8.values())), s8 || this.updateGraphics.addMany(e6);
    const u7 = [], m6 = new i3({ activeComponent: d9, tool: i4, type: "update", onEnd: () => {
      r2(u7), ye(o6, d9), c9();
    }, undo: () => {
      ue(this.view, d9), he(m6, this.updateGraphics.toArray()), this._emitUndoEvent({ graphics: this.updateGraphics.toArray(), tool: i4 });
    }, redo: () => {
      ce2(m6, this.updateGraphics.toArray()), this._emitRedoEvent({ graphics: this.updateGraphics.toArray(), tool: i4 });
    }, addToSelection: (e7) => {
      this.updateGraphics.push(e7);
      const t4 = new p8({ view: o6, graphic: e7 });
      h8.set(e7, t4), d9.objects.push(t4), this.emit("update", { graphics: this.updateGraphics.toArray(), state: "active", aborted: false, tool: this.activeTool, toolEventInfo: { added: [e7], removed: [], type: "selection-change" }, type: "update" });
    }, removeFromSelection: (e7) => {
      const t4 = this.updateGraphics.indexOf(e7);
      if (m6.history.undo.forEach(((e8) => e8.updates.splice(t4, 1))), m6.history.redo.forEach(((e8) => e8.updates.splice(t4, 1))), this.updateGraphics.remove(e7), this.emit("update", { graphics: this.updateGraphics.toArray(), state: "active", aborted: false, tool: this.activeTool, toolEventInfo: { added: [], removed: [e7], type: "selection-change" }, type: "update" }), 0 === this.updateGraphics.length) return void m6.complete();
      const o7 = h8.get(e7);
      o7 && (d9.objects.remove(o7), o7.destroy(), h8.delete(e7));
    }, toggleTool: async () => {
      if (1 !== this.updateGraphics.length || false === t3.toggleToolOnClick) return;
      if ("transform" !== i4) return;
      const e7 = this.updateGraphics.at(0), a8 = await this._setupReshape3DOperation(e7, t3, o6, true);
      a8 && !ge(a8) && (m6.onEnd(), m6.destroy(), this._setUpdateOperationHandle(a8, t3));
    } });
    return u7.push(...this._getHandlesForComponent(m6, t3), o6.on("immediate-click", ((e7) => this._getCommonUpdateOperationClickHandlers(m6, e7, t3)), _.WIDGET), o6.on("key-down", ((e7) => {
      this._getCommonUpdateOperationKeyDownHandlers(m6, e7);
    }), _.WIDGET)), m6;
  }
  _setupGraphicTransform3DOperation(e6, t3, o6, i4 = false) {
    if (1 === e6.length && r10(e6[0]) === P.SUPPORTED) {
      const a8 = e6[0], s8 = a8.geometry;
      if (null != s8 && ("point" === s8.type || "mesh" === s8.type)) return this._setupPointTransform3DOperation(a8, t3, o6);
      if (null != s8 && ("polygon" === s8.type || "polyline" === s8.type)) return this._setupPolyTransform3DOperation(a8, t3, o6, i4);
    }
    return this._setupMove3DOperation(e6, t3, o6, "transform", i4);
  }
  async _setupPointTransform3DOperation(e6, t3, o6) {
    const i4 = "transform", { enableRotation: s8, enableScaling: r12, enableZ: n10 } = t3, p8 = await this._requireModule(import("./editingTools-MFCRZSTL.js"));
    if (ge(p8)) return p8;
    const { TransformTool3D: l9, ManipulatedObject3DGraphic: h8 } = p8.module, c9 = new h8({ graphic: e6, view: o6 }), d9 = new l9({ object: c9, view: o6, enableRotation: s8, enableScaling: r12, enableZ: n10, snappingManager: this.snappingManager, sketchOptions: this.sketchOptions });
    o6.tools.add(d9), this.updateGraphics.add(e6);
    const u7 = [], m6 = new i3({ activeComponent: d9, tool: i4, type: "update", onEnd: () => {
      r2(u7), ye(o6, d9), c9.destroy();
    }, undo: () => {
      ue(this.view, d9), he(m6, this.updateGraphics.toArray()), this._emitUndoEvent({ graphics: this.updateGraphics.toArray(), tool: i4 });
    }, redo: () => {
      ce2(m6, this.updateGraphics.toArray()), this._emitRedoEvent({ graphics: this.updateGraphics.toArray(), tool: i4 });
    }, addToSelection: async (e7) => {
      this.updateGraphics.add(e7), this.emit("update", { graphics: this.updateGraphics.toArray(), state: "active", aborted: false, tool: this.activeTool, toolEventInfo: { added: [e7], removed: [], type: "selection-change" }, type: "update" }), m6.onEnd(), m6.destroy();
      const i5 = await this._setupMove3DOperation(this.updateGraphics.toArray(), t3, o6, "transform", true);
      ge(i5) || this._setUpdateOperationHandle(i5, t3);
    }, removeFromSelection: (e7) => {
      this.updateGraphics.remove(e7), this.emit("update", { graphics: this.updateGraphics.toArray(), state: "active", aborted: false, tool: this.activeTool, toolEventInfo: { added: [], removed: [e7], type: "selection-change" }, type: "update" }), m6.complete();
    }, toggleTool: () => {
    } });
    return u7.push(...this._getHandlesForComponent(m6, t3), o6.on("immediate-click", ((e7) => this._getCommonUpdateOperationClickHandlers(m6, e7, t3)), _.WIDGET), o6.on("key-down", ((e7) => {
      this._getCommonUpdateOperationKeyDownHandlers(m6, e7);
    }), _.WIDGET)), m6;
  }
  async _setupPolyTransform3DOperation(e6, t3, o6, i4 = false) {
    const s8 = "transform", { enableRotation: r12, enableScaling: n10, enableZ: p8, preserveAspectRatio: l9 } = t3, [h8, c9] = await Promise.all([this._requireModule(import("./editingTools-MFCRZSTL.js")), c8()]);
    if (ge(h8)) return h8;
    const { ManipulatedObject3DGraphic: d9, ExtentTransformTool: u7 } = h8.module, m6 = this.view?.inputManager?.isModifierKeyDown(c4.constraint), y4 = new d9({ view: o6, graphic: e6 }), g7 = new u7({ object: y4, view: o6, enableRotation: r12, enableScaling: n10, enableZ: p8, preserveAspectRatio: !!l9 != !!m6, sketchOptions: this.sketchOptions, automaticLengthMeasurementUtils: c9 });
    o6.tools.add(g7), i4 || this.updateGraphics.add(e6);
    const v4 = [], f5 = new i3({ activeComponent: g7, tool: s8, type: "update", onEnd: () => {
      r2(v4), ye(o6, g7), y4.destroy();
    }, canUndo: () => !g7.destroyed && g7.canUndo, undo: () => {
      g7.destroyed || (g7.undo(), this._emitUndoEvent({ graphics: this.updateGraphics.toArray(), tool: s8 }));
    }, canRedo: () => !g7.destroyed && g7.canRedo, redo: () => {
      g7.destroyed || (g7.redo(), this._emitRedoEvent({ graphics: this.updateGraphics.toArray(), tool: s8 }));
    }, addToSelection: async (e7) => {
      this.updateGraphics.add(e7), this.emit("update", { graphics: this.updateGraphics.toArray(), state: "active", aborted: false, tool: this.activeTool, toolEventInfo: { added: [e7], removed: [], type: "selection-change" }, type: "update" }), f5.onEnd(), f5.destroy();
      const i5 = await this._setupMove3DOperation(this.updateGraphics.toArray(), t3, o6, "transform", true);
      ge(i5) || this._setUpdateOperationHandle(i5, t3);
    }, removeFromSelection: (e7) => {
      this.updateGraphics.remove(e7), this.emit("update", { graphics: this.updateGraphics.toArray(), state: "active", aborted: false, tool: this.activeTool, toolEventInfo: { added: [], removed: [e7], type: "selection-change" }, type: "update" }), f5.complete();
    }, toggleTool: async () => {
      if (1 !== this.updateGraphics.length || false === t3.toggleToolOnClick) return;
      const i5 = await this._setupReshape3DOperation(e6, t3, o6, true);
      i5 && !ge(i5) && (f5.onEnd(), f5.destroy(), this._setUpdateOperationHandle(i5, t3));
    } });
    return v4.push(...this._getHandlesForComponent(f5, t3), o6.on("immediate-click", ((e7) => this._getCommonUpdateOperationClickHandlers(f5, e7, t3)), _.WIDGET), o6.on("key-down", ((e7) => this._getCommonUpdateOperationKeyDownHandlers(f5, e7)), _.WIDGET), o6.on("key-down", ((e7) => {
      e7.key !== c4.constraint || e7.repeat || (g7.preserveAspectRatio = !g7.preserveAspectRatio, e7.stopPropagation());
    }), _.WIDGET), o6.on("key-up", ((e7) => {
      e7.key === c4.constraint && (g7.preserveAspectRatio = !g7.preserveAspectRatio, e7.stopPropagation());
    }), _.WIDGET)), f5;
  }
  async _setupMove2DOperation(e6, t3, o6) {
    const i4 = "move";
    this.updateGraphics.addMany(e6), await this._updatingHandles.addPromise(this._updateSpatialReference(e6));
    const s8 = await this._getGraphicMover(e6, t3, o6);
    if (ge(s8)) return s8;
    const r12 = new i3({ activeComponent: s8, tool: i4, type: "update", onEnd: () => {
      this._displayDefaultCursor(), r2(l9), r2(p8), s8.destroy(), this._internalGraphicsLayer?.removeMany([...this.updateGraphics.toArray()]);
    }, undo: () => {
      const e7 = this.updateGraphics.toArray();
      he(r12, e7), r12.refreshComponent(), this._emitUndoEvent({ graphics: e7, tool: i4 });
    }, redo: () => {
      const e7 = this.updateGraphics.toArray();
      ce2(r12, e7), r12.refreshComponent(), this._emitRedoEvent({ graphics: e7, tool: i4 });
    }, addToSelection: async (e7) => {
      await this._updatingHandles.addPromise(this._updateSpatialReference(e7)), this.updateGraphics.push(e7), s8.graphics = this.updateGraphics.toArray(), this.emit("update", { graphics: this.updateGraphics.toArray(), state: "active", aborted: false, tool: this.activeTool, toolEventInfo: { added: [e7], removed: [], type: "selection-change" }, type: "update" });
    }, removeFromSelection: (e7) => {
      const t4 = this.updateGraphics.indexOf(e7);
      r12.history.undo.forEach(((e8) => e8.updates.splice(t4, 1))), r12.history.redo.forEach(((e8) => e8.updates.splice(t4, 1))), this.updateGraphics.remove(e7);
      const o7 = this.updateGraphics.toArray();
      this.emit("update", { graphics: o7, state: "active", aborted: false, tool: this.activeTool, toolEventInfo: { added: [], removed: [e7], type: "selection-change" }, type: "update" }), 0 !== this.updateGraphics.length ? s8.graphics = o7 : r12.complete();
    } });
    let n10 = false;
    const p8 = [o6.on("immediate-click", ((e7) => this._getCommonUpdateOperationClickHandlers(r12, e7, t3)), _.WIDGET), o6.on("key-down", ((e7) => {
      this._getCommonUpdateOperationKeyDownHandlers(r12, e7), e7.key !== c4.constraint || e7.repeat || (n10 = true, s8.enableMoveAllGraphics = !s8.enableMoveAllGraphics);
    }), _.WIDGET), o6.on("key-up", ((e7) => {
      e7.key === c4.constraint && n10 && (n10 = false, s8.enableMoveAllGraphics = !s8.enableMoveAllGraphics);
    }), _.WIDGET)], l9 = this._getHandlesForComponent(r12, t3);
    return r12;
  }
  async _setupReshape3DOperation(e6, t3, o6, i4 = false) {
    const s8 = "reshape", [r12, n10, p8] = await Promise.all([this._requireModule(import("./editingTools-MFCRZSTL.js")), u5(), c8()]);
    if (ge(r12)) return r12;
    const { ManipulatedObject3DGraphic: l9, ReshapeTool3D: h8 } = r12.module, c9 = new l9({ view: o6, graphic: e6 }), d9 = e4(c9);
    if (d9 !== P.SUPPORTED) return c9.destroy(), this._logError("sketch:reshape", `Reshape operation not supported for provided graphic(s) (${E4(d9)}).`), null;
    const u7 = t3.reshapeOptions, m6 = new h8({ view: o6, object: c9, enableZVertex: t3.enableZ && "move" === u7?.vertexOperation, enableZShape: t3.enableZ && "move" === u7?.shapeOperation, enableMoveObject: "move" === u7?.shapeOperation || "move-xy" === u7?.shapeOperation, enableMidpoints: "split" === u7?.edgeOperation, enableEdgeOffset: "offset" === u7?.edgeOperation, snappingManager: this.snappingManager, sketchOptions: this.sketchOptions, automaticAreaMeasurementUtils: n10, automaticLengthMeasurementUtils: p8 });
    o6.tools.add(m6), i4 || this.updateGraphics.add(c9.graphic);
    const y4 = [], g7 = new i3({ activeComponent: m6, tool: s8, type: "update", onEnd: () => {
      r2(y4), ye(o6, m6), c9.destroy();
    }, canUndo: () => !m6.destroyed && m6.canUndo, undo: () => {
      m6.destroyed || (m6.undo(), this._emitUndoEvent({ graphics: this.updateGraphics.toArray(), tool: s8 }));
    }, canRedo: () => !m6.destroyed && m6.canRedo, redo: () => {
      m6.destroyed || (m6.redo(), this._emitRedoEvent({ graphics: this.updateGraphics.toArray(), tool: s8 }));
    }, addToSelection: async (e7) => {
      this.updateGraphics.add(e7), this.emit("update", { graphics: this.updateGraphics.toArray(), state: "active", aborted: false, tool: this.activeTool, toolEventInfo: { added: [e7], removed: [], type: "selection-change" }, type: "update" }), g7.onEnd(), g7.destroy();
      const i5 = await this._setupMove3DOperation(this.updateGraphics.toArray(), t3, o6, "transform", true);
      ge(i5) || this._setUpdateOperationHandle(i5, t3);
    }, removeFromSelection: (e7) => {
      this.updateGraphics.remove(e7), this.emit("update", { graphics: this.updateGraphics.toArray(), state: "active", aborted: false, tool: this.activeTool, toolEventInfo: { added: [], removed: [e7], type: "selection-change" }, type: "update" }), g7.complete();
    }, toggleTool: async () => {
      if (false === t3.toggleToolOnClick) return;
      g7.onEnd(), g7.destroy();
      const e7 = await this._setupGraphicTransform3DOperation(this.updateGraphics.toArray(), t3, o6, true);
      ge(e7) || this._setUpdateOperationHandle(e7, t3);
    } });
    return y4.push(...this._getHandlesForComponent(g7, t3), o6.on("immediate-click", ((e7) => this._getCommonUpdateOperationClickHandlers(g7, e7, t3)), _.WIDGET), o6.on("key-down", ((e7) => {
      this._getCommonUpdateOperationKeyDownHandlers(g7, e7);
    }), _.WIDGET)), g7;
  }
  async _setupTransformOrReshape2DOperation(e6, t3, o6, i4) {
    this.updateGraphics.addMany(e6), await this._updatingHandles.addPromise(this._updateSpatialReference(e6));
    const s8 = "transform" === t3 ? await this._getBox(e6, o6, i4) : await this._getReshape(e6, o6, i4);
    if (ge(s8)) return s8;
    const r12 = new i3({ activeComponent: s8, type: "update", onEnd: () => {
      r2(p8), r2(n10), r12.activeComponent && !r12.activeComponent.destroyed && r12.activeComponent.destroy(), this._internalGraphicsLayer.removeMany(this.updateGraphics.toArray());
    }, undo: () => {
      he(r12, this.updateGraphics.toArray()), r12.refreshComponent(), this._emitUndoEvent({ graphics: this.updateGraphics.toArray(), tool: r12.tool });
    }, redo: () => {
      ce2(r12, this.updateGraphics.toArray()), r12.refreshComponent(), this._emitRedoEvent({ graphics: this.updateGraphics.toArray(), tool: r12.tool });
    }, addToSelection: async (e7) => {
      let t4 = r12.activeComponent;
      if ("reshape" === t4?.type) {
        const t5 = [...this.updateGraphics, e7];
        this.updateGraphics.removeAll(), r12.onEnd(), r12.destroy();
        const a8 = await this._setupTransformOrReshape2DOperation(t5, "transform", o6, i4);
        if (ge(a8)) return;
        this._setUpdateOperationHandle(a8, o6);
      } else this.updateGraphics.add(e7), t4.graphics = this.updateGraphics.toArray(), t4.refresh(), r12.resetHistory();
      this.emit("update", { graphics: this.updateGraphics.toArray(), state: "active", aborted: false, tool: this.activeTool, toolEventInfo: { added: [e7], removed: [], type: "selection-change" }, type: "update" });
    }, removeFromSelection: async (e7) => {
      const t4 = this.updateGraphics.indexOf(e7);
      r12.history.undo.forEach(((e8) => e8.updates.splice(t4, 1))), r12.history.redo.forEach(((e8) => e8.updates.splice(t4, 1))), this.updateGraphics.remove(e7);
      const o7 = this.updateGraphics.toArray();
      if (0 === o7.length) r12.complete();
      else {
        const e8 = o7[0].geometry;
        1 !== o7.length || null == e8 || "point" !== e8.type && "multipoint" !== e8.type ? r12.activeComponent.graphics = o7 : r12.toggleTool();
      }
      this.emit("update", { graphics: o7, state: "active", aborted: false, tool: this.activeTool, toolEventInfo: { added: [], removed: [e7], type: "selection-change" }, type: "update" });
    }, toggleTool: async () => {
      if (this.updateGraphics.length > 1) return;
      const e7 = this.updateGraphics.at(0), t4 = e7.geometry;
      if (null != t4 && ("reshape" === r12.tool && ("point" === t4.type || "multipoint" === t4.type) || "transform" === r12.tool && "extent" === t4.type)) return;
      let s9 = null;
      "transform" === r12.tool ? s9 = await this._getReshape([e7], o6, i4) : "reshape" === r12.tool && (s9 = await this._getBox([e7], o6, i4)), ge(s9) || (r12.activeComponent?.destroy(), r12.activeComponent = s9, r12.activeComponent && (r2(p8), p8 = this._getHandlesForComponent(r12, o6)));
    } }), n10 = [i4.on("immediate-click", ((e7) => this._getCommonUpdateOperationClickHandlers(r12, e7, o6)), _.WIDGET), i4.on("key-down", ((e7) => {
      if (this._getCommonUpdateOperationKeyDownHandlers(r12, e7), e7.key === c4.constraint && !e7.repeat && r12) {
        const e8 = r12.activeComponent;
        e8 && "box" === e8.type && (e8.preserveAspectRatio = !e8.preserveAspectRatio);
      }
    }), _.WIDGET), i4.on("key-up", ((e7) => {
      if (e7.key === c4.constraint && r12) {
        const e8 = r12.activeComponent;
        e8 && "box" === e8.type && (e8.preserveAspectRatio = !e8.preserveAspectRatio);
      }
    }), _.WIDGET)];
    let p8 = this._getHandlesForComponent(r12, o6);
    return r12;
  }
  async _getGraphicMover(e6, t3, o6) {
    const { enableMoveAllGraphics: i4, highlightOptions: a8 } = t3, s8 = await this._requireModule(import("./GraphicMover-WQKGNDVX.js"));
    return ge(s8) ? s8 : new s8.module.default({ enableMoveAllGraphics: i4, highlightName: a8?.name, highlightsEnabled: !!a8?.enabled, indicatorsEnabled: false, graphics: e6, view: o6, callbacks: { onGraphicMoveStart: ({ dx: e7, dy: t4, graphic: o7 }) => {
      this._displayGrabbingCursor(), this.emit("update", { graphics: this.updateGraphics.toArray(), state: "active", aborted: false, tool: this.activeTool, toolEventInfo: { dx: e7, dy: t4, mover: o7, type: "move-start" }, type: "update" });
    }, onGraphicMove: ({ dx: e7, dy: t4, graphic: o7 }) => this.emit("update", { graphics: this.updateGraphics.toArray(), state: "active", aborted: false, tool: this.activeTool, toolEventInfo: { dx: e7, dy: t4, mover: o7, type: "move" }, type: "update" }), onGraphicMoveStop: ({ dx: e7, dy: t4, graphic: o7 }) => {
      this._displayPointerCursor(), this.emit("update", { graphics: this.updateGraphics.toArray(), state: "active", aborted: false, tool: this.activeTool, toolEventInfo: { dx: e7, dy: t4, mover: o7, type: "move-stop" }, type: "update" });
    }, onGraphicPointerOver: () => this._displayMoveCursor(), onGraphicPointerOut: () => this._displayDefaultCursor() } });
  }
  async _getBox(e6, t3, o6) {
    const { enableRotation: i4, enableScaling: a8, highlightOptions: s8, preserveAspectRatio: r12 } = t3, [n10, p8] = await Promise.all([this._requireModule(import("./Box-NHQQ4IDG.js")), c8()]);
    if (ge(n10)) return n10;
    const l9 = this.view?.inputManager?.isModifierKeyDown(c4.constraint);
    return new n10.module.default({ graphics: e6, enableRotation: i4, enableScaling: a8, highlightName: s8?.name, highlightsEnabled: !!s8?.enabled, preserveAspectRatio: !!r12 != !!l9, layer: this._internalGraphicsLayer, view: o6, sketchOptions: this.sketchOptions, automaticLengthMeasurementUtils: p8, callbacks: { onMoveStart: (e7) => this.emit("update", { graphics: this.updateGraphics.toArray(), state: "active", aborted: false, tool: this.activeTool, toolEventInfo: { ...e7 }, type: "update" }), onMove: (e7) => this.emit("update", { graphics: this.updateGraphics.toArray(), state: "active", aborted: false, tool: this.activeTool, toolEventInfo: { ...e7 }, type: "update" }), onMoveStop: (e7) => this.emit("update", { graphics: this.updateGraphics.toArray(), state: "active", aborted: false, tool: this.activeTool, toolEventInfo: { ...e7 }, type: "update" }), onScaleStart: (e7) => this.emit("update", { graphics: this.updateGraphics.toArray(), state: "active", aborted: false, tool: this.activeTool, toolEventInfo: { ...e7 }, type: "update" }), onScale: (e7) => this.emit("update", { graphics: this.updateGraphics.toArray(), state: "active", aborted: false, tool: this.activeTool, toolEventInfo: { ...e7 }, type: "update" }), onScaleStop: (e7) => this.emit("update", { graphics: this.updateGraphics.toArray(), state: "active", aborted: false, tool: this.activeTool, toolEventInfo: { ...e7 }, type: "update" }), onRotateStart: (e7) => this.emit("update", { graphics: this.updateGraphics.toArray(), state: "active", aborted: false, tool: this.activeTool, toolEventInfo: { ...e7 }, type: "update" }), onRotate: (e7) => this.emit("update", { graphics: this.updateGraphics.toArray(), state: "active", aborted: false, tool: this.activeTool, toolEventInfo: { ...e7 }, type: "update" }), onRotateStop: (e7) => this.emit("update", { graphics: this.updateGraphics.toArray(), state: "active", aborted: false, tool: this.activeTool, toolEventInfo: { ...e7 }, type: "update" }) } });
  }
  async _getReshape(e6, t3, o6) {
    const { highlightOptions: i4, reshapeOptions: a8 } = t3, s8 = "split" === a8?.edgeOperation, r12 = "move" === a8?.shapeOperation, [n10, p8, l9] = await Promise.all([this._requireModule(import("./Reshape-4ZEDQMUQ.js")), u5(), c8()]);
    return ge(n10) ? n10 : new n10.module.default({ enableMidpoints: s8, enableMovement: r12, graphic: e6[0], highlightName: i4?.name, highlightsEnabled: !!i4?.enabled, layer: this._internalGraphicsLayer, snappingManager: this.snappingManager, sketchOptions: this.sketchOptions, automaticAreaMeasurementUtils: p8, automaticLengthMeasurementUtils: l9, view: o6, callbacks: { onReshapeStart: (e7) => this.emit("update", { graphics: this.updateGraphics.toArray(), state: "active", aborted: false, tool: this.activeTool, toolEventInfo: { ...e7 }, type: "update" }), onReshape: (e7) => this.emit("update", { graphics: this.updateGraphics.toArray(), state: "active", aborted: false, tool: this.activeTool, toolEventInfo: { ...e7 }, type: "update" }), onReshapeStop: ({ mover: e7, type: t4 }) => this.emit("update", { graphics: this.updateGraphics.toArray(), state: "active", aborted: false, tool: this.activeTool, toolEventInfo: { mover: e7, type: t4 }, type: "update" }), onMoveStart: ({ dx: e7, dy: t4, mover: o7, type: i5 }) => this.emit("update", { graphics: this.updateGraphics.toArray(), state: "active", aborted: false, tool: this.activeTool, toolEventInfo: { dx: e7, dy: t4, mover: o7, type: i5 }, type: "update" }), onMove: ({ dx: e7, dy: t4, mover: o7, type: i5 }) => this.emit("update", { graphics: this.updateGraphics.toArray(), state: "active", aborted: false, tool: this.activeTool, toolEventInfo: { dx: e7, dy: t4, mover: o7, type: i5 }, type: "update" }), onMoveStop: ({ dx: e7, dy: t4, mover: o7, type: i5 }) => this.emit("update", { graphics: this.updateGraphics.toArray(), state: "active", aborted: false, tool: this.activeTool, toolEventInfo: { dx: e7, dy: t4, mover: o7, type: i5 }, type: "update" }), onVertexAdd: ({ added: e7, type: t4, vertices: o7 }) => {
      const i5 = e7.map(((e8) => e2(e8.geometry)));
      this.emit("update", { graphics: this.updateGraphics.toArray(), state: "active", aborted: false, tool: this.activeTool, toolEventInfo: { added: i5, vertices: o7, type: t4 }, type: "update" });
    }, onVertexRemove: ({ removed: e7, type: t4, vertices: o7 }) => {
      const i5 = e7.map(((e8) => e2(e8.geometry)));
      this.emit("update", { graphics: this.updateGraphics.toArray(), state: "active", aborted: false, tool: this.activeTool, toolEventInfo: { removed: i5, vertices: o7, type: t4 }, type: "update" });
    } } });
  }
  _getHandlesForComponent(e6, t3) {
    const o6 = e6.activeComponent;
    if (!o6) return [];
    switch (o6.type) {
      case "graphic-mover":
        return [o6.on("graphic-click", (({ graphic: o7, viewEvent: i4 }) => {
          i4.native?.shiftKey && t3.multipleSelectionEnabled && (i4.stopPropagation(), e6.removeFromSelection(o7));
        })), o6.on("graphic-move-start", ((t4) => e6.addToHistory(me(t4.allGraphics))))];
      case "box":
        return [o6.on("graphic-click", ((o7) => this._onTransformOrReshape2DGraphicClick(e6, t3, o7))), o6.on("move-start", ((t4) => e6.addToHistory(me(t4.graphics)))), o6.on("rotate-start", ((t4) => e6.addToHistory(me(t4.graphics)))), o6.on("scale-start", ((t4) => e6.addToHistory(me(t4.graphics))))];
      case "reshape":
        return [o6.on("graphic-click", ((o7) => this._onTransformOrReshape2DGraphicClick(e6, t3, o7))), o6.on("move-start", ((t4) => e6.addToHistory(me([t4.mover])))), o6.on("reshape-start", ((t4) => e6.addToHistory(me([t4.graphic])))), o6.on("vertex-add", ((t4) => e6.addToHistory(me([t4.oldGraphic])))), o6.on("vertex-remove", ((t4) => e6.addToHistory(me([t4.oldGraphic]))))];
      case "move-3d":
        return [o6.events.on("record-undo", (({ updates: t4 }) => {
          e6.addToHistory({ updates: t4 });
        })), o6.events.on("move-start", ((e7) => {
          this.emit("update", { graphics: this.updateGraphics.toArray(), state: "active", aborted: false, tool: this.activeTool, toolEventInfo: { dx: 0, dy: 0, mover: e7.objects.length > 0 ? e7.objects[0].graphic : null, type: "move-start" }, type: "update" });
        })), o6.events.on("move", ((e7) => {
          this.emit("update", { graphics: this.updateGraphics.toArray(), state: "active", aborted: false, tool: this.activeTool, toolEventInfo: { dx: e7.dx, dy: e7.dy, mover: e7.objects.length > 0 ? e7.objects[0].graphic : null, type: "move" }, type: "update" });
        })), o6.events.on("move-stop", ((e7) => {
          this.emit("update", { graphics: this.updateGraphics.toArray(), state: "active", aborted: false, tool: this.activeTool, toolEventInfo: { dx: 0, dy: 0, mover: e7.objects.length > 0 ? e7.objects[0].graphic : null, type: "move-stop" }, type: "update" });
        })), o6.events.on("immediate-click", ((o7) => {
          o7.shiftKey ? this._toggleSelection([o7.object.graphic], e6, t3) : e6.toggleTool();
        }))];
      case "transform-3d":
        return [o6.events.on("record-undo", (({ updates: t4 }) => {
          e6.addToHistory({ updates: t4 });
        })), o6.events.on("translate-start", ((e7) => {
          this.emit("update", { graphics: this.updateGraphics.toArray(), state: "active", aborted: false, tool: this.activeTool, toolEventInfo: { mover: e7.object.graphic, dx: e7.dxScreen, dy: e7.dyScreen, type: "move-start" }, type: "update" });
        })), o6.events.on("translate-stop", ((e7) => {
          this.emit("update", { graphics: this.updateGraphics.toArray(), state: "active", aborted: false, tool: this.activeTool, toolEventInfo: { mover: e7.object.graphic, dx: e7.dxScreen, dy: e7.dyScreen, type: "move-stop" }, type: "update" });
        })), o6.events.on("rotate-start", ((e7) => {
          this.emit("update", { graphics: this.updateGraphics.toArray(), state: "active", aborted: false, tool: this.activeTool, toolEventInfo: { mover: e7.object.graphic, angle: e7.angle, type: "rotate-start" }, type: "update" });
        })), o6.events.on("rotate-stop", ((e7) => {
          this.emit("update", { graphics: this.updateGraphics.toArray(), state: "active", aborted: false, tool: this.activeTool, toolEventInfo: { mover: e7.object.graphic, angle: e7.angle, type: "rotate-stop" }, type: "update" });
        })), o6.events.on("scale-start", ((e7) => {
          this.emit("update", { graphics: this.updateGraphics.toArray(), state: "active", aborted: false, tool: this.activeTool, toolEventInfo: { mover: e7.object.graphic, xScale: e7.xScale, yScale: e7.yScale, type: "scale-start" }, type: "update" });
        })), o6.events.on("scale-stop", ((e7) => {
          this.emit("update", { graphics: this.updateGraphics.toArray(), state: "active", aborted: false, tool: this.activeTool, toolEventInfo: { mover: e7.object.graphic, xScale: e7.xScale, yScale: e7.yScale, type: "scale-stop" }, type: "update" });
        })), o6.events.on("translate", ((e7) => {
          this.emit("update", { graphics: this.updateGraphics.toArray(), state: "active", aborted: false, tool: this.activeTool, toolEventInfo: { mover: e7.object.graphic, dx: e7.dxScreen, dy: e7.dyScreen, type: "move" }, type: "update" });
        })), o6.events.on("rotate", ((e7) => {
          this.emit("update", { graphics: this.updateGraphics.toArray(), state: "active", aborted: false, tool: this.activeTool, toolEventInfo: { mover: e7.object.graphic, angle: e7.angle, type: "rotate" }, type: "update" });
        })), o6.events.on("scale", ((e7) => {
          this.emit("update", { graphics: this.updateGraphics.toArray(), state: "active", aborted: false, tool: this.activeTool, toolEventInfo: { mover: e7.object.graphic, xScale: e7.xScale, yScale: e7.yScale, type: "scale" }, type: "update" });
        })), o6.events.on("immediate-click", ((o7) => {
          o7.shiftKey ? this._toggleSelection([o7.object.graphic], e6, t3) : e6.toggleTool();
        }))];
      case "reshape-3d":
        return [o6.events.on("reshape", ((e7) => {
          this.emit("update", { graphics: this.updateGraphics.toArray(), state: "active", aborted: false, tool: this.activeTool, toolEventInfo: { ...e7, mover: e7.object.graphic }, type: "update" });
        })), o6.events.on("move", ((e7) => {
          this.emit("update", { graphics: this.updateGraphics.toArray(), state: "active", aborted: false, tool: this.activeTool, toolEventInfo: { ...e7, mover: e7.object.graphic }, type: "update" });
        })), o6.events.on("vertex-add", ((e7) => {
          this.emit("update", { graphics: this.updateGraphics.toArray(), state: "active", aborted: false, tool: this.activeTool, toolEventInfo: e7, type: "update" });
        })), o6.events.on("vertex-remove", ((e7) => {
          this.emit("update", { graphics: this.updateGraphics.toArray(), state: "active", aborted: false, tool: this.activeTool, toolEventInfo: e7, type: "update" });
        })), o6.events.on("immediate-click", ((o7) => {
          o7.shiftKey ? this._toggleSelection([o7.object.graphic], e6, t3) : e6.toggleTool();
        }))];
    }
  }
  _onTransformOrReshape2DGraphicClick(e6, t3, o6) {
    const { graphic: i4, viewEvent: a8 } = o6;
    return a8.native?.shiftKey && i4.layer === this.layer ? (a8.stopPropagation(), e6.removeFromSelection(i4)) : t3.toggleToolOnClick ? (a8.stopPropagation(), e6.toggleTool()) : void 0;
  }
  _setUpdateOperationHandle(e6, t3) {
    this._operationHandle = e6;
    const o6 = this.view?.map;
    this._disablePopup(t3);
    const i4 = () => {
      if (e6 === this._operationHandle) {
        const i5 = this.updateGraphics.toArray(), a8 = this._operationHandle.tool;
        this._operationHandle.destroy(), this._operationHandle = null, this._internalGraphicsLayer.removeMany(this.updateGraphics.toArray()), this.updateGraphics.removeAll(), o6 && o6.remove(this._internalGraphicsLayer), this._restorePopup(t3), this.emit("update", { graphics: i5, state: "complete", aborted: e6.cancelled, tool: a8, toolEventInfo: null, type: "update" });
      }
    };
    e6.on("complete", i4);
  }
  async _getCommonUpdateOperationClickHandlers(e6, t3, o6) {
    const i4 = n4(t3), a8 = await t3.defer((() => this._getFirstHit(i4)));
    if (null == a8) return void e6.complete();
    if (t3.native.shiftKey && this._toggleSelection([a8.graphic], e6, o6)) return void t3.stopPropagation();
    this.updateGraphics.includes(a8.graphic) ? t3.stopPropagation() : e6.complete();
  }
  _toggleSelection(e6, t3, o6) {
    const i4 = !!o6.multipleSelectionEnabled;
    return e6.some(((e7) => null != e7 && (!(!i4 || e7.layer !== this.layer) && (this.updateGraphics.includes(e7) ? t3.removeFromSelection(e7) : t3.addToSelection(e7), true))));
  }
  _getCommonUpdateOperationKeyDownHandlers(e6, t3) {
    if (!e6) return;
    const o6 = t3.key;
    o6 === c4.undo && e6.canUndo() ? (t3.stopPropagation(), e6.undo()) : o6 === c4.redo && e6.canRedo() ? (t3.stopPropagation(), e6.redo()) : o6 === c4.cancel ? (t3.stopPropagation(), e6.cancel()) : this.allowDeleteKey && c4.delete.includes(o6) && this._onDeleteKey(t3);
  }
  _onDeleteKey(e6) {
    if (!this._operationHandle || "update" !== this._operationHandle.type) return;
    const t3 = this.activeComponent, o6 = this.updateGraphics.toArray();
    null != t3 && ("reshape" !== t3.type || 1 === o6.length && "point" === o6[0].geometry?.type) && (e6.stopPropagation(), this.delete());
  }
  _removeDefaultLayer() {
    this._internalGraphicsLayer && (this.view?.map?.remove(this._internalGraphicsLayer), this._internalGraphicsLayer = u(this._internalGraphicsLayer));
  }
  _isComponentGraphic(e6) {
    const { activeComponent: t3 } = this;
    return !(!e6 || null == t3) && (e6.attributes?.esriSketchTool || "draw-2d" === t3.type && t3.graphic === e6 || ("box" === t3.type || "reshape" === t3.type) && t3.isUIGraphic(e6));
  }
  _displayPointerCursor() {
    this.view?.container && "pointer" !== this.view.cursor && (this.view.cursor = "pointer");
  }
  _displayGrabbingCursor() {
    this.view?.container && "grabbing" !== this.view.cursor && (this.view.cursor = "grabbing");
  }
  _displayMoveCursor() {
    this.view?.container && "move" !== this.view.cursor && (this.view.cursor = "move");
  }
  _displayDefaultCursor() {
    this.view?.container && null !== this.view.cursor && (this.view.cursor = null);
  }
  _logError(e6, t3, i4) {
    i.getLogger(this).error(new s(e6, t3, i4));
  }
  async _requireModule(e6) {
    const t3 = new AbortController();
    this._moduleLoaderAbortController = t3;
    const o6 = await e6;
    return this._moduleLoaderAbortController !== t3 || t3.signal.aborted ? { requireError: "aborted" } : { module: o6 };
  }
  _emitUndoEvent(e6) {
    this.emit("undo", { ...e6, type: "undo" });
  }
  _emitRedoEvent(e6) {
    this.emit("redo", { ...e6, type: "redo" });
  }
  _emitDeleteEvent(e6) {
    this.emit("delete", { ...e6, type: "delete" });
  }
  get test() {
  }
  wait() {
    return j((() => !this.updating));
  }
  _disablePopupEnabled(e6) {
    return "3d" !== this.view?.type || this.updateOnGraphicClick || (e6?.toggleToolOnClick ?? false);
  }
  _disablePopup(e6) {
    this._disablePopupEnabled(e6) && this.view && null == this._originalPopupEnabled && (this._originalPopupEnabled = this.view.popupEnabled, this.view.popupEnabled = false);
  }
  _restorePopup(e6) {
    this._disablePopupEnabled(e6) && this.view && null != this._originalPopupEnabled && (this.view.popupEnabled = this._originalPopupEnabled, this._originalPopupEnabled = null);
  }
  async _waitViewReady() {
    const e6 = this.view;
    e6 ? (e(this._viewReadyAbortController), this._viewReadyAbortController = new AbortController(), await h(j((() => e6?.ready)), this._viewReadyAbortController.signal)) : this._logMissingView();
  }
  _logMissingView() {
    this._logError("sketch:missing-property", pe("view"));
  }
  _logMissingLayer() {
    this._logError(ne, pe("layer"));
  }
};
r([m()], re.prototype, "_defaultSnappingManager", void 0), r([m()], re.prototype, "updating", null), r([m({ readOnly: true })], re.prototype, "_updatingHandles", void 0), r([m()], re.prototype, "_operationHandle", void 0), r([m({ readOnly: true })], re.prototype, "activeTool", null), r([m({ readOnly: true })], re.prototype, "activeCreateToolDrawMode", null), r([m()], re.prototype, "activeTooltip", null), r([m({ types: x })], re.prototype, "activeFillSymbol", void 0), r([m()], re.prototype, "activeLineSymbol", void 0), r([m()], re.prototype, "activeVertexSymbol", void 0), r([m()], re.prototype, "allowDeleteKey", void 0), r([m({ readOnly: true })], re.prototype, "createGraphic", null), r([m()], re.prototype, "defaultCreateOptions", null), r([m()], re.prototype, "defaultUpdateOptions", null), r([m({ type: c6, nonNullable: true })], re.prototype, "labelOptions", null), r([m()], re.prototype, "layer", void 0), r([m({ types: x })], re.prototype, "pointSymbol", void 0), r([m({ types: x })], re.prototype, "polygonSymbol", void 0), r([m({ types: x })], re.prototype, "polylineSymbol", void 0), r([m()], re.prototype, "meshSymbol", void 0), r([m({ type: u4, nonNullable: true })], re.prototype, "snappingOptions", null), r([m()], re.prototype, "snappingManager", null), r([m({ readOnly: true })], re.prototype, "state", null), r([m({ type: r3, nonNullable: true })], re.prototype, "tooltipOptions", null), r([m({ readOnly: true })], re.prototype, "updateGraphics", void 0), r([m()], re.prototype, "updateOnGraphicClick", void 0), r([m()], re.prototype, "creationMode", void 0), r([m({ type: l6, nonNullable: true })], re.prototype, "valueOptions", null), r([m({ types: x })], re.prototype, "vertexSymbol", void 0), r([m({ value: null })], re.prototype, "view", null), r([m({ constructOnly: true, type: l7 })], re.prototype, "sketchOptions", void 0), re = r([a("esri.widgets.Sketch.SketchViewModel")], re);
var ne = "sketch:missing-property";
var pe = (e6) => `Property '${e6}' is missing on SketchViewModel.`;
function le(e6) {
  return "polygon" === e6 || "rectangle" === e6 || "circle" === e6;
}
function he(e6, t3) {
  de("undo", e6.history.undo, e6.history.redo, t3);
}
function ce2(e6, t3) {
  de("redo", e6.history.redo, e6.history.undo, t3);
}
function de(e6, t3, o6, i4) {
  const a8 = t3.pop();
  if (!a8) return;
  const s8 = a8.updates, r12 = [];
  i4.forEach(((t4, o7) => {
    const i5 = s8[o7];
    null != i5 && ("geometry" in i5 && null != i5.geometry && (r12.push({ geometry: t4.geometry }), t4.geometry = i5.geometry), "symbol" in i5 && null != i5.symbol && (r12.push({ symbol: t4.symbol }), t4.symbol = i5.symbol), "undo" in i5 && (r12.push(i5), i5[e6](t4)));
  })), o6.push({ updates: r12 });
}
function ue(e6, t3) {
  null != e6 && t3.hasGrabbedManipulators && (e6.activeTool = null);
}
function me(e6) {
  return { updates: e6.map((({ geometry: e7 }) => "mesh" === e7?.type ? { geometry: e7.cloneShallow() } : { geometry: e7 })) };
}
function ye(e6, t3) {
  e6.tools?.remove(t3), t3.destroyed || t3.destroy();
}
function ge(e6) {
  return "requireError" in e6 && "aborted" === e6.requireError;
}

// node_modules/@arcgis/core/views/2d/layers/support/RouteLayerInteraction.js
function g6(e6, r12) {
  e6.networkFeature = r12;
}
function u6(e6) {
  const r12 = w4(e6.graphic);
  return { ...e6, networkFeature: r12 };
}
function b5(e6) {
  const r12 = e6.graphics.map(((e7) => w4(e7)));
  return { ...e6, networkFeatures: r12 };
}
function w4(e6) {
  return e6.networkFeature;
}
function k4(e6) {
  return "point" === e6?.type || "polyline" === e6?.type || "polygon" === e6?.type;
}
var _2 = class extends b {
  constructor(e6) {
    super(e6), this._createMode = null, this._graphicsLayer = new c3({ internal: true, listMode: "hide", title: "Banana" }), this._updatingHandles = new h3(), this.enabled = true, this._handleSketchViewModelEvents = async (e7) => {
      switch (e7.type) {
        case "update":
          switch (e7.state) {
            case "active":
            case "complete":
              for (const r12 of e7.graphics) {
                w4(r12).geometry = k4(r12.geometry) ? r12.geometry.clone() : null;
              }
          }
          break;
        case "undo":
        case "redo":
          break;
        case "delete":
          for (const r12 of e7.graphics) {
            const e8 = w4(r12);
            this._removeNetworkFeature(e8);
          }
          break;
        case "create":
          if (e7.graphic && "complete" === e7.state && this._createMode) {
            const r12 = e7.graphic.geometry?.clone(), t3 = e7.graphic.symbol?.clone();
            if (!r12) break;
            switch (this._createMode) {
              case "stop": {
                if ("point" !== r12.type) break;
                const { stops: t4 } = this.layer;
                if (t4.length > 0 && t4.every((({ geometry: e8 }) => !e8))) {
                  t4.at(0).geometry = r12;
                  break;
                }
                if (t4.length > 1 && t4.filter(((e8, r13) => 0 !== r13)).every((({ geometry: e8 }) => !e8))) {
                  t4.at(1).geometry = r12;
                  break;
                }
                const o6 = new S2({ geometry: r12 });
                t4.add(o6), g6(e7.graphic, o6);
                break;
              }
              case "point-barrier": {
                if ("point" !== r12.type) break;
                const o6 = new S({ geometry: r12, symbol: t3 });
                this.layer.pointBarriers.add(o6), g6(e7.graphic, o6);
                break;
              }
              case "polyline-barrier": {
                if ("polyline" !== r12.type) break;
                const o6 = new d5({ geometry: r12, symbol: t3 });
                this.layer.polylineBarriers.add(o6), g6(e7.graphic, o6);
                break;
              }
              case "polygon-barrier": {
                if ("polygon" !== r12.type) break;
                const o6 = new h4({ geometry: r12, symbol: t3 });
                this.layer.polygonBarriers.add(o6), g6(e7.graphic, o6);
                break;
              }
            }
          }
      }
      (await this.view.whenLayerView(this.layer)).emit(e7.type, "create" === e7.type ? u6(e7) : b5(e7));
    };
  }
  initialize() {
    this._sketchViewModel = new re({ layer: this._graphicsLayer, view: this.view }), this.addHandles([l((() => this.enabled), ((e6) => {
      e6 ? this._activate() : this._deactivate();
    }), h2), l((() => {
      const { stops: e6, pointBarriers: r12, polylineBarriers: t3, polygonBarriers: o6 } = this.layer;
      return { stops: e6, pointBarriers: r12, polylineBarriers: t3, polygonBarriers: o6 };
    }), (() => {
      this.enabled && this._loadClonedGraphics();
    })), this._sketchViewModel.on(["create", "delete", "redo", "undo", "update"], this._handleSketchViewModelEvents), c(this._updatingHandles)]);
  }
  destroy() {
    this.view.map.remove(this._graphicsLayer), this._graphicsLayer.removeAll(), this._graphicsLayer = u(this._graphicsLayer), this._sketchViewModel = u(this._sketchViewModel);
  }
  get selectedNetworkFeatures() {
    return this._sketchViewModel.updateGraphics.map(((e6) => w4(e6)));
  }
  get updating() {
    return this._updatingHandles.updating;
  }
  create(e6) {
    switch (this._createMode = e6, e6) {
      case "stop":
        this.layer.defaultSymbols.stops?.unlocated && (this._sketchViewModel.pointSymbol = this.layer.defaultSymbols.stops.unlocated.clone());
        break;
      case "point-barrier":
        this.layer.defaultSymbols.pointBarriers && (this._sketchViewModel.pointSymbol = this.layer.defaultSymbols.pointBarriers.clone());
        break;
      case "polyline-barrier":
        this.layer.defaultSymbols.polylineBarriers && (this._sketchViewModel.polylineSymbol = this.layer.defaultSymbols.polylineBarriers.clone());
        break;
      case "polygon-barrier":
        this.layer.defaultSymbols.polygonBarriers && (this._sketchViewModel.polygonSymbol = this.layer.defaultSymbols.polygonBarriers.clone());
    }
    switch (e6) {
      case "stop":
      case "point-barrier":
        return this._sketchViewModel.create("point");
      case "polyline-barrier":
        return this._sketchViewModel.create("polyline");
      case "polygon-barrier":
        return this._sketchViewModel.create("polygon");
    }
  }
  remove(e6) {
    const r12 = this._graphicsLayer.graphics.find(((r13) => w4(r13) === e6));
    r12 && this._graphicsLayer.remove(r12), this._removeNetworkFeature(e6);
  }
  _activate() {
    this._loadClonedGraphics(), this.view.map.add(this._graphicsLayer);
  }
  _deactivate() {
    this._sketchViewModel.cancel(), this.view.map?.remove(this._graphicsLayer), this._graphicsLayer.removeAll();
  }
  _loadClonedGraphics() {
    const e6 = [this.layer.stops, this.layer.pointBarriers, this.layer.polylineBarriers, this.layer.polygonBarriers].flatMap(((e7) => e7.toArray().map(((e8) => {
      const r12 = e8.toGraphic();
      return r12.networkFeature = e8, r12;
    }))));
    this._graphicsLayer.removeAll().addMany(e6);
  }
  _removeNetworkFeature(e6) {
    switch (e6.type) {
      case "stop":
        this.layer.stops.remove(e6);
        break;
      case "point-barrier":
        this.layer.pointBarriers.remove(e6);
        break;
      case "polyline-barrier":
        this.layer.polylineBarriers.remove(e6);
        break;
      case "polygon-barrier":
        this.layer.polygonBarriers.remove(e6);
    }
  }
};
r([m()], _2.prototype, "enabled", void 0), r([m({ constructOnly: true })], _2.prototype, "layer", void 0), r([m({ readOnly: true })], _2.prototype, "selectedNetworkFeatures", null), r([m()], _2.prototype, "updating", null), r([m({ constructOnly: true })], _2.prototype, "view", void 0), _2 = r([a("esri.views.2d.layers.support.RouteLayerInteraction")], _2);
export {
  _2 as RouteLayerInteraction
};
//# sourceMappingURL=RouteLayerInteraction-HA4TSRKE.js.map
