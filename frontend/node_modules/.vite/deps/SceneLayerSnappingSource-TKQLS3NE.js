import {
  r as r3
} from "./chunk-MLBT5NSF.js";
import {
  r as r2
} from "./chunk-BAO6UHB5.js";
import "./chunk-CRVQAW6F.js";
import "./chunk-3KDNHMA3.js";
import "./chunk-ONUQSGEP.js";
import {
  a as a3,
  p
} from "./chunk-37USNU2Q.js";
import "./chunk-YERTKO74.js";
import "./chunk-WHNSSW5C.js";
import {
  h as h2
} from "./chunk-46WHDHNN.js";
import "./chunk-RHVCSVQD.js";
import {
  V
} from "./chunk-HUR2TTV7.js";
import "./chunk-DPEZN2CZ.js";
import "./chunk-6T6LJGGM.js";
import "./chunk-HPADPQJ7.js";
import {
  t
} from "./chunk-NG35MVZG.js";
import {
  f
} from "./chunk-GCDC4JWP.js";
import "./chunk-47WYYSNQ.js";
import "./chunk-P6ZW35HL.js";
import "./chunk-G2CGFQQR.js";
import "./chunk-ULRXIASY.js";
import "./chunk-X7XYZI46.js";
import "./chunk-X5BGX2UZ.js";
import "./chunk-IQIGYB5K.js";
import "./chunk-3JKWT76Y.js";
import "./chunk-LOLNWH3R.js";
import "./chunk-T4WPBSSK.js";
import "./chunk-7Q65H3HK.js";
import "./chunk-FBGZNF2J.js";
import "./chunk-VJKKOB5K.js";
import "./chunk-3ZX4Y274.js";
import "./chunk-WX3VZIBK.js";
import "./chunk-A2AZM62Y.js";
import {
  h
} from "./chunk-FPALEK52.js";
import "./chunk-2RL34CVC.js";
import "./chunk-BNQMKYX6.js";
import "./chunk-B6C2GOG6.js";
import "./chunk-K3VYMAVM.js";
import "./chunk-P5DG4SNT.js";
import "./chunk-2CDQ56FJ.js";
import "./chunk-3YHKSRHV.js";
import "./chunk-ZBTRSUIE.js";
import "./chunk-D6GGPM6D.js";
import "./chunk-U2JVYDTA.js";
import "./chunk-HH4Q2NN5.js";
import "./chunk-3CFYBBSV.js";
import "./chunk-AACFCXAP.js";
import "./chunk-RZGBA4KS.js";
import "./chunk-SCMB64VM.js";
import "./chunk-APMQAZ5Z.js";
import "./chunk-LNLFY27J.js";
import "./chunk-P4O4YCLI.js";
import "./chunk-MSSQA3XK.js";
import "./chunk-LIWGRYNH.js";
import "./chunk-CAQUPYHC.js";
import "./chunk-UZ3YWBWC.js";
import "./chunk-2EOHKZLO.js";
import "./chunk-3M6ALZOH.js";
import "./chunk-QPV4BKBC.js";
import "./chunk-BPI4BR4E.js";
import "./chunk-UMUW6RKM.js";
import "./chunk-XRTNDGK2.js";
import "./chunk-H6ZVHKNF.js";
import "./chunk-YAXW2DL6.js";
import "./chunk-62NATJWT.js";
import "./chunk-CBCDVQSA.js";
import {
  n
} from "./chunk-RKF6WUZT.js";
import "./chunk-RMRI4NYS.js";
import "./chunk-YYLIW24Q.js";
import "./chunk-B7BH33JH.js";
import "./chunk-BLBN3L5Q.js";
import "./chunk-ZJQPHR3K.js";
import "./chunk-HYAO4PVV.js";
import "./chunk-SRNKPAJX.js";
import "./chunk-MOMLPET6.js";
import "./chunk-3QHX4R4B.js";
import "./chunk-SDIBXPSJ.js";
import "./chunk-CBXZL53X.js";
import "./chunk-LPCUYJ2B.js";
import "./chunk-SMO33YG7.js";
import "./chunk-LCBAL6ER.js";
import "./chunk-6JCZVSRM.js";
import "./chunk-LLGOMKTE.js";
import "./chunk-ZB6KRLRI.js";
import "./chunk-67AKDROO.js";
import "./chunk-CM3TIXEV.js";
import "./chunk-POWGZO3T.js";
import "./chunk-OUZJZB6I.js";
import "./chunk-NJZD7WM5.js";
import "./chunk-CL7VLXUR.js";
import "./chunk-FCX4ZA3Z.js";
import {
  b,
  m2
} from "./chunk-2ZPU5IZX.js";
import {
  a2
} from "./chunk-S62CSPIH.js";
import "./chunk-X26VPODZ.js";
import "./chunk-XNYPRDKK.js";
import {
  r
} from "./chunk-Y4BWIIWH.js";
import "./chunk-TTJIKWMC.js";
import "./chunk-CMEG2CKL.js";
import "./chunk-VHPBXBDE.js";
import "./chunk-6ACTD4UJ.js";
import "./chunk-5REYU5G2.js";
import "./chunk-JNYZ3I5R.js";
import {
  c,
  c3 as c2,
  e2 as e,
  l2 as l,
  s
} from "./chunk-N626Y23H.js";
import "./chunk-TJPLHZCD.js";
import {
  L,
  a,
  m2 as m
} from "./chunk-KLFJ5V5G.js";
import "./chunk-G26ADAPQ.js";

// node_modules/@arcgis/core/views/3d/webgl-engine/lib/edgeRendering/EdgeWorkerHandle.js
var a4 = class extends h2 {
  constructor(e2) {
    super("EdgeProcessingWorker", "extract", { extract: (e3) => [e3.dataBuffer], extractComponentsEdgeLocations: (e3) => [e3.dataBuffer], extractEdgeLocations: (e3) => [e3.dataBuffer] }, e2);
  }
  async process(e2, t2, r4) {
    if (r4) return f(e2);
    return i(await this.invoke(new o(e2), t2));
  }
  async extractEdgeLocations(e2, t2) {
    const r4 = await this.invokeMethod("extractEdgeLocations", new o(e2), t2);
    return t(r4);
  }
  async extractComponentsEdgeLocations(e2, t2) {
    const r4 = await this.invokeMethod("extractComponentsEdgeLocations", new o(e2), t2);
    return t(r4);
  }
};
function i(e2) {
  return { regular: { instancesData: t(e2.regular.instancesData), lodInfo: { lengths: new Float32Array(e2.regular.lodInfo.lengths) } }, silhouette: { instancesData: t(e2.silhouette.instancesData), lodInfo: { lengths: new Float32Array(e2.silhouette.lodInfo.lengths) } }, averageEdgeLength: e2.averageEdgeLength };
}
var o = class {
  constructor(r4) {
    this.dataBuffer = r4.data.buffer, this.writerSettings = r4.writerSettings, this.skipDeduplicate = r4.skipDeduplicate, this.indices = m(r4.indices) ? r4.indices.buffer : r4.indices, this.indicesType = m(r4.indices) ? a(r4.indices) ? "Uint32Array" : "Uint16Array" : "Array", this.indicesLength = r4.indicesLength;
  }
};

// node_modules/@arcgis/core/views/interactive/snapping/featureSources/sceneLayerSource/SceneLayerSnappingSourceWorkerHandle.js
var l2 = class extends b {
  constructor(e2) {
    super(e2), this.availability = 0, this._ids = /* @__PURE__ */ new Set();
  }
  destroy() {
    this._workerHandle.destroy(), this._workerHandle = null;
  }
  initialize() {
    this._workerHandle = new h3(this.schedule, { fetchAllEdgeLocations: (e2, t2) => this._fetchAllEdgeLocations(e2, t2) });
  }
  async fetchCandidates(e2, t2) {
    const r4 = e2.coordinateHelper, { point: o2 } = e2, s2 = u;
    this.renderCoordsHelper.toRenderCoords(o2, r4.spatialReference, s2);
    const n2 = e2.distance, a5 = "number" == typeof n2 ? n2 : n2.distance, d = await this._workerHandle.invoke({ bounds: V(s2[0], s2[1], s2[2], a5), returnEdge: e2.returnEdge, returnVertex: "none" !== e2.vertexMode }, t2);
    return d.candidates.sort(((e3, t3) => e3.distance - t3.distance)), d.candidates.map(((e3) => this._convertCandidate(r4, e3)));
  }
  async add(e2, t2) {
    this._ids.add(e2.id), await this._workerHandle.invokeMethod("add", e2, t2);
  }
  async remove(e2, t2) {
    this._ids.delete(e2.id), await this._workerHandle.invokeMethod("remove", e2, t2);
  }
  _convertCandidate(e2, t2) {
    switch (t2.type) {
      case "edge":
        return new r2({ objectId: t2.objectId, targetPoint: p(this._convertRenderCoordinate(e2, t2.target)), edgeStart: this._convertRenderCoordinate(e2, t2.start), edgeEnd: this._convertRenderCoordinate(e2, t2.end), isDraped: false });
      case "vertex":
        return new r3({ objectId: t2.objectId, targetPoint: p(this._convertRenderCoordinate(e2, t2.target)), isDraped: false });
    }
  }
  _convertRenderCoordinate({ spatialReference: e2 }, t2) {
    const r4 = n();
    return this.renderCoordsHelper.fromRenderCoords(t2, r4, e2), a3(r4);
  }
  async _fetchAllEdgeLocations(e2, t2) {
    const r4 = [], o2 = [];
    for (const { id: s2, uid: n2 } of e2.components) this._ids.has(s2) && r4.push((async () => {
      const e3 = await this.fetchEdgeLocations(s2, t2.signal), r5 = e3.locations.buffer;
      return o2.push(r5), { id: s2, uid: n2, objectIds: e3.objectIds, locations: r5, origin: e3.origin, type: e3.type };
    })());
    return { result: { components: (await Promise.all(r4)).filter((({ id: e3 }) => this._ids.has(e3))) }, transferList: o2 };
  }
};
r([m2({ constructOnly: true })], l2.prototype, "renderCoordsHelper", void 0), r([m2({ constructOnly: true })], l2.prototype, "fetchEdgeLocations", void 0), r([m2({ constructOnly: true })], l2.prototype, "schedule", void 0), r([m2({ readOnly: true })], l2.prototype, "availability", void 0), l2 = r([a2("esri.views.interactive.snapping.featureSources.sceneLayerSource.SceneLayerSnappingSourceWorkerHandle")], l2);
var h3 = class extends h2 {
  constructor(e2, t2) {
    super("SceneLayerSnappingSourceWorker", "fetchCandidates", {}, e2, { strategy: "dedicated", client: t2 });
  }
};
var u = n();

// node_modules/@arcgis/core/views/interactive/snapping/featureSources/I3SSnappingSource.js
var p2 = class extends b {
  get updating() {
    return this._updatingHandles.updating;
  }
  constructor(e2) {
    super(e2), this.availability = 1, this._updatingHandles = new h(), this._abortController = new AbortController();
  }
  destroy() {
    this._tracker = l(this._tracker), this._abortController = e(this._abortController), this._updatingHandles.destroy();
  }
  initialize() {
    const { view: e2 } = this, r4 = e2.resourceController;
    this._edgeWorker = new a4(h4(r4)), this._workerHandle = new l2({ renderCoordsHelper: this.view.renderCoordsHelper, schedule: h4(r4), fetchEdgeLocations: async (e3, r5) => {
      if (null == this._tracker) throw new Error("tracker-not-initialized");
      return this._tracker.fetchEdgeLocations(e3, this._edgeWorker, r5);
    } }), this._updatingHandles.addPromise(this._setupLayerView()), this.addHandles([c(this._workerHandle), c(this._edgeWorker)]);
  }
  async fetchCandidates(e2, r4) {
    return this._workerHandle.fetchCandidates(e2, r4);
  }
  refresh() {
  }
  async _setupLayerView() {
    if (this.destroyed) return;
    const e2 = this._abortController?.signal, r4 = await this.getLayerView();
    null == r4 || c2(e2) || (this._tracker = r4.trackSnappingSources({ add: (r5, t2) => {
      this._updatingHandles.addPromise(this._workerHandle.add({ id: r5, bounds: t2 }, e2));
    }, remove: (r5) => {
      this._updatingHandles.addPromise(this._workerHandle.remove({ id: r5 }, e2));
    } }));
  }
};
function h4(e2) {
  return (r4) => e2.immediate.schedule(r4);
}
r([m2({ constructOnly: true })], p2.prototype, "getLayerView", void 0), r([m2({ constructOnly: true })], p2.prototype, "view", void 0), r([m2({ readOnly: true })], p2.prototype, "updating", null), r([m2({ readOnly: true })], p2.prototype, "availability", void 0), p2 = r([a2("esri.views.interactive.snapping.featureSources.I3SSnappingSource")], p2);

// node_modules/@arcgis/core/views/interactive/snapping/featureSources/SceneLayerSnappingSource.js
var c3 = class extends b {
  get updating() {
    return this._i3sSources.some(((e2) => e2.updating));
  }
  constructor(e2) {
    super(e2), this.availability = 1, this._i3sSources = [];
  }
  destroy() {
    this._i3sSources.forEach(((e2) => e2.destroy())), this._i3sSources.length = 0;
  }
  initialize() {
    const { view: e2 } = this, r4 = this.layerSource.layer;
    this._i3sSources = "building-scene" === r4.type ? this._getBuildingSceneI3SSources(e2, r4) : [this._getSceneLayerI3SSource(e2, r4)];
  }
  async fetchCandidates(e2, r4) {
    const t2 = await Promise.all(this._i3sSources.map(((t3) => t3.fetchCandidates(e2, r4))));
    return s(r4), t2.flat();
  }
  refresh() {
    this._i3sSources.forEach(((e2) => e2.refresh()));
  }
  _getBuildingSceneI3SSources(e2, r4) {
    return r4.allSublayers.toArray().map(((t2) => "building-component" === t2.type ? new p2({ getLayerView: async () => (await e2.whenLayerView(r4)).whenSublayerView(t2), view: e2 }) : null)).filter(L);
  }
  _getSceneLayerI3SSource(e2, r4) {
    return new p2({ getLayerView: async () => {
      const t2 = await e2.whenLayerView(r4);
      return "scene-layer-graphics-3d" === t2.type ? void 0 : t2;
    }, view: e2 });
  }
};
r([m2({ constructOnly: true })], c3.prototype, "layerSource", void 0), r([m2({ constructOnly: true })], c3.prototype, "view", void 0), r([m2({ readOnly: true })], c3.prototype, "updating", null), r([m2({ readOnly: true })], c3.prototype, "availability", void 0), c3 = r([a2("esri.views.interactive.snapping.featureSources.SceneLayerSnappingSource")], c3);
export {
  c3 as SceneLayerSnappingSource
};
//# sourceMappingURL=SceneLayerSnappingSource-TKQLS3NE.js.map
