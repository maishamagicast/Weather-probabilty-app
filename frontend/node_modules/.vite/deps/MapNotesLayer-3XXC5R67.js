import {
  c as c2
} from "./chunk-YGPPU7AB.js";
import {
  Xe
} from "./chunk-57NU6P6U.js";
import "./chunk-DPZUWQQD.js";
import "./chunk-VJFNPV3I.js";
import "./chunk-PUDEDAPY.js";
import "./chunk-JXBJIDCW.js";
import "./chunk-BZSAIP56.js";
import "./chunk-RWIBDRMM.js";
import "./chunk-AXEQLPYK.js";
import "./chunk-MWIJEAM3.js";
import "./chunk-BGSPX4Z3.js";
import "./chunk-WBA6DQSU.js";
import "./chunk-BB6EK2RQ.js";
import "./chunk-R3HU2OBM.js";
import "./chunk-5ZJG2W6X.js";
import "./chunk-7JSCPQTK.js";
import "./chunk-EYECC3PG.js";
import "./chunk-LUPQ25XG.js";
import "./chunk-3GQTEESV.js";
import "./chunk-UBVWE2LK.js";
import "./chunk-32DGBWKL.js";
import "./chunk-DJRZXLB2.js";
import "./chunk-3ESJRJZD.js";
import "./chunk-L6GG77AZ.js";
import "./chunk-XOKYRVJ5.js";
import "./chunk-D2DRG2DH.js";
import "./chunk-HOVLU5XA.js";
import "./chunk-2DCDAX3U.js";
import "./chunk-EZ5REY53.js";
import "./chunk-3HYSKSYM.js";
import "./chunk-EWP4DLQF.js";
import {
  p
} from "./chunk-CHGKJUJ3.js";
import "./chunk-3YBQQHIP.js";
import "./chunk-OJQCHQYS.js";
import {
  t
} from "./chunk-N3W3EVP3.js";
import {
  b2 as b
} from "./chunk-ZJXLBTN2.js";
import "./chunk-SIRTOV2N.js";
import "./chunk-V7CFMRVF.js";
import "./chunk-LINWZZJL.js";
import "./chunk-YKZMZKSQ.js";
import "./chunk-QZISYUPA.js";
import "./chunk-HQRWZZNA.js";
import "./chunk-CKFS2QIU.js";
import "./chunk-PI2R2EZ2.js";
import "./chunk-JLGVQWP5.js";
import "./chunk-LCT65JMM.js";
import "./chunk-IR6JOM7Y.js";
import "./chunk-MK7DDFJN.js";
import {
  j
} from "./chunk-H2PFGMJP.js";
import {
  S
} from "./chunk-OFINLTIW.js";
import "./chunk-TIU3P5HE.js";
import "./chunk-EU5HNJUP.js";
import "./chunk-CJSURDZH.js";
import "./chunk-FFY3IMAS.js";
import "./chunk-YT2ORY5Z.js";
import "./chunk-2UINVE7X.js";
import "./chunk-CLMM4HHK.js";
import "./chunk-PTLGJ4Y6.js";
import "./chunk-KXZAYF3U.js";
import "./chunk-PHSQVJNW.js";
import "./chunk-KFNWBWN4.js";
import "./chunk-K55CXVYD.js";
import "./chunk-XOTDRYLO.js";
import "./chunk-G2F62CY5.js";
import "./chunk-Q37ABIVM.js";
import "./chunk-VFMQPCCZ.js";
import "./chunk-63ZT5BWV.js";
import "./chunk-OPQ3FCJ4.js";
import "./chunk-W3BJJE6D.js";
import "./chunk-UZ3YWBWC.js";
import "./chunk-K5CV62SX.js";
import "./chunk-2EOHKZLO.js";
import {
  n
} from "./chunk-5OW376WN.js";
import "./chunk-S7GLMIAQ.js";
import "./chunk-YIVJSMJO.js";
import "./chunk-QMUTCCDX.js";
import "./chunk-UICDKBDP.js";
import "./chunk-3M6ALZOH.js";
import "./chunk-QPV4BKBC.js";
import "./chunk-LQQCPLIT.js";
import "./chunk-4O46EK5T.js";
import "./chunk-UO2UKPG5.js";
import "./chunk-EMULKSUV.js";
import "./chunk-AY3JR4QM.js";
import "./chunk-YG6ILDTP.js";
import "./chunk-DKFJHHQ4.js";
import "./chunk-UXVQ5YGS.js";
import "./chunk-Z34SUCTX.js";
import "./chunk-A2AZM62Y.js";
import "./chunk-LQYJLB4P.js";
import "./chunk-D6GGPM6D.js";
import "./chunk-FQY65CBA.js";
import {
  m as m2
} from "./chunk-HH4Q2NN5.js";
import {
  R
} from "./chunk-IR4HVW2K.js";
import "./chunk-OT2P27SF.js";
import "./chunk-XJOLJK3F.js";
import "./chunk-3CFYBBSV.js";
import "./chunk-ZVNJ2S2Z.js";
import "./chunk-AACFCXAP.js";
import "./chunk-ZT7UIVVR.js";
import {
  h
} from "./chunk-R25QZWQ7.js";
import "./chunk-BELQIHLO.js";
import "./chunk-BPI4BR4E.js";
import "./chunk-YVMULGDJ.js";
import {
  K,
  L as L2,
  O as O2,
  X,
  k
} from "./chunk-CJDZN5K5.js";
import "./chunk-N77BULFI.js";
import "./chunk-6TZIEYTZ.js";
import "./chunk-UMUW6RKM.js";
import "./chunk-XRTNDGK2.js";
import "./chunk-A6R2FXH6.js";
import "./chunk-H6ZVHKNF.js";
import "./chunk-YAXW2DL6.js";
import "./chunk-QLKHFYAN.js";
import "./chunk-3TSZDV6B.js";
import "./chunk-P4O4YCLI.js";
import "./chunk-FV6ZNHFI.js";
import "./chunk-MSSQA3XK.js";
import {
  d
} from "./chunk-PBKE5BCM.js";
import "./chunk-FOALQHMM.js";
import "./chunk-7HS3ESHX.js";
import "./chunk-2CS746FZ.js";
import "./chunk-NEI5HAVK.js";
import "./chunk-RCOFAQFP.js";
import {
  g
} from "./chunk-CO2J5JPW.js";
import {
  m as m4
} from "./chunk-CHAHOTAY.js";
import "./chunk-RZGBA4KS.js";
import "./chunk-FSYN2HHU.js";
import "./chunk-7I4TWCTW.js";
import "./chunk-W5UOLFE2.js";
import "./chunk-AZ2S2PYZ.js";
import "./chunk-SCMB64VM.js";
import "./chunk-FOPBVVXE.js";
import "./chunk-INI6MHIQ.js";
import "./chunk-R7YP6EQJ.js";
import "./chunk-QUZZIDFR.js";
import "./chunk-CBCDVQSA.js";
import {
  V
} from "./chunk-74GULGYB.js";
import "./chunk-RKF6WUZT.js";
import "./chunk-RMRI4NYS.js";
import "./chunk-YYLIW24Q.js";
import "./chunk-B7BH33JH.js";
import {
  I,
  L,
  O,
  c,
  f as f2
} from "./chunk-BLBN3L5Q.js";
import "./chunk-5EWIWLNU.js";
import "./chunk-TOCH3L2K.js";
import {
  z
} from "./chunk-CBXZL53X.js";
import "./chunk-HYAO4PVV.js";
import "./chunk-SRNKPAJX.js";
import "./chunk-MOMLPET6.js";
import "./chunk-VNQUG2TO.js";
import "./chunk-EULNFFHG.js";
import "./chunk-SDIBXPSJ.js";
import "./chunk-LPCUYJ2B.js";
import "./chunk-3QHX4R4B.js";
import "./chunk-SMO33YG7.js";
import {
  f
} from "./chunk-LCBAL6ER.js";
import {
  s as s3
} from "./chunk-6JCZVSRM.js";
import "./chunk-LLGOMKTE.js";
import "./chunk-ZB6KRLRI.js";
import "./chunk-67AKDROO.js";
import "./chunk-CM3TIXEV.js";
import "./chunk-2AYGXVZI.js";
import "./chunk-OUZJZB6I.js";
import {
  u
} from "./chunk-WO5FLTVY.js";
import {
  m as m3
} from "./chunk-MGA7XBRB.js";
import "./chunk-XNUSHDFN.js";
import "./chunk-4AKMPOG7.js";
import "./chunk-2CJBZZN7.js";
import "./chunk-APMQAZ5Z.js";
import "./chunk-ZJQPHR3K.js";
import {
  o
} from "./chunk-NJZD7WM5.js";
import {
  r as r2
} from "./chunk-CL7VLXUR.js";
import "./chunk-FCX4ZA3Z.js";
import {
  m2 as m
} from "./chunk-2ZPU5IZX.js";
import {
  a2,
  s as s2
} from "./chunk-S62CSPIH.js";
import "./chunk-X26VPODZ.js";
import "./chunk-XNYPRDKK.js";
import "./chunk-JNYZ3I5R.js";
import {
  r
} from "./chunk-Y4BWIIWH.js";
import "./chunk-TTJIKWMC.js";
import "./chunk-CMEG2CKL.js";
import "./chunk-VHPBXBDE.js";
import "./chunk-6ACTD4UJ.js";
import "./chunk-5REYU5G2.js";
import "./chunk-N626Y23H.js";
import {
  a,
  e,
  s2 as s
} from "./chunk-TJPLHZCD.js";
import "./chunk-KLFJ5V5G.js";
import "./chunk-G26ADAPQ.js";

// node_modules/@arcgis/core/layers/MapNotesLayer.js
function B(e2) {
  return "markup" === e2.featureCollectionType || e2.layers.some(((e3) => null != e3.layerDefinition.visibilityField || !k2(e3)));
}
function k2({ layerDefinition: e2, featureSet: t2 }) {
  const r3 = e2.geometryType ?? t2.geometryType;
  return $.find(((t3) => r3 === t3.geometryTypeJSON && e2.drawingInfo?.renderer?.symbol?.type === t3.identifyingSymbol.type));
}
function z2() {
  return new z({ xmin: -180, ymin: -90, xmax: 180, ymax: 90 });
}
var U = new m2({ name: "OBJECTID", alias: "OBJECTID", type: "oid", nullable: false, editable: false });
var W = new m2({ name: "title", alias: "Title", type: "string", nullable: true, editable: true, length: 255 });
var A = class extends c2 {
  constructor(e2) {
    super(e2), this.visibilityMode = "inherited";
  }
  initialize() {
    for (const e2 of this.graphics) e2.sourceLayer = this.layer;
    this.graphics.on("after-add", ((e2) => {
      e2.item.sourceLayer = this.layer;
    })), this.graphics.on("after-remove", ((e2) => {
      e2.item.sourceLayer = null;
    }));
  }
  get fullExtent() {
    const e2 = this.layer?.spatialReference, t2 = this.fullBounds;
    return e2 ? null == t2 ? X(z2(), e2).geometry : c(t2, e2) : null;
  }
  get fullBounds() {
    const e2 = this.layer?.spatialReference;
    if (!e2) return null;
    const t2 = I();
    return this.graphics.forEach(((r3) => {
      const o2 = null != r3.geometry ? X(r3.geometry, e2).geometry : null;
      null != o2 && f2(t2, "point" === o2.type ? o2 : o2.extent, t2);
    })), L(t2, O) ? null : t2;
  }
  get sublayers() {
    return this.graphics;
  }
};
r([m({ readOnly: true })], A.prototype, "fullExtent", null), r([m({ readOnly: true })], A.prototype, "fullBounds", null), r([m({ readOnly: true })], A.prototype, "sublayers", null), r([m()], A.prototype, "layer", void 0), r([m()], A.prototype, "layerId", void 0), r([m({ readOnly: true })], A.prototype, "visibilityMode", void 0), A = r([a2("esri.layers.MapNotesLayer.MapNotesSublayer")], A);
var $ = [{ geometryType: "polygon", geometryTypeJSON: "esriGeometryPolygon", id: "polygonLayer", layerId: 0, title: "Polygons", identifyingSymbol: new m4().toJSON() }, { geometryType: "polyline", geometryTypeJSON: "esriGeometryPolyline", id: "polylineLayer", layerId: 1, title: "Polylines", identifyingSymbol: new m3().toJSON() }, { geometryType: "multipoint", geometryTypeJSON: "esriGeometryMultipoint", id: "multipointLayer", layerId: 2, title: "Multipoints", identifyingSymbol: new u().toJSON() }, { geometryType: "point", geometryTypeJSON: "esriGeometryPoint", id: "pointLayer", layerId: 3, title: "Points", identifyingSymbol: new u().toJSON() }, { geometryType: "point", geometryTypeJSON: "esriGeometryPoint", id: "textLayer", layerId: 4, title: "Text", identifyingSymbol: new g().toJSON() }];
var q = class extends p(t(b(j(S(h))))) {
  constructor(e2) {
    super(e2), this.capabilities = { operations: { supportsMapNotesEditing: true } }, this.featureCollections = null, this.featureCollectionJSON = null, this.featureCollectionType = "notes", this.legendEnabled = false, this.listMode = "hide-children", this.minScale = 0, this.maxScale = 0, this.spatialReference = f.WGS84, this.sublayers = new V($.map(((e3) => new A({ id: e3.id, layerId: e3.layerId, title: e3.title, layer: this })))), this.title = "Map Notes", this.type = "map-notes", this.visibilityMode = "inherited";
  }
  readCapabilities(e2, t2, r3) {
    return { operations: { supportsMapNotesEditing: !B(t2) && "portal-item" !== r3?.origin } };
  }
  readFeatureCollections(e2, t2, o2) {
    if (!B(t2)) return null;
    const i = t2.layers.map(((e3) => {
      const t3 = new Xe();
      return t3.read(e3, o2), t3;
    }));
    return new V({ items: i });
  }
  readLegacyfeatureCollectionJSON(e2, t2) {
    return B(t2) ? a(t2.featureCollection) : null;
  }
  get fullExtent() {
    const e2 = this.spatialReference, t2 = I();
    if (null != this.sublayers) this.sublayers.forEach((({ fullBounds: e3 }) => null != e3 ? f2(t2, e3, t2) : t2), t2);
    else if (this.featureCollectionJSON?.layers.some(((e3) => e3.layerDefinition.extent))) {
      this.featureCollectionJSON.layers.forEach(((r3) => {
        const o2 = X(r3.layerDefinition.extent, e2).geometry;
        null != o2 && f2(t2, o2, t2);
      }));
    }
    return L(t2, O) ? X(z2(), e2).geometry : c(t2, e2);
  }
  readMinScale(e2, t2) {
    for (const r3 of t2.layers) if (null != r3.layerDefinition.minScale) return r3.layerDefinition.minScale;
    return 0;
  }
  readMaxScale(e2, t2) {
    for (const r3 of t2.layers) if (null != r3.layerDefinition.maxScale) return r3.layerDefinition.maxScale;
    return 0;
  }
  get multipointLayer() {
    return this._findSublayer("multipointLayer");
  }
  get pointLayer() {
    return this._findSublayer("pointLayer");
  }
  get polygonLayer() {
    return this._findSublayer("polygonLayer");
  }
  get polylineLayer() {
    return this._findSublayer("polylineLayer");
  }
  readSpatialReference(e2, t2) {
    return t2.layers.length ? f.fromJSON(t2.layers[0].layerDefinition.spatialReference) : f.WGS84;
  }
  readSublayers(e2, o2, i) {
    if (B(o2)) return null;
    const l = [];
    let a3 = o2.layers.reduce(((e3, t2) => Math.max(e3, t2.layerDefinition.id ?? -1)), -1) + 1;
    for (const r3 of o2.layers) {
      const { layerDefinition: e3, featureSet: o3 } = r3, i2 = e3.id ?? a3++, n2 = k2(r3);
      if (null != n2) {
        const r4 = new A({ id: n2.id, title: e3.name, layerId: i2, layer: this, graphics: o3.features.map((({ geometry: e4, symbol: r5, attributes: o4, popupInfo: i3 }) => d.fromJSON({ attributes: o4, geometry: e4, symbol: r5, popupTemplate: i3 }))) });
        l.push(r4);
      }
    }
    return new V(l);
  }
  writeSublayers(e2, t2, r3, i) {
    const { minScale: l, maxScale: n2 } = this;
    if (null == e2) return;
    const s4 = e2.some(((e3) => e3.graphics.length > 0));
    if (!this.capabilities.operations.supportsMapNotesEditing) return void (s4 && i?.messages?.push(new s("map-notes-layer:editing-not-supported", "New map notes cannot be added to this layer")));
    const p2 = [];
    let y = this.spatialReference.toJSON();
    e: for (const o2 of e2) for (const e3 of o2.graphics) if (null != e3.geometry) {
      y = e3.geometry.spatialReference.toJSON();
      break e;
    }
    for (const o2 of $) {
      const t3 = e2.find(((e3) => o2.id === e3.id));
      this._writeMapNoteSublayer(p2, t3, o2, l, n2, y, i);
    }
    e("featureCollection.layers", p2, t2);
  }
  get textLayer() {
    return this._findSublayer("textLayer");
  }
  load(e2) {
    return this.addResolvingPromise(this.loadFromPortal({ supportedTypes: ["Feature Collection"] }, e2)), Promise.resolve(this);
  }
  read(e2, t2) {
    "featureCollection" in e2 && (e2 = a(e2), Object.assign(e2, e2.featureCollection)), super.read(e2, t2);
  }
  async beforeSave() {
    if (null == this.sublayers) return;
    let e2 = null;
    const t2 = [];
    for (const o2 of this.sublayers) for (const r4 of o2.graphics) if (null != r4.geometry) {
      const o3 = r4.geometry;
      e2 ? s3(o3.spatialReference, e2) || (L2(o3.spatialReference, e2) || k() || await K(), r4.geometry = O2(o3, e2)) : e2 = o3.spatialReference, t2.push(r4);
    }
    const r3 = await R(t2.map(((e3) => e3.geometry)));
    t2.forEach(((e3, t3) => e3.geometry = r3[t3]));
  }
  _findSublayer(e2) {
    return null == this.sublayers ? null : this.sublayers?.find(((t2) => t2.id === e2)) ?? null;
  }
  _writeMapNoteSublayer(e2, t2, r3, o2, l, a3, n2) {
    const s4 = [];
    if (null != t2) {
      for (const e3 of t2.graphics) this._writeMapNote(s4, e3, r3.geometryType, n2);
      this._normalizeObjectIds(s4, U), e2.push({ layerDefinition: { name: t2.title, drawingInfo: { renderer: { type: "simple", symbol: a(r3.identifyingSymbol) } }, id: t2.layerId, geometryType: r3.geometryTypeJSON, minScale: o2, maxScale: l, objectIdField: "OBJECTID", fields: [U.toJSON(), W.toJSON()], spatialReference: a3 }, featureSet: { features: s4, geometryType: r3.geometryTypeJSON } });
    }
  }
  _writeMapNote(e2, t2, r3, o2) {
    if (null == t2) return;
    const { geometry: i, symbol: l, popupTemplate: a3 } = t2;
    if (null == i) return;
    if (i.type !== r3) return void o2?.messages?.push(new s2("map-notes-layer:invalid-geometry-type", `Geometry "${i.type}" cannot be saved in "${r3}" layer`, { graphic: t2 }));
    if (null == l) return void o2?.messages?.push(new s2("map-notes-layer:no-symbol", "Skipping map notes with no symbol", { graphic: t2 }));
    const s4 = { attributes: { ...t2.attributes }, geometry: i.toJSON(), symbol: l.toJSON() };
    null != a3 && (s4.popupInfo = a3.toJSON()), e2.push(s4);
  }
  _normalizeObjectIds(e2, t2) {
    const r3 = t2.name;
    let o2 = n(r3, e2) + 1;
    const i = /* @__PURE__ */ new Set();
    for (const l of e2) {
      l.attributes || (l.attributes = {});
      const { attributes: e3 } = l;
      (null == e3[r3] || i.has(e3[r3])) && (e3[r3] = o2++), i.add(e3[r3]);
    }
  }
};
r([m({ readOnly: true })], q.prototype, "capabilities", void 0), r([o(["portal-item", "web-map"], "capabilities", ["layers"])], q.prototype, "readCapabilities", null), r([m({ readOnly: true })], q.prototype, "featureCollections", void 0), r([o(["web-map", "portal-item"], "featureCollections", ["layers"])], q.prototype, "readFeatureCollections", null), r([m({ readOnly: true, json: { origins: { "web-map": { write: { enabled: true, target: "featureCollection" } } } } })], q.prototype, "featureCollectionJSON", void 0), r([o(["web-map", "portal-item"], "featureCollectionJSON", ["featureCollection"])], q.prototype, "readLegacyfeatureCollectionJSON", null), r([m({ readOnly: true, json: { read: true, write: { enabled: true, ignoreOrigin: true } } })], q.prototype, "featureCollectionType", void 0), r([m({ readOnly: true })], q.prototype, "fullExtent", null), r([m({ readOnly: true, json: { origins: { "web-map": { write: { target: "featureCollection.showLegend", overridePolicy() {
  return { enabled: null != this.featureCollectionJSON };
} } } } } })], q.prototype, "legendEnabled", void 0), r([m({ type: ["show", "hide", "hide-children"] })], q.prototype, "listMode", void 0), r([m({ type: Number, nonNullable: true, json: { write: false } })], q.prototype, "minScale", void 0), r([o(["web-map", "portal-item"], "minScale", ["layers"])], q.prototype, "readMinScale", null), r([m({ type: Number, nonNullable: true, json: { write: false } })], q.prototype, "maxScale", void 0), r([o(["web-map", "portal-item"], "maxScale", ["layers"])], q.prototype, "readMaxScale", null), r([m({ readOnly: true })], q.prototype, "multipointLayer", null), r([m({ value: "ArcGISFeatureLayer", type: ["ArcGISFeatureLayer"] })], q.prototype, "operationalLayerType", void 0), r([m({ readOnly: true })], q.prototype, "pointLayer", null), r([m({ readOnly: true })], q.prototype, "polygonLayer", null), r([m({ readOnly: true })], q.prototype, "polylineLayer", null), r([m({ type: f })], q.prototype, "spatialReference", void 0), r([o(["web-map", "portal-item"], "spatialReference", ["layers"])], q.prototype, "readSpatialReference", null), r([m({ readOnly: true, json: { origins: { "web-map": { write: { ignoreOrigin: true } } } } })], q.prototype, "sublayers", void 0), r([o("web-map", "sublayers", ["layers"])], q.prototype, "readSublayers", null), r([r2("web-map", "sublayers")], q.prototype, "writeSublayers", null), r([m({ readOnly: true })], q.prototype, "textLayer", null), r([m()], q.prototype, "title", void 0), r([m({ readOnly: true, json: { read: false } })], q.prototype, "type", void 0), q = r([a2("esri.layers.MapNotesLayer")], q);
var H = q;
export {
  H as default
};
//# sourceMappingURL=MapNotesLayer-3XXC5R67.js.map
