import {
  E,
  I,
  N
} from "./chunk-W6SOR4OP.js";
import {
  E as E2,
  S,
  d as d2,
  f as f2,
  h,
  p
} from "./chunk-LLTSJZOR.js";
import "./chunk-XF5GRUK5.js";
import {
  a,
  l,
  u as u2
} from "./chunk-CYQZCOHI.js";
import "./chunk-S7GLMIAQ.js";
import {
  u
} from "./chunk-5ZA2FFGW.js";
import {
  f
} from "./chunk-E3X3R7JS.js";
import "./chunk-5J3DOLRD.js";
import "./chunk-ITDL4YVK.js";
import {
  L
} from "./chunk-LDDUMPNU.js";
import "./chunk-CCQBS25D.js";
import "./chunk-PXNA3G6N.js";
import "./chunk-OUR2XGMQ.js";
import "./chunk-TSHXWKM2.js";
import {
  j,
  x
} from "./chunk-KZ2G7XW2.js";
import "./chunk-YIVJSMJO.js";
import {
  Z
} from "./chunk-QMUTCCDX.js";
import {
  lt,
  ot,
  rt,
  st,
  ut
} from "./chunk-24S6C5S6.js";
import "./chunk-7Y4U2JD3.js";
import "./chunk-GCTSCKPO.js";
import "./chunk-6U4EGJOK.js";
import "./chunk-W7U4L72B.js";
import "./chunk-OXO3GGCE.js";
import "./chunk-BOPGQCAL.js";
import "./chunk-C4HV45QS.js";
import "./chunk-FB53UFVR.js";
import "./chunk-UICDKBDP.js";
import "./chunk-HRIEIPLV.js";
import "./chunk-RWNJO2QP.js";
import "./chunk-3M6ALZOH.js";
import "./chunk-QPV4BKBC.js";
import "./chunk-DDDZPNGZ.js";
import "./chunk-XVEUTBL6.js";
import "./chunk-LQQCPLIT.js";
import "./chunk-4O46EK5T.js";
import "./chunk-4R7TSTKL.js";
import "./chunk-UO2UKPG5.js";
import "./chunk-EMULKSUV.js";
import "./chunk-AY3JR4QM.js";
import "./chunk-S5G7D7MX.js";
import "./chunk-6BZTNQVP.js";
import "./chunk-IR4HVW2K.js";
import "./chunk-OT2P27SF.js";
import "./chunk-XJOLJK3F.js";
import {
  i as i2
} from "./chunk-3CFYBBSV.js";
import "./chunk-ZVNJ2S2Z.js";
import "./chunk-KPGNM4LZ.js";
import "./chunk-P5DG4SNT.js";
import {
  d
} from "./chunk-YVMULGDJ.js";
import "./chunk-CJDZN5K5.js";
import "./chunk-N77BULFI.js";
import "./chunk-6TZIEYTZ.js";
import "./chunk-UMUW6RKM.js";
import "./chunk-XRTNDGK2.js";
import "./chunk-7WPGDYQW.js";
import "./chunk-QDOFETFN.js";
import "./chunk-A6R2FXH6.js";
import "./chunk-H6ZVHKNF.js";
import "./chunk-YAXW2DL6.js";
import "./chunk-MSSQA3XK.js";
import "./chunk-FSYN2HHU.js";
import "./chunk-7I4TWCTW.js";
import {
  ee,
  ne
} from "./chunk-W5UOLFE2.js";
import "./chunk-AZ2S2PYZ.js";
import {
  v
} from "./chunk-SCMB64VM.js";
import "./chunk-FOPBVVXE.js";
import "./chunk-CBCDVQSA.js";
import "./chunk-74GULGYB.js";
import "./chunk-RKF6WUZT.js";
import "./chunk-RMRI4NYS.js";
import "./chunk-YYLIW24Q.js";
import "./chunk-B7BH33JH.js";
import "./chunk-BLBN3L5Q.js";
import "./chunk-CBXZL53X.js";
import "./chunk-HYAO4PVV.js";
import "./chunk-SRNKPAJX.js";
import {
  n
} from "./chunk-MOMLPET6.js";
import "./chunk-VNQUG2TO.js";
import "./chunk-SDIBXPSJ.js";
import "./chunk-LPCUYJ2B.js";
import "./chunk-3QHX4R4B.js";
import "./chunk-SMO33YG7.js";
import "./chunk-LCBAL6ER.js";
import {
  U,
  s as s2
} from "./chunk-6JCZVSRM.js";
import "./chunk-LLGOMKTE.js";
import "./chunk-ZB6KRLRI.js";
import "./chunk-67AKDROO.js";
import "./chunk-CM3TIXEV.js";
import {
  H
} from "./chunk-2AYGXVZI.js";
import "./chunk-OUZJZB6I.js";
import "./chunk-4AKMPOG7.js";
import "./chunk-2CJBZZN7.js";
import "./chunk-APMQAZ5Z.js";
import "./chunk-ZJQPHR3K.js";
import "./chunk-NJZD7WM5.js";
import "./chunk-CL7VLXUR.js";
import "./chunk-FCX4ZA3Z.js";
import "./chunk-2ZPU5IZX.js";
import "./chunk-S62CSPIH.js";
import "./chunk-X26VPODZ.js";
import "./chunk-XNYPRDKK.js";
import "./chunk-JNYZ3I5R.js";
import "./chunk-Y4BWIIWH.js";
import "./chunk-TTJIKWMC.js";
import "./chunk-CMEG2CKL.js";
import "./chunk-VHPBXBDE.js";
import "./chunk-6ACTD4UJ.js";
import "./chunk-5REYU5G2.js";
import {
  b
} from "./chunk-N626Y23H.js";
import {
  i3 as i,
  s2 as s
} from "./chunk-TJPLHZCD.js";
import "./chunk-KLFJ5V5G.js";
import "./chunk-G26ADAPQ.js";

// node_modules/@arcgis/core/layers/graphics/sources/geojson/GeoJSONSourceWorker.js
var A = { hasAttachments: false, capabilities: "query, editing, create, delete, update", useStandardizedQueries: true, supportsCoordinatesQuantization: true, supportsReturningQueryGeometry: true, advancedQueryCapabilities: { supportsQueryAttachments: false, supportsQueryAttachmentOrderByFields: false, supportsQueryBins: true, supportsQueryWithCacheHint: true, supportsQueryWithDistance: true, supportsQueryWithResultType: true, supportsStatistics: true, supportsPercentileStatistics: true, supportsReturningGeometryCentroid: true, supportsDistinct: true, supportsReturningQueryExtent: true, supportsReturningGeometryProperties: false, supportsHavingClause: true, supportsOrderBy: true, supportsPagination: true, supportsSqlExpression: true, supportsDisjointSpatialRel: true }, queryBinsCapabilities: S };
var v2 = class {
  constructor() {
    this._queryEngine = null, this._snapshotFeatures = async (e) => {
      const t = await this._fetch(e);
      return this._createFeatures(t);
    };
  }
  destroy() {
    this._queryEngine?.destroy(), this._queryEngine = this._createDefaultAttributes = null;
  }
  async load(e, t = {}) {
    this._loadOptions = { url: e.url, customParameters: e.customParameters };
    const i3 = [], [r] = await Promise.all([e.url ? this._fetch(t?.signal) : null, this._checkProjection(e.spatialReference)]), n2 = I(r, { geometryType: e.geometryType }), o = e.fields || n2.fields || [], u3 = null != e.hasZ ? e.hasZ : n2.hasZ, l2 = n2.geometryType;
    let d3 = e.objectIdField || n2.objectIdFieldName || "__OBJECTID";
    const p2 = e.spatialReference || U;
    let c = e.timeInfo;
    o === n2.fields && n2.unknownFields.length > 0 && i3.push({ name: "geojson-layer:unknown-field-types", message: "Some fields types couldn't be inferred from the features and were dropped", details: { unknownFields: n2.unknownFields } });
    const y = new Z(o);
    let h2 = y.get(d3);
    h2 ? ("esriFieldTypeString" !== h2.type && (h2.type = "esriFieldTypeOID"), h2.editable = false, h2.nullable = false, d3 = h2.name) : (h2 = { alias: d3, name: d3, type: "string" === n2.objectIdFieldType ? "esriFieldTypeString" : "esriFieldTypeOID", editable: false, nullable: false }, o.unshift(h2));
    const f3 = {};
    for (const a2 of o) {
      if (null == a2.name && (a2.name = a2.alias), null == a2.alias && (a2.alias = a2.name), !a2.name) throw new s("geojson-layer:invalid-field-name", "field name is missing", { field: a2 });
      if (!i2.jsonValues.includes(a2.type)) throw new s("geojson-layer:invalid-field-type", `invalid type for field "${a2.name}"`, { field: a2 });
      if (a2.name !== h2.name) {
        const e2 = ee(a2);
        void 0 !== e2 && (f3[a2.name] = e2);
      }
      null == a2.length && (a2.length = ne(a2));
    }
    if (c) {
      if (c.startTimeField) {
        const e2 = y.get(c.startTimeField);
        e2 ? (c.startTimeField = e2.name, e2.type = "esriFieldTypeDate") : c.startTimeField = null;
      }
      if (c.endTimeField) {
        const e2 = y.get(c.endTimeField);
        e2 ? (c.endTimeField = e2.name, e2.type = "esriFieldTypeDate") : c.endTimeField = null;
      }
      if (c.trackIdField) {
        const e2 = y.get(c.trackIdField);
        e2 ? c.trackIdField = e2.name : (c.trackIdField = null, i3.push({ name: "geojson-layer:invalid-timeInfo-trackIdField", message: "trackIdField is missing", details: { timeInfo: c } }));
      }
      c.startTimeField || c.endTimeField || (i3.push({ name: "geojson-layer:invalid-timeInfo", message: "startTimeField and endTimeField are missing", details: { timeInfo: c } }), c = null);
    }
    const j2 = l2 ? u2(l2) : void 0, I2 = y.dateFields.length ? { timeZoneIANA: n } : null, T = { warnings: i3, featureErrors: [], layerDefinition: { ...A, drawingInfo: j2 ?? void 0, templates: l(f3), extent: void 0, geometryType: l2, objectIdField: d3, fields: o, hasZ: !!u3, timeInfo: c, dateFieldsTimeReference: I2 } }, w = { type: "object-id", fieldName: d3 };
    this._queryEngine = new L({ fieldsIndex: Z.fromLayerJSON({ fields: o, timeInfo: c, dateFieldsTimeReference: I2 }), geometryType: l2, hasM: false, hasZ: u3, featureIdInfo: w, spatialReference: p2, timeInfo: c, featureStore: new f({ geometryType: l2, hasM: false, hasZ: u3 }) });
    const q = this._queryEngine.fieldsIndex.requiredFields.indexOf(h2);
    q > -1 && this._queryEngine.fieldsIndex.requiredFields.splice(q, 1), this._createDefaultAttributes = a(f3, d3);
    const x2 = await this._createFeatures(r);
    this._objectIdGenerator = this._createObjectIdGenerator(this._queryEngine, x2);
    const S2 = this._normalizeFeatures(x2, T.featureErrors);
    this._queryEngine.featureStore.addMany(S2);
    const { fullExtent: R, timeExtent: v3 } = await this._queryEngine.fetchRecomputedExtents();
    if (T.layerDefinition.extent = R, v3) {
      const { start: e2, end: t2 } = v3;
      T.layerDefinition.timeInfo.timeExtent = [e2, t2];
    }
    return T;
  }
  async applyEdits(e) {
    const { spatialReference: t, geometryType: s3 } = this._queryEngine;
    return await Promise.all([E2(t, s3), x(e.adds, t), x(e.updates, t)]), await this._waitSnapshotComplete(), this._applyEdits(e);
  }
  async queryFeatures(e = {}, t = {}) {
    return await this._waitSnapshotComplete(), this._queryEngine.executeQuery(e, t.signal);
  }
  async queryFeatureCount(e = {}, t = {}) {
    return await this._waitSnapshotComplete(), this._queryEngine.executeQueryForCount(e, t.signal);
  }
  async queryObjectIds(e = {}, t = {}) {
    return await this._waitSnapshotComplete(), this._queryEngine.executeQueryForIds(e, t.signal);
  }
  async queryExtent(e = {}, t = {}) {
    return await this._waitSnapshotComplete(), this._queryEngine.executeQueryForExtent(e, t.signal);
  }
  async querySnapping(e, t = {}) {
    return await this._waitSnapshotComplete(), u(this._queryEngine, e, t.signal);
  }
  async queryAttributeBins(e, t = {}) {
    return await this._waitSnapshotComplete(), this._queryEngine.executeAttributeBinsQuery(e, t.signal);
  }
  async refresh(e) {
    this._loadOptions.customParameters = e, this._snapshotTask?.abort(), this._snapshotTask = d(this._snapshotFeatures), this._snapshotTask.promise.then(((e2) => {
      this._queryEngine.featureStore.clear(), this._objectIdGenerator = this._createObjectIdGenerator(this._queryEngine, e2);
      const t = this._normalizeFeatures(e2);
      t && this._queryEngine.featureStore.addMany(t);
    }), ((e2) => {
      this._queryEngine.featureStore.clear(), b(e2) || i.getLogger("esri.layers.GeoJSONLayer").error(new s("geojson-layer:refresh", "An error occurred during refresh", { error: e2 }));
    })), await this._waitSnapshotComplete();
    const { fullExtent: n2, timeExtent: a2 } = await this._queryEngine.fetchRecomputedExtents();
    return { extent: n2, timeExtent: a2 };
  }
  async _createFeatures(e) {
    if (null == e) return [];
    const { geometryType: t, hasZ: s3, objectIdField: i3 } = this._queryEngine, r = N(e, { geometryType: t, hasZ: s3, objectIdField: i3 });
    if (!s2(this._queryEngine.spatialReference, U)) for (const n2 of r) null != n2.geometry && (n2.geometry = ut(j(lt(n2.geometry, this._queryEngine.geometryType, this._queryEngine.hasZ, false), U, this._queryEngine.spatialReference)));
    return r;
  }
  async _waitSnapshotComplete() {
    if (this._snapshotTask && !this._snapshotTask.finished) {
      try {
        await this._snapshotTask.promise;
      } catch {
      }
      return this._waitSnapshotComplete();
    }
  }
  async _fetch(t) {
    const { url: s3, customParameters: i3 } = this._loadOptions, r = (await H(s3 ?? "", { responseType: "json", query: { ...i3 }, signal: t })).data;
    return E(r), r;
  }
  _normalizeFeatures(e, t) {
    const { objectIdField: s3, fieldsIndex: i3 } = this._queryEngine, r = [];
    for (const n2 of e) {
      const e2 = this._createDefaultAttributes(), a2 = d2(i3, e2, n2.attributes, true);
      a2 ? t?.push(a2) : (this._assignObjectId(e2, n2.attributes, true), n2.attributes = e2, n2.objectId = e2[s3], r.push(n2));
    }
    return r;
  }
  async _applyEdits(e) {
    const { adds: t, updates: s3, deletes: i3 } = e, r = { addResults: [], deleteResults: [], updateResults: [], uidToObjectId: {} };
    if (t?.length && this._applyAddEdits(r, t), s3?.length && this._applyUpdateEdits(r, s3), i3?.length) {
      for (const e2 of i3) r.deleteResults.push(f2(e2));
      this._queryEngine.featureStore.removeManyById(i3);
    }
    const { fullExtent: n2, timeExtent: a2 } = await this._queryEngine.fetchRecomputedExtents();
    return { extent: n2, timeExtent: a2, featureEditResults: r };
  }
  _applyAddEdits(e, t) {
    const { addResults: s3 } = e, { geometryType: i3, hasM: r, hasZ: a2, objectIdField: o, spatialReference: u3, featureStore: l2, fieldsIndex: p2 } = this._queryEngine, c = [], y = { type: "object-id", fieldName: o };
    for (const d3 of t) {
      if (d3.geometry && i3 !== v(d3.geometry)) {
        s3.push(p("Incorrect geometry type."));
        continue;
      }
      const t2 = this._createDefaultAttributes(), r2 = d2(p2, t2, d3.attributes);
      if (r2) s3.push(r2);
      else {
        if (this._assignObjectId(t2, d3.attributes), d3.attributes = t2, null != d3.uid) {
          const t3 = d3.attributes[o];
          e.uidToObjectId[d3.uid] = t3;
        }
        if (null != d3.geometry) {
          const e2 = d3.geometry.spatialReference ?? u3;
          d3.geometry = j(h(d3.geometry, e2), e2, u3);
        }
        c.push(d3), s3.push(f2(d3.attributes[o]));
      }
    }
    l2.addMany(rt([], c, i3, a2, r, y));
  }
  _applyUpdateEdits({ updateResults: e }, t) {
    const { geometryType: s3, hasM: i3, hasZ: r, objectIdField: a2, spatialReference: o, featureStore: u3, fieldsIndex: l2 } = this._queryEngine, d3 = { type: "object-id", fieldName: a2 };
    for (const y of t) {
      const { attributes: t2, geometry: m } = y, h2 = t2?.[a2];
      if (null == h2) {
        e.push(p(`Identifier field ${a2} missing`));
        continue;
      }
      if (!u3.has(h2)) {
        e.push(p(`Feature with object id ${h2} missing`));
        continue;
      }
      const g = st(u3.getFeature(h2), s3, r, i3);
      if (null != m) {
        if (s3 !== v(m)) {
          e.push(p("Incorrect geometry type."));
          continue;
        }
        const t3 = m.spatialReference ?? o;
        g.geometry = j(h(m, t3), t3, o);
      }
      if (t2) {
        const s4 = d2(l2, g.attributes, t2);
        if (s4) {
          e.push(s4);
          continue;
        }
      }
      u3.add(ot(g, s3, r, i3, d3)), e.push(f2(h2));
    }
  }
  _createObjectIdGenerator(e, t) {
    const s3 = e.fieldsIndex.get(e.objectIdField);
    if ("esriFieldTypeString" === s3.type) return () => s3.name + "-" + Date.now().toString(16);
    let i3 = Number.NEGATIVE_INFINITY;
    for (const r of t) r.objectId && (i3 = Math.max(i3, r.objectId));
    return i3 = Math.max(0, i3) + 1, () => i3++;
  }
  _assignObjectId(e, t, s3 = false) {
    const i3 = this._queryEngine.objectIdField;
    e[i3] = s3 && i3 in t ? t[i3] : this._objectIdGenerator();
  }
  async _checkProjection(e) {
    try {
      await x(U, e);
    } catch {
      throw new s("geojson-layer", "Projection not supported");
    }
  }
};
export {
  v2 as default
};
//# sourceMappingURL=GeoJSONSourceWorker-7SNFUJP7.js.map
