import {
  t
} from "./chunk-BLUWNVP6.js";
import "./chunk-XRPPUYTZ.js";
import {
  O
} from "./chunk-KAVZRVPC.js";
import "./chunk-3DDYAE2Z.js";
import "./chunk-PE6RTTM2.js";
import "./chunk-HSYGCPAM.js";
import "./chunk-U3M2HTCF.js";
import "./chunk-G6DMFUCZ.js";
import "./chunk-6PL4I2QQ.js";
import {
  S as S3
} from "./chunk-R4ARMIGB.js";
import {
  u
} from "./chunk-M6JFBQWH.js";
import "./chunk-GY7Z7OPO.js";
import "./chunk-JRBH6HCP.js";
import "./chunk-TI4LRNX7.js";
import "./chunk-JOKMLVBH.js";
import {
  c,
  c2,
  f
} from "./chunk-WBC7JOG3.js";
import {
  S,
  S2,
  d,
  h as h2
} from "./chunk-6WWN5K54.js";
import "./chunk-Y6UIOJ4V.js";
import "./chunk-OBI6XSOO.js";
import "./chunk-ZYWMFOAJ.js";
import "./chunk-6HU6D6AI.js";
import "./chunk-CO23VBIK.js";
import "./chunk-QFNAF2OO.js";
import "./chunk-RYUENKYI.js";
import "./chunk-OJQCHQYS.js";
import "./chunk-NA4PNORD.js";
import "./chunk-7MEIWNUT.js";
import "./chunk-TRRRRFK2.js";
import "./chunk-W7HTQBDK.js";
import "./chunk-ISZVN2MZ.js";
import "./chunk-YF3MIHOZ.js";
import "./chunk-Q2JFTIYQ.js";
import "./chunk-SNXPARJV.js";
import "./chunk-WKQKH2TM.js";
import "./chunk-WGJD7U4H.js";
import "./chunk-OUBBZ23V.js";
import "./chunk-7WMSTTK2.js";
import "./chunk-UP64JZZX.js";
import "./chunk-2EA3JV2W.js";
import "./chunk-QIDR2RCE.js";
import "./chunk-EU5HNJUP.js";
import "./chunk-FFY3IMAS.js";
import "./chunk-PGNIZQW2.js";
import "./chunk-LSXG3EQM.js";
import "./chunk-VQWEDC6T.js";
import "./chunk-KXZAYF3U.js";
import "./chunk-PHSQVJNW.js";
import "./chunk-KFNWBWN4.js";
import "./chunk-K55CXVYD.js";
import "./chunk-PBRYZOOK.js";
import "./chunk-GS5DZQYM.js";
import "./chunk-ZG3HABK4.js";
import "./chunk-63ZT5BWV.js";
import "./chunk-LIWGRYNH.js";
import "./chunk-LOLNWH3R.js";
import "./chunk-2EOHKZLO.js";
import "./chunk-S7GLMIAQ.js";
import "./chunk-PXNA3G6N.js";
import "./chunk-KZ2G7XW2.js";
import "./chunk-QMUTCCDX.js";
import "./chunk-24S6C5S6.js";
import "./chunk-7Y4U2JD3.js";
import "./chunk-GCTSCKPO.js";
import "./chunk-6U4EGJOK.js";
import "./chunk-W7U4L72B.js";
import "./chunk-RWNJO2QP.js";
import "./chunk-3M6ALZOH.js";
import "./chunk-QPV4BKBC.js";
import "./chunk-DDDZPNGZ.js";
import "./chunk-UO2UKPG5.js";
import "./chunk-EMULKSUV.js";
import "./chunk-AY3JR4QM.js";
import "./chunk-YXTIORDS.js";
import "./chunk-7ASGQ7X4.js";
import "./chunk-DL2726UG.js";
import "./chunk-AKZZRLKD.js";
import "./chunk-746KDGCX.js";
import "./chunk-SVGSXWMQ.js";
import "./chunk-IFDA5FOT.js";
import "./chunk-D5KSFCG5.js";
import "./chunk-JUXSLKSN.js";
import "./chunk-YGH6TKDR.js";
import "./chunk-QNRDEVXA.js";
import "./chunk-KW37MFF6.js";
import "./chunk-QIPPWPN2.js";
import "./chunk-Y2AI7GA5.js";
import "./chunk-P3R3JSYO.js";
import "./chunk-CAQUPYHC.js";
import "./chunk-2RL34CVC.js";
import "./chunk-BNQMKYX6.js";
import "./chunk-B6C2GOG6.js";
import "./chunk-K3VYMAVM.js";
import "./chunk-FPALEK52.js";
import "./chunk-LQYJLB4P.js";
import "./chunk-D6GGPM6D.js";
import "./chunk-FQY65CBA.js";
import "./chunk-HH4Q2NN5.js";
import "./chunk-IR4HVW2K.js";
import "./chunk-OT2P27SF.js";
import "./chunk-XJOLJK3F.js";
import "./chunk-3CFYBBSV.js";
import "./chunk-ZVNJ2S2Z.js";
import "./chunk-KPGNM4LZ.js";
import "./chunk-7OH24VUH.js";
import "./chunk-AACFCXAP.js";
import "./chunk-P5DG4SNT.js";
import {
  l as l2
} from "./chunk-LBDNG364.js";
import "./chunk-BPI4BR4E.js";
import "./chunk-CJDZN5K5.js";
import "./chunk-N77BULFI.js";
import "./chunk-6TZIEYTZ.js";
import "./chunk-UMUW6RKM.js";
import "./chunk-XRTNDGK2.js";
import "./chunk-A6R2FXH6.js";
import "./chunk-H6ZVHKNF.js";
import "./chunk-YAXW2DL6.js";
import "./chunk-P4O4YCLI.js";
import "./chunk-PBKE5BCM.js";
import "./chunk-FOALQHMM.js";
import "./chunk-7HS3ESHX.js";
import "./chunk-2CS746FZ.js";
import "./chunk-NEI5HAVK.js";
import "./chunk-RCOFAQFP.js";
import "./chunk-CO2J5JPW.js";
import "./chunk-CHAHOTAY.js";
import "./chunk-RZGBA4KS.js";
import "./chunk-FSYN2HHU.js";
import "./chunk-7I4TWCTW.js";
import "./chunk-W5UOLFE2.js";
import "./chunk-AZ2S2PYZ.js";
import "./chunk-SCMB64VM.js";
import "./chunk-FOPBVVXE.js";
import "./chunk-INI6MHIQ.js";
import "./chunk-R7YP6EQJ.js";
import "./chunk-QUZZIDFR.js";
import "./chunk-CBCDVQSA.js";
import {
  V
} from "./chunk-74GULGYB.js";
import "./chunk-RKF6WUZT.js";
import "./chunk-RMRI4NYS.js";
import "./chunk-YYLIW24Q.js";
import "./chunk-B7BH33JH.js";
import "./chunk-BLBN3L5Q.js";
import "./chunk-5EWIWLNU.js";
import "./chunk-TOCH3L2K.js";
import "./chunk-CBXZL53X.js";
import {
  h,
  l,
  w
} from "./chunk-HYAO4PVV.js";
import "./chunk-SRNKPAJX.js";
import "./chunk-MOMLPET6.js";
import "./chunk-VNQUG2TO.js";
import "./chunk-EULNFFHG.js";
import "./chunk-SDIBXPSJ.js";
import "./chunk-LPCUYJ2B.js";
import "./chunk-3QHX4R4B.js";
import "./chunk-SMO33YG7.js";
import "./chunk-LCBAL6ER.js";
import "./chunk-6JCZVSRM.js";
import "./chunk-LLGOMKTE.js";
import "./chunk-ZB6KRLRI.js";
import "./chunk-67AKDROO.js";
import "./chunk-CM3TIXEV.js";
import "./chunk-2AYGXVZI.js";
import "./chunk-OUZJZB6I.js";
import "./chunk-WO5FLTVY.js";
import "./chunk-MGA7XBRB.js";
import "./chunk-XNUSHDFN.js";
import "./chunk-4AKMPOG7.js";
import "./chunk-2CJBZZN7.js";
import "./chunk-APMQAZ5Z.js";
import "./chunk-ZJQPHR3K.js";
import "./chunk-NJZD7WM5.js";
import "./chunk-CL7VLXUR.js";
import "./chunk-FCX4ZA3Z.js";
import {
  m2 as m
} from "./chunk-2ZPU5IZX.js";
import {
  a2 as a
} from "./chunk-S62CSPIH.js";
import "./chunk-X26VPODZ.js";
import "./chunk-XNYPRDKK.js";
import "./chunk-JNYZ3I5R.js";
import {
  r
} from "./chunk-Y4BWIIWH.js";
import "./chunk-TTJIKWMC.js";
import "./chunk-CMEG2CKL.js";
import "./chunk-VHPBXBDE.js";
import "./chunk-6ACTD4UJ.js";
import "./chunk-5REYU5G2.js";
import {
  e
} from "./chunk-N626Y23H.js";
import "./chunk-TJPLHZCD.js";
import {
  L
} from "./chunk-KLFJ5V5G.js";
import "./chunk-G26ADAPQ.js";

// node_modules/@arcgis/core/views/2d/layers/RouteLayerView2D.js
var k = ["route-info", "direction-line", "direction-point", "polygon-barrier", "polyline-barrier", "point-barrier", "stop"];
var I = { graphic: null, property: null, oldValue: null, newValue: null };
function M(t2) {
  return t2 instanceof c || t2 instanceof c2 || t2 instanceof S || t2 instanceof h2 || t2 instanceof d || t2 instanceof f || t2 instanceof S2;
}
function F(t2) {
  return V.isCollection(t2) && t2.length && M(t2.at(0));
}
function j(t2) {
  return Array.isArray(t2) && t2.length > 0 && M(t2[0]);
}
var V2 = /* @__PURE__ */ new Set(["default"]);
var G = class extends S3(u) {
  constructor() {
    super(...arguments), this._graphics = new V(), this._highlightIds = /* @__PURE__ */ new Map(), this._networkFeatureMap = /* @__PURE__ */ new Map(), this._networkGraphicMap = /* @__PURE__ */ new Map(), this._interaction = null, this._loadInteractionPromise = null, this.interactive = false;
  }
  get _routeItems() {
    return new l2({ getCollections: () => null == this.layer || this.destroyed ? [] : [null != this.layer.routeInfo ? new V([this.layer.routeInfo]) : null, this.layer.directionLines, this.layer.directionPoints, this.layer.polygonBarriers, this.layer.polylineBarriers, this.layer.pointBarriers, this.layer.stops] });
  }
  initialize() {
    this.addHandles(l((() => {
      const { interactive: t2, suspended: e2 } = this;
      return { interactive: t2, suspended: e2 };
    }), (({ interactive: t2, suspended: e2 }) => {
      const i = t2 && !e2;
      i && this._getInteractionLoadPromise().then(((t3) => {
        t3.enabled = this.interactive && !this.suspended;
      })), this._interaction && (this._interaction.enabled = i);
    }), w)), this._updatingHandles.addOnCollectionChange((() => this._routeItems), ((t2) => this._routeItemsChanged(t2)), h);
  }
  destroy() {
    this._networkFeatureMap.clear(), this._networkGraphicMap.clear(), this._graphics.removeAll(), this._get("_routeItems")?.destroy();
  }
  attach() {
    this._createGraphicsView();
  }
  detach() {
    this._destroyGraphicsView(), this._interaction?.enabled && (this._interaction.enabled = false);
  }
  get selectedNetworkFeatures() {
    return this._interaction?.selectedNetworkFeatures ?? null;
  }
  async create(t2) {
    if (!this.interactive) return;
    return (await this._getInteractionLoadPromise()).create(t2);
  }
  async fetchPopupFeaturesAtLocation(t2, e2) {
    return this._graphicsView.hitTest(t2).filter((({ popupTemplate: t3 }) => !!t3));
  }
  highlight(t2) {
    let i;
    i = M(t2) ? [this._getNetworkFeatureUid(t2)] : j(t2) ? t2.map(((t3) => this._getNetworkFeatureUid(t3))) : F(t2) ? t2.map(((t3) => this._getNetworkFeatureUid(t3))).toArray() : [t2.uid];
    const r2 = i.filter(L);
    return r2.length ? (this._addHighlight(r2), e((() => this._removeHighlight(r2)))) : e();
  }
  async hitTest(t2, i) {
    if (this.suspended) return null;
    const r2 = this._graphicsView.hitTest(t2).filter(L).map(((t3) => this._networkGraphicMap.get(t3)));
    if (!r2.length) return null;
    const { layer: s } = this;
    return r2.reverse().map(((e2) => ({ type: "route", layer: s, mapPoint: t2, networkFeature: e2 })));
  }
  isUpdating() {
    return this._graphicsView.updating;
  }
  moveEnd() {
  }
  remove(t2) {
    this._interaction?.remove(t2);
  }
  update(t2) {
    this._graphicsView.processUpdate(t2);
  }
  viewChange() {
    this._graphicsView.viewChange();
  }
  _addHighlight(t2) {
    for (const e2 of t2) if (this._highlightIds.has(e2)) {
      const t3 = this._highlightIds.get(e2);
      this._highlightIds.set(e2, t3 + 1);
    } else this._highlightIds.set(e2, 1);
    this._updateHighlight();
  }
  _createGraphic(t2) {
    const e2 = t2.toGraphic();
    return e2.layer = this.layer, e2.sourceLayer = this.layer, e2;
  }
  _createGraphicsView() {
    const t2 = this.view, e2 = () => this.requestUpdate(), i = new t(t2.featuresTilingScheme);
    this._graphicsView = new O({ container: i, graphics: this._graphics, requestUpdateCallback: e2, view: t2 }), this.container.addChild(i), this._updateHighlight();
  }
  _destroyGraphicsView() {
    this.container.removeChild(this._graphicsView.container), this._graphicsView.destroy();
  }
  _getDrawOrder(t2) {
    const e2 = this._networkGraphicMap.get(t2);
    return k.indexOf(e2.type);
  }
  _getInteractionLoadPromise() {
    return this._loadInteractionPromise || (this._loadInteractionPromise = this._loadInteraction(), this._updatingHandles.addPromise(this._loadInteractionPromise)), this._loadInteractionPromise;
  }
  _getNetworkFeatureUid(t2) {
    return this._networkFeatureMap.has(t2) ? this._networkFeatureMap.get(t2).uid : null;
  }
  async _loadInteraction() {
    const { layer: t2, view: e2 } = this, { RouteLayerInteraction: i } = await import("./RouteLayerInteraction-PD2YGMWZ.js");
    return this._interaction = new i({ view: e2, layer: t2 }), this._interaction;
  }
  _removeHighlight(t2) {
    for (const e2 of t2) if (this._highlightIds.has(e2)) {
      const t3 = this._highlightIds.get(e2) - 1;
      0 === t3 ? this._highlightIds.delete(e2) : this._highlightIds.set(e2, t3);
    }
    this._updateHighlight();
  }
  _routeItemsChanged(t2) {
    if (t2.removed.length) {
      this._graphics.removeMany(t2.removed.map(((t3) => {
        const e2 = this._networkFeatureMap.get(t3);
        return this._networkFeatureMap.delete(t3), this._networkGraphicMap.delete(e2), e2;
      })));
      for (const e2 of t2.removed) this.removeHandles(e2);
    }
    if (t2.added.length) {
      this._graphics.addMany(t2.added.map(((t3) => {
        const e2 = this._createGraphic(t3);
        return null == e2.symbol ? null : (this._networkFeatureMap.set(t3, e2), this._networkGraphicMap.set(e2, t3), e2);
      })).filter(L));
      for (const e2 of t2.added) this.addHandles([l((() => e2.geometry), ((t3, i) => {
        this._updateGraphic(e2, "geometry", t3, i);
      })), l((() => e2.symbol), ((t3, i) => {
        this._updateGraphic(e2, "symbol", t3, i);
      })), l((() => e2.popupTemplate), ((t3) => {
        this._networkFeatureMap.has(e2) && (this._networkFeatureMap.get(e2).popupTemplate = t3);
      })), l((() => e2.toGraphic().attributes), ((t3) => {
        this._networkFeatureMap.has(e2) && (this._networkFeatureMap.get(e2).attributes = t3);
      }))], e2);
      this._graphics.sort(((t3, e2) => this._getDrawOrder(t3) - this._getDrawOrder(e2)));
    }
  }
  _updateGraphic(t2, e2, i, r2) {
    if (!this._networkFeatureMap.has(t2)) {
      const e3 = this._createGraphic(t2);
      return this._networkFeatureMap.set(t2, e3), this._networkGraphicMap.set(e3, t2), void this._graphics.add(e3);
    }
    const s = this._networkFeatureMap.get(t2);
    s[e2] = i, I.graphic = s, I.property = e2, I.oldValue = r2, I.newValue = i, this._graphicsView.graphicUpdateHandler(I);
  }
  _updateHighlight() {
    const t2 = Array.from(this._highlightIds.keys()), e2 = this._getHighlightBits(V2.values());
    this._graphicsView.setHighlight(t2.map(((t3) => ({ objectId: t3, highlightFlags: e2 }))));
  }
};
r([m()], G.prototype, "_graphics", void 0), r([m()], G.prototype, "_routeItems", null), r([m()], G.prototype, "_interaction", void 0), r([m()], G.prototype, "interactive", void 0), r([m({ readOnly: true })], G.prototype, "selectedNetworkFeatures", null), G = r([a("esri.views.2d.layers.RouteLayerView2D")], G);
var b = G;
export {
  b as default
};
//# sourceMappingURL=RouteLayerView2D-A3OI7GFN.js.map
