import {
  d as d2,
  f,
  h
} from "./chunk-EWDA7DTV.js";
import {
  a as a2
} from "./chunk-C6YJNXOP.js";
import "./chunk-N7FHHZYG.js";
import {
  O as O2
} from "./chunk-GD43WO7X.js";
import {
  i as i3
} from "./chunk-UMJMXEKH.js";
import "./chunk-4A576WHD.js";
import "./chunk-MMXQRX2B.js";
import "./chunk-FO4OC2NU.js";
import "./chunk-U3M2HTCF.js";
import {
  M
} from "./chunk-UBG2N6UW.js";
import {
  r as r2
} from "./chunk-ZKF2AHN5.js";
import {
  l as l2
} from "./chunk-VOZCHSVQ.js";
import "./chunk-WZCCHOOA.js";
import {
  i as i2
} from "./chunk-GOCIDHTW.js";
import "./chunk-G6DMFUCZ.js";
import {
  n4 as n2
} from "./chunk-UP3VRTDX.js";
import {
  S
} from "./chunk-4UTHGU4R.js";
import {
  u
} from "./chunk-M6JFBQWH.js";
import {
  n
} from "./chunk-UTPZHDO6.js";
import "./chunk-G3VERM5X.js";
import "./chunk-TI4LRNX7.js";
import "./chunk-VNKRR5PT.js";
import "./chunk-4EF2YJSI.js";
import {
  p
} from "./chunk-E3AA3YUP.js";
import "./chunk-CO23VBIK.js";
import "./chunk-OBI6XSOO.js";
import {
  O,
  Q,
  v
} from "./chunk-2RN2TIFH.js";
import "./chunk-ZYWMFOAJ.js";
import "./chunk-6HU6D6AI.js";
import "./chunk-LW5MWL3E.js";
import "./chunk-7MEIWNUT.js";
import "./chunk-TRRRRFK2.js";
import "./chunk-W7HTQBDK.js";
import "./chunk-6Y6CMYH7.js";
import "./chunk-O6YEMJGA.js";
import "./chunk-Q2JFTIYQ.js";
import "./chunk-SNXPARJV.js";
import "./chunk-WKQKH2TM.js";
import "./chunk-WGJD7U4H.js";
import "./chunk-OUBBZ23V.js";
import "./chunk-UP64JZZX.js";
import "./chunk-2EA3JV2W.js";
import "./chunk-7WMSTTK2.js";
import "./chunk-RYUENKYI.js";
import "./chunk-EU5HNJUP.js";
import "./chunk-PGNIZQW2.js";
import "./chunk-UVC3RVKE.js";
import "./chunk-TSUTFMFQ.js";
import "./chunk-PBRYZOOK.js";
import "./chunk-OB3B6P2I.js";
import "./chunk-WC2H7YQR.js";
import "./chunk-JIALW2VB.js";
import "./chunk-XI5ICJMK.js";
import "./chunk-24S6C5S6.js";
import "./chunk-LOLNWH3R.js";
import "./chunk-DDDZPNGZ.js";
import "./chunk-RWNJO2QP.js";
import "./chunk-DJ47Y6RU.js";
import "./chunk-AUHP32YH.js";
import "./chunk-AY3JR4QM.js";
import "./chunk-WX3VZIBK.js";
import "./chunk-7ASGQ7X4.js";
import "./chunk-PVWZWDGB.js";
import "./chunk-B3RUO3VQ.js";
import {
  c as c3
} from "./chunk-746KDGCX.js";
import {
  c as c2
} from "./chunk-ANUSP5DZ.js";
import "./chunk-IFDA5FOT.js";
import "./chunk-D5KSFCG5.js";
import "./chunk-PN5QNGVV.js";
import {
  E
} from "./chunk-JUXSLKSN.js";
import "./chunk-YGH6TKDR.js";
import "./chunk-QNRDEVXA.js";
import "./chunk-QIPPWPN2.js";
import "./chunk-Y2AI7GA5.js";
import "./chunk-A2AZM62Y.js";
import "./chunk-FPALEK52.js";
import "./chunk-2RL34CVC.js";
import "./chunk-KPGNM4LZ.js";
import "./chunk-BNQMKYX6.js";
import "./chunk-B6C2GOG6.js";
import "./chunk-K3VYMAVM.js";
import "./chunk-7OH24VUH.js";
import "./chunk-P5DG4SNT.js";
import {
  U as U2,
  m2
} from "./chunk-VYNLVHME.js";
import "./chunk-FFY3IMAS.js";
import "./chunk-FTX3VFJX.js";
import "./chunk-PHSQVJNW.js";
import "./chunk-KFNWBWN4.js";
import "./chunk-S7GLMIAQ.js";
import "./chunk-SUYBRL4O.js";
import "./chunk-7Y4U2JD3.js";
import "./chunk-GCTSCKPO.js";
import "./chunk-6U4EGJOK.js";
import "./chunk-EMULKSUV.js";
import {
  R
} from "./chunk-ZBTRSUIE.js";
import "./chunk-D6GGPM6D.js";
import "./chunk-U2JVYDTA.js";
import "./chunk-HH4Q2NN5.js";
import "./chunk-4OFMCNMO.js";
import "./chunk-OT2P27SF.js";
import "./chunk-XJOLJK3F.js";
import "./chunk-H7YECHT3.js";
import "./chunk-3CFYBBSV.js";
import "./chunk-AACFCXAP.js";
import {
  d
} from "./chunk-VCKINPGN.js";
import "./chunk-SDCRJECE.js";
import "./chunk-4G42CJX6.js";
import "./chunk-NEI5HAVK.js";
import "./chunk-D7G7U7XX.js";
import "./chunk-2CS746FZ.js";
import "./chunk-UET4BL4J.js";
import "./chunk-YMT7TAQQ.js";
import "./chunk-RZGBA4KS.js";
import "./chunk-FSYN2HHU.js";
import "./chunk-7I4TWCTW.js";
import "./chunk-SCMB64VM.js";
import "./chunk-MBJ7YPSH.js";
import "./chunk-D34PNYRG.js";
import "./chunk-APMQAZ5Z.js";
import "./chunk-P4O4YCLI.js";
import "./chunk-R7YP6EQJ.js";
import "./chunk-QFNAF2OO.js";
import "./chunk-QIDR2RCE.js";
import "./chunk-LIWGRYNH.js";
import "./chunk-SVGSXWMQ.js";
import "./chunk-KW37MFF6.js";
import "./chunk-P3R3JSYO.js";
import "./chunk-KLTPDVMD.js";
import "./chunk-MX6AIKIJ.js";
import "./chunk-CAQUPYHC.js";
import "./chunk-OJQCHQYS.js";
import "./chunk-VQWEDC6T.js";
import "./chunk-K55CXVYD.js";
import "./chunk-2EOHKZLO.js";
import "./chunk-W7U4L72B.js";
import "./chunk-3M6ALZOH.js";
import "./chunk-QPV4BKBC.js";
import "./chunk-BPI4BR4E.js";
import "./chunk-3L5JZOMH.js";
import "./chunk-N77BULFI.js";
import "./chunk-NEIJCC5O.js";
import "./chunk-UMUW6RKM.js";
import "./chunk-XRTNDGK2.js";
import "./chunk-A6R2FXH6.js";
import "./chunk-H6ZVHKNF.js";
import "./chunk-YAXW2DL6.js";
import "./chunk-4KZLIAP7.js";
import "./chunk-62NATJWT.js";
import "./chunk-FOPBVVXE.js";
import "./chunk-INI6MHIQ.js";
import "./chunk-QUZZIDFR.js";
import "./chunk-CBCDVQSA.js";
import "./chunk-RKF6WUZT.js";
import "./chunk-RMRI4NYS.js";
import "./chunk-YYLIW24Q.js";
import "./chunk-B7BH33JH.js";
import "./chunk-BLBN3L5Q.js";
import "./chunk-XNUSHDFN.js";
import "./chunk-4AKMPOG7.js";
import "./chunk-2CJBZZN7.js";
import "./chunk-ZJQPHR3K.js";
import {
  V
} from "./chunk-74GULGYB.js";
import {
  U,
  l,
  w
} from "./chunk-HYAO4PVV.js";
import "./chunk-SRNKPAJX.js";
import "./chunk-VNQUG2TO.js";
import "./chunk-MOMLPET6.js";
import "./chunk-3QHX4R4B.js";
import "./chunk-ORMKIVR7.js";
import "./chunk-TOCH3L2K.js";
import "./chunk-EULNFFHG.js";
import "./chunk-SDIBXPSJ.js";
import {
  z
} from "./chunk-CBXZL53X.js";
import "./chunk-LPCUYJ2B.js";
import {
  _
} from "./chunk-SMO33YG7.js";
import "./chunk-LCBAL6ER.js";
import {
  c
} from "./chunk-6JCZVSRM.js";
import "./chunk-LLGOMKTE.js";
import "./chunk-ZB6KRLRI.js";
import "./chunk-67AKDROO.js";
import "./chunk-CM3TIXEV.js";
import {
  H
} from "./chunk-POWGZO3T.js";
import "./chunk-OUZJZB6I.js";
import "./chunk-NJZD7WM5.js";
import "./chunk-CL7VLXUR.js";
import "./chunk-FCX4ZA3Z.js";
import {
  b as b2,
  m2 as m
} from "./chunk-2ZPU5IZX.js";
import {
  a2 as a
} from "./chunk-S62CSPIH.js";
import "./chunk-X26VPODZ.js";
import "./chunk-XNYPRDKK.js";
import {
  r
} from "./chunk-Y4BWIIWH.js";
import "./chunk-TTJIKWMC.js";
import "./chunk-CMEG2CKL.js";
import "./chunk-VHPBXBDE.js";
import "./chunk-6ACTD4UJ.js";
import "./chunk-5REYU5G2.js";
import "./chunk-JNYZ3I5R.js";
import {
  b,
  e,
  k,
  s as s2
} from "./chunk-N626Y23H.js";
import {
  i3 as i,
  s2 as s
} from "./chunk-TJPLHZCD.js";
import {
  L,
  has
} from "./chunk-KLFJ5V5G.js";
import "./chunk-G26ADAPQ.js";

// node_modules/@arcgis/core/views/2d/layers/imagery/ImageryView2D.js
var m3 = class extends b2 {
  constructor() {
    super(...arguments), this.attached = false, this.container = new n(), this.updateRequested = false, this.type = "imagery", this._bitmapView = new r2();
  }
  destroy() {
    this.attached && (this.detach(), this.attached = false), this.updateRequested = false;
  }
  get updating() {
    return !this.attached || this.isUpdating();
  }
  update(t2) {
    this.strategy.update(t2).catch(((t3) => {
      b(t3) || i.getLogger(this).error(t3);
    }));
  }
  hitTest(t2) {
    return new d({ attributes: {}, geometry: t2.clone(), layer: this.layer });
  }
  attach() {
    this.container.addChild(this._bitmapView);
    const t2 = this.layer.version >= 10, e2 = this.layer.version >= 10.1 ? this.layer.imageMaxHeight : 2048, i4 = this.layer.version >= 10.1 ? this.layer.imageMaxWidth : 2048;
    this.strategy = new M({ container: this._bitmapView, imageNormalizationSupported: t2, imageMaxHeight: e2, imageMaxWidth: i4, fetchSource: this._fetchImage.bind(this), requestUpdate: () => this.requestUpdate() });
  }
  detach() {
    this.strategy.destroy(), this._bitmapView.removeAllChildren(), this.container.removeAllChildren(), this.updateRequested = false;
  }
  redraw() {
    this.strategy.updateExports((async (t2) => {
      const { source: e2 } = t2;
      if (!e2 || e2 instanceof ImageBitmap) return;
      const i4 = await this.layer.applyRenderer({ extent: e2.extent, pixelBlock: e2.originalPixelBlock ?? e2.pixelBlock });
      e2.filter = (t3) => this.layer.pixelFilter ? this.layer.applyFilter(t3) : { ...i4, extent: e2.extent };
    })).catch(((t2) => {
      b(t2) || i.getLogger(this).error(t2);
    }));
  }
  requestUpdate() {
    this.updateRequested || (this.updateRequested = true, this.view.requestUpdate());
  }
  isUpdating() {
    return this.strategy.updating || this.updateRequested;
  }
  getPixelData() {
    if (this.updating) return null;
    const t2 = this.strategy.bitmaps;
    if (1 === t2.length && t2[0].source) return { extent: t2[0].source.extent, pixelBlock: t2[0].source.originalPixelBlock };
    if (t2.length > 1) {
      const e2 = this.view.extent, i4 = t2.map(((t3) => t3.source)).filter(((t3) => t3.extent && t3.extent.intersects(e2))).map(((t3) => ({ extent: t3.extent, pixelBlock: t3.originalPixelBlock }))), r3 = U2(i4, e2);
      return null != r3 ? { extent: r3.extent, pixelBlock: r3.pixelBlock } : null;
    }
    return null;
  }
  async _fetchImage(t2, e2, i4, r3) {
    (r3 = r3 || {}).timeExtent = this.timeExtent, r3.requestAsImageElement = true, r3.returnImageBitmap = true;
    const a3 = await this.layer.internalFetchImage(t2, e2, i4, r3);
    if (a3.imageBitmap) return a3.imageBitmap;
    const s3 = await this.layer.applyRenderer(a3.pixelData, { signal: r3.signal }), o = new l2(s3.pixelBlock, s3.extent?.clone(), a3.pixelData.pixelBlock);
    return o.filter = (t3) => this.layer.applyFilter(t3), o;
  }
};
r([m()], m3.prototype, "attached", void 0), r([m()], m3.prototype, "container", void 0), r([m()], m3.prototype, "layer", void 0), r([m()], m3.prototype, "strategy", void 0), r([m()], m3.prototype, "timeExtent", void 0), r([m()], m3.prototype, "view", void 0), r([m()], m3.prototype, "updateRequested", void 0), r([m()], m3.prototype, "updating", null), r([m()], m3.prototype, "type", void 0), m3 = r([a("esri.views.2d.layers.imagery.ImageryView2D")], m3);

// node_modules/@arcgis/core/views/2d/engine/imagery/RasterVFContainer.js
var t = class extends n2 {
  constructor() {
    super(...arguments), this.symbolTypes = ["triangle"];
  }
  prepareRenderPasses(s3) {
    const t2 = s3.registerRenderPass({ name: "imagery (vf)", brushes: [d2], target: () => this.children, drawPhase: E.MAP });
    return [...super.prepareRenderPasses(s3), t2];
  }
  doRender(e2) {
    this.visible && e2.drawPhase === E.MAP && this.symbolTypes.forEach(((r3) => {
      e2.renderPass = r3, super.doRender(e2);
    }));
  }
};

// node_modules/@arcgis/core/views/2d/layers/imagery/ImageryVFStrategy.js
var c4 = class extends b2 {
  constructor(e2) {
    super(e2), this._loading = null, this.update = k(((e3, t2) => this._update(e3, t2).catch(((e4) => {
      b(e4) || i.getLogger(this).error(e4);
    }))));
  }
  get updating() {
    return !!this._loading;
  }
  redraw(e2) {
    if (!this.container.children.length) return;
    const t2 = this.container.children[0];
    t2.symbolizerParameters = e2, t2.invalidateVAO(), this.container.symbolTypes = "wind_speed" === e2.style ? ["scalar", "triangle"] : "simple_scalar" === e2.style ? ["scalar"] : ["triangle"], this.container.requestRender();
  }
  async _update(e2, t2, i4) {
    if (!e2.stationary) return;
    const { extent: r3, spatialReference: o } = e2.state, s3 = new z({ xmin: r3.xmin, ymin: r3.ymin, xmax: r3.xmax, ymax: r3.ymax, spatialReference: o }), [a3, l3] = e2.state.size;
    this._loading = this.fetchPixels(s3, a3, l3, i4);
    const c5 = await this._loading;
    this._addToDisplay(c5, t2, e2.state), this._loading = null;
  }
  _addToDisplay(e2, t2, i4) {
    if (null == e2.pixelBlock) return this.container.children.forEach(((e3) => e3.destroy())), void this.container.removeAllChildren();
    const { extent: r3, pixelBlock: o } = e2, s3 = new f(o);
    s3.offset = [0, 0], s3.symbolizerParameters = t2, s3.rawPixelData = e2, s3.invalidateVAO(), s3.x = r3.xmin, s3.y = r3.ymax, s3.pixelRatio = i4.pixelRatio, s3.rotation = i4.rotation, s3.resolution = i4.resolution, s3.width = o.width * t2.symbolTileSize, s3.height = o.height * t2.symbolTileSize, this.container.children.forEach(((e3) => e3.destroy())), this.container.removeAllChildren(), this.container.symbolTypes = "wind_speed" === t2.style ? ["scalar", "triangle"] : "simple_scalar" === t2.style ? ["scalar"] : ["triangle"], this.container.addChild(s3);
  }
};
r([m()], c4.prototype, "fetchPixels", void 0), r([m()], c4.prototype, "container", void 0), r([m()], c4.prototype, "_loading", void 0), r([m()], c4.prototype, "updating", null), c4 = r([a("esri.views.2d.layers.imagery.ImageryVFStrategy")], c4);

// node_modules/@arcgis/core/views/2d/layers/imagery/VectorFieldView2D.js
var x = class extends b2 {
  constructor() {
    super(...arguments), this.attached = false, this.container = new t(), this.type = "imageryVF", this._dataParameters = { exportParametersVersion: 0, bbox: "", symbolTileSize: 0, time: "" }, this._fetchpixels = async (t2, e2, r3, i4) => {
      const s3 = await this._projectFullExtentPromise, { layer: o } = this, { symbolTileSize: a3 } = o.renderer, { extent: n3, width: l3, height: c5 } = m2(t2, e2, r3, a3, s3);
      if (null != s3 && !s3.intersects(t2)) return { extent: n3, pixelBlock: null };
      const m5 = { bbox: `${n3.xmin}, ${n3.ymin}, ${n3.xmax}, ${n3.ymax}`, exportParametersVersion: o.exportImageServiceParameters.version, symbolTileSize: a3, time: JSON.stringify(this.timeExtent || "") };
      if (this._canReuseVectorFieldData(m5)) {
        const t3 = this.getPixelData();
        if (null != t3) {
          if (`${t3.extent.xmin}, ${t3.extent.ymin}, ${t3.extent.xmax}, ${t3.extent.ymax}` === m5.bbox) return t3;
        }
      }
      const { pixelBlock: p2 } = await o.fetchPixels(n3, l3, c5, { timeExtent: this.timeExtent, interpolation: o.interpolation, signal: i4 });
      if (this._dataParameters = m5, null == p2) return { extent: n3, pixelBlock: null };
      const { dataType: h2 } = o.rasterInfo;
      return { extent: n3, pixelBlock: "vector-uv" === h2 && p2 ? await o.convertVectorFieldData(p2, "vector-uv", { signal: i4 }) : p2 };
    };
  }
  get updating() {
    return !this.attached || this._strategy.updating;
  }
  attach() {
    this._projectFullExtentPromise = this._getProjectedFullExtent(this.view.spatialReference), this._strategy = new c4({ container: this.container, fetchPixels: this._fetchpixels }), this.addHandles(l((() => this.layer.renderer), ((t2) => this._updateSymbolizerParams(t2)), w), "attach");
  }
  detach() {
    this._strategy.destroy(), this.container.children.forEach(((t2) => t2.destroy())), this.container.removeAllChildren(), this.removeHandles("attach"), this._strategy = this.container = this._projectFullExtentPromise = null;
  }
  getPixelData() {
    const t2 = this.container.children[0]?.rawPixelData;
    if (this.updating || !t2) return null;
    const { extent: e2, pixelBlock: r3 } = t2;
    return { extent: e2, pixelBlock: r3 };
  }
  hitTest(t2) {
    return new d({ attributes: {}, geometry: t2.clone(), layer: this.layer });
  }
  update(t2) {
    this._strategy.update(t2, this._symbolizerParams).catch(((t3) => {
      b(t3) || i.getLogger(this).error(t3);
    }));
  }
  redraw() {
    const { renderer: t2 } = this.layer;
    t2 && (this._updateSymbolizerParams(t2), this._strategy.redraw(this._symbolizerParams));
  }
  _canReuseVectorFieldData(t2) {
    const e2 = this._dataParameters.exportParametersVersion === t2.exportParametersVersion, r3 = this._dataParameters.time === t2.time, i4 = this._dataParameters.symbolTileSize === t2.symbolTileSize, s3 = this._dataParameters.bbox === t2.bbox;
    return e2 && r3 && i4 && s3;
  }
  async _getProjectedFullExtent(t2) {
    try {
      return Q(this.layer.fullExtent, t2);
    } catch (e2) {
      try {
        const e3 = (await H(this.layer.url, { query: { option: "footprints", outSR: c(t2), f: "json" } })).data.featureCollection.layers[0].layerDefinition.extent;
        return e3 ? z.fromJSON(e3) : null;
      } catch {
        return null;
      }
    }
  }
  _updateSymbolizerParams(t2) {
    "vector-field" === t2?.type && (this._symbolizerParams = this.layer.symbolizer.generateWebGLParameters({ pixelBlock: null }));
  }
};
r([m()], x.prototype, "attached", void 0), r([m()], x.prototype, "container", void 0), r([m()], x.prototype, "layer", void 0), r([m()], x.prototype, "timeExtent", void 0), r([m()], x.prototype, "type", void 0), r([m()], x.prototype, "view", void 0), r([m()], x.prototype, "updating", null), x = r([a("esri.views.2d.layers.imagery.VectorFieldView2D")], x);

// node_modules/@arcgis/core/views/layers/ImageryLayerView.js
var m4 = (m5) => {
  let l3 = class extends m5 {
    constructor() {
      super(...arguments), this.view = null;
    }
    get timeExtent() {
      return i3(this.layer, this.view?.timeExtent, this._get("timeExtent"));
    }
    async fetchPopupFeaturesAtLocation(e2, o) {
      const { layer: s3 } = this;
      if (!e2) throw new s("imagerylayerview:fetchPopupFeatures", "Nothing to fetch without area", { layer: s3 });
      const { popupEnabled: a3 } = s3, p2 = p(s3, o);
      if (!a3 || null == p2) return [];
      const n3 = await p2.getRequiredFields();
      s2(o);
      const m6 = new R();
      m6.timeExtent = this.timeExtent, m6.geometry = e2, m6.outFields = n3, m6.outSpatialReference = e2.spatialReference;
      const { resolution: l4, spatialReference: y } = this.view, h2 = "2d" === this.view.type ? new _(l4, l4, y) : new _(0.5 * l4, 0.5 * l4, y), { returnTopmostRaster: f2, showNoDataRecords: w2 } = p2.layerOptions || { returnTopmostRaster: true, showNoDataRecords: false }, d3 = { returnDomainValues: true, returnTopmostRaster: f2, pixelSize: h2, showNoDataRecords: w2, signal: o?.signal };
      return s3.queryVisibleRasters(m6, d3).then(((e3) => e3));
    }
    async getSourceScale() {
      return await v(), await this.layer.load(), O(this.layer.serviceRasterInfo, this.view.spatialReference);
    }
    canResume() {
      return !!super.canResume() && !this.timeExtent?.isEmpty;
    }
  };
  return r([m()], l3.prototype, "layer", void 0), r([m()], l3.prototype, "suspended", void 0), r([m({ readOnly: true })], l3.prototype, "timeExtent", null), r([m()], l3.prototype, "view", void 0), l3 = r([a("esri.views.layers.ImageryLayerView")], l3), l3;
};

// node_modules/@arcgis/core/views/2d/layers/ImageryLayerView2D.js
var b3 = class extends m4(i2(S(u))) {
  constructor() {
    super(...arguments), this._exportImageVersion = -1, this._highlightGraphics = new c2(), this._highlightView = void 0, this.layer = null, this.subview = null;
  }
  get pixelData() {
    const { subview: e2 } = this;
    return this.updating || !e2 ? null : "getPixelData" in e2 ? e2.getPixelData() : null;
  }
  update(e2) {
    this.subview?.update(e2);
  }
  attach() {
    this.layer.increaseRasterJobHandlerUsage(), this._setSubView(), this.view && (this._highlightView = new O2({ view: this.view, graphics: this._highlightGraphics, requestUpdateCallback: () => this.requestUpdate(), container: new a2(this.view.featuresTilingScheme) }), this.container.addChild(this._highlightView.container)), this.addAttachHandles([l((() => this.layer.exportImageServiceParameters.version), ((e2) => {
      e2 && this._exportImageVersion !== e2 && (this._exportImageVersion = e2, this.requestUpdate());
    }), U), l((() => this.timeExtent), ((e2) => {
      const { subview: i4 } = this;
      i4 && (i4.timeExtent = e2, "redraw" in i4 ? this.requestUpdate() : i4.redrawOrRefetch());
    }), U), this.layer.on("redraw", (() => {
      const { subview: e2 } = this;
      e2 && ("redraw" in e2 ? e2.redraw() : e2.redrawOrRefetch());
    })), l((() => this.layer.renderer), (() => this._setSubView()))]);
  }
  detach() {
    this.layer.decreaseRasterJobHandlerUsage(), this.container.removeAllChildren(), this._detachSubview(this.subview), this.subview?.destroy(), this.subview = null, this._highlightView?.destroy(), this._exportImageVersion = -1;
  }
  viewChange() {
  }
  moveEnd() {
    this.requestUpdate();
  }
  highlight(e2, h2) {
    if (!((Array.isArray(e2) ? e2[0] : V.isCollection(e2) ? e2.at(0) : e2) instanceof d)) return e();
    let a3 = [];
    Array.isArray(e2) || V.isCollection(e2) ? a3 = e2.map(((e3) => e3.clone())) : e2 instanceof d && (a3 = [e2.clone()]);
    const o = a3?.filter(L);
    if (!o?.length) return e();
    const l3 = h2?.name ?? c3;
    return this._addHighlightGraphics(a3, l3), e((() => !this.destroyed && this._removeHighlightGraphics(a3, l3)));
  }
  _addHighlightGraphics(e2, i4) {
    this._highlightGraphics.addMany(e2), this._addHighlights(e2.map(((e3) => e3.uid)), i4);
  }
  _removeHighlightGraphics(e2, i4) {
    this._highlightGraphics.removeMany(e2), this._removeHighlights(e2.map(((e3) => e3.uid)), i4);
  }
  async doRefresh() {
    this.requestUpdate();
  }
  isUpdating() {
    const e2 = !this.subview || this.subview.updating || !!this._highlightView?.updating;
    return has("esri-2d-log-updating") && console.log(`Updating ImageryLayerView2D (${this.layer.id}): ${e2}
-> subview ${!this.subview || this.subview.updating}
-> higlightView ${this._highlightView?.updating}
`), e2;
  }
  _processHighlight() {
    const e2 = this._getHighlights();
    this._highlightView?.setHighlight(e2);
  }
  _setSubView() {
    if (!this.view) return;
    const e2 = this.layer.renderer?.type;
    let i4 = "imagery";
    if ("vector-field" === e2 ? i4 = "imageryVF" : "flow" === e2 && (i4 = "flow"), this.subview) {
      const { type: e3 } = this.subview;
      if (e3 === i4) return this._attachSubview(this.subview), void ("flow" === e3 ? this.subview.redrawOrRefetch() : "imagery" === e3 && "lerc" === this.layer.format ? this.subview.redraw() : this.requestUpdate());
      this._detachSubview(this.subview), this.subview?.destroy();
    }
    this.subview = "imagery" === i4 ? new m3({ layer: this.layer, view: this.view, timeExtent: this.timeExtent }) : "imageryVF" === i4 ? new x({ layer: this.layer, view: this.view, timeExtent: this.timeExtent }) : new h({ layer: this.layer, layerView: this }), this._attachSubview(this.subview), this.requestUpdate();
  }
  _attachSubview(e2) {
    e2 && !e2.attached && (e2.attach(), e2.attached = true, this.container.addChildAt(e2.container, 0));
  }
  _detachSubview(e2) {
    e2?.attached && (this.container.removeChild(e2.container), e2.detach(), e2.attached = false);
  }
};
r([m()], b3.prototype, "pixelData", null), r([m()], b3.prototype, "subview", void 0), b3 = r([a("esri.views.2d.layers.ImageryLayerView2D")], b3);
var _2 = b3;
export {
  _2 as default
};
//# sourceMappingURL=ImageryLayerView2D-E6MCKJ5J.js.map
