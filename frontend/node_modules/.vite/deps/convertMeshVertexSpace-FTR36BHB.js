import {
  p
} from "./chunk-A3BO4JOA.js";
import "./chunk-V5GIC4SS.js";
import {
  B
} from "./chunk-JPT2YR7L.js";
import "./chunk-IKYEKMWB.js";
import "./chunk-M72BPMIY.js";
import "./chunk-QYV34ZYV.js";
import "./chunk-4QM2FHGA.js";
import "./chunk-NN5O537H.js";
import "./chunk-WE43YRN7.js";
import "./chunk-Q4LJGDN3.js";
import "./chunk-3JKWT76Y.js";
import "./chunk-LOLNWH3R.js";
import "./chunk-T4WPBSSK.js";
import "./chunk-7Q65H3HK.js";
import "./chunk-2RL34CVC.js";
import "./chunk-BNQMKYX6.js";
import "./chunk-B6C2GOG6.js";
import "./chunk-K3VYMAVM.js";
import "./chunk-APMQAZ5Z.js";
import "./chunk-3M6ALZOH.js";
import "./chunk-QPV4BKBC.js";
import "./chunk-3L5JZOMH.js";
import "./chunk-N77BULFI.js";
import "./chunk-NEIJCC5O.js";
import "./chunk-UMUW6RKM.js";
import "./chunk-H6ZVHKNF.js";
import "./chunk-YAXW2DL6.js";
import "./chunk-CBCDVQSA.js";
import "./chunk-RKF6WUZT.js";
import "./chunk-RMRI4NYS.js";
import "./chunk-YYLIW24Q.js";
import "./chunk-B7BH33JH.js";
import "./chunk-BLBN3L5Q.js";
import "./chunk-2CJBZZN7.js";
import "./chunk-ZJQPHR3K.js";
import "./chunk-3QHX4R4B.js";
import "./chunk-CBXZL53X.js";
import "./chunk-SMO33YG7.js";
import "./chunk-LCBAL6ER.js";
import "./chunk-6JCZVSRM.js";
import "./chunk-LLGOMKTE.js";
import "./chunk-ZB6KRLRI.js";
import "./chunk-67AKDROO.js";
import "./chunk-CM3TIXEV.js";
import "./chunk-POWGZO3T.js";
import "./chunk-OUZJZB6I.js";
import "./chunk-NJZD7WM5.js";
import "./chunk-CL7VLXUR.js";
import "./chunk-FCX4ZA3Z.js";
import "./chunk-2ZPU5IZX.js";
import "./chunk-S62CSPIH.js";
import "./chunk-X26VPODZ.js";
import "./chunk-XNYPRDKK.js";
import "./chunk-Y4BWIIWH.js";
import "./chunk-TTJIKWMC.js";
import "./chunk-CMEG2CKL.js";
import "./chunk-VHPBXBDE.js";
import "./chunk-6ACTD4UJ.js";
import "./chunk-5REYU5G2.js";
import "./chunk-JNYZ3I5R.js";
import {
  s as s2
} from "./chunk-N626Y23H.js";
import {
  a,
  s2 as s
} from "./chunk-TJPLHZCD.js";
import "./chunk-KLFJ5V5G.js";
import "./chunk-G26ADAPQ.js";

// node_modules/@arcgis/core/geometry/support/meshUtils/convertMeshVertexSpace.js
async function i(i2, n, c) {
  await Promise.resolve(), s2(c);
  const l = B(i2, n, { useEllipsoid: c?.useEllipsoid });
  if (!l) throw new s("meshUtils:convertVertexSpace()", "Failed to convert to provided vertex space due to projection errors");
  const m = i2.cloneAndModifyVertexAttributes(new p({ ...l, uv: a(i2.vertexAttributes.uv), color: a(i2.vertexAttributes.color) }), n);
  return m.transform = null, m;
}
export {
  i as convertMeshVertexSpace
};
//# sourceMappingURL=convertMeshVertexSpace-FTR36BHB.js.map
