import {
  B,
  C,
  D as D2,
  F,
  G,
  I,
  Q,
  R,
  Z,
  g,
  ne as ne2,
  te as te2
} from "./chunk-QBQ433YU.js";
import "./chunk-6LEZI7SO.js";
import {
  t as t2
} from "./chunk-QS5CSXLJ.js";
import "./chunk-GMOHWJKF.js";
import "./chunk-QQPCRMM5.js";
import "./chunk-LFDAB5ON.js";
import "./chunk-ZR62VL5J.js";
import {
  D
} from "./chunk-W7MPPZTB.js";
import {
  j
} from "./chunk-X6MR5RJV.js";
import "./chunk-4AWS66T2.js";
import {
  $,
  K,
  X,
  ne,
  te,
  ye
} from "./chunk-ONCJ5DYL.js";
import "./chunk-4I7FX2CT.js";
import {
  t as t3
} from "./chunk-MX6BY66A.js";
import "./chunk-SMDDQAST.js";
import "./chunk-QMUTCCDX.js";
import "./chunk-24S6C5S6.js";
import "./chunk-7Y4U2JD3.js";
import "./chunk-GCTSCKPO.js";
import "./chunk-6U4EGJOK.js";
import "./chunk-W7U4L72B.js";
import "./chunk-4R7TSTKL.js";
import {
  h,
  i,
  r as r2
} from "./chunk-UO2UKPG5.js";
import "./chunk-EMULKSUV.js";
import "./chunk-DPR2EXG7.js";
import {
  a as a2,
  r
} from "./chunk-AY3JR4QM.js";
import "./chunk-HH4Q2NN5.js";
import "./chunk-3CFYBBSV.js";
import "./chunk-ZVNJ2S2Z.js";
import "./chunk-FV6ZNHFI.js";
import "./chunk-FSYN2HHU.js";
import "./chunk-7I4TWCTW.js";
import "./chunk-W5UOLFE2.js";
import "./chunk-AZ2S2PYZ.js";
import "./chunk-SCMB64VM.js";
import {
  c,
  e,
  n,
  o,
  t
} from "./chunk-FOPBVVXE.js";
import {
  P,
  m,
  y
} from "./chunk-RMRI4NYS.js";
import "./chunk-YYLIW24Q.js";
import "./chunk-B7BH33JH.js";
import "./chunk-BLBN3L5Q.js";
import "./chunk-5EWIWLNU.js";
import "./chunk-TOCH3L2K.js";
import {
  z
} from "./chunk-CBXZL53X.js";
import "./chunk-MOMLPET6.js";
import "./chunk-EULNFFHG.js";
import "./chunk-SDIBXPSJ.js";
import "./chunk-LPCUYJ2B.js";
import {
  _
} from "./chunk-SMO33YG7.js";
import "./chunk-LCBAL6ER.js";
import "./chunk-6JCZVSRM.js";
import "./chunk-LLGOMKTE.js";
import "./chunk-ZB6KRLRI.js";
import "./chunk-67AKDROO.js";
import "./chunk-CM3TIXEV.js";
import "./chunk-2AYGXVZI.js";
import "./chunk-OUZJZB6I.js";
import "./chunk-APMQAZ5Z.js";
import "./chunk-ZJQPHR3K.js";
import "./chunk-NJZD7WM5.js";
import "./chunk-CL7VLXUR.js";
import "./chunk-FCX4ZA3Z.js";
import "./chunk-2ZPU5IZX.js";
import "./chunk-S62CSPIH.js";
import "./chunk-X26VPODZ.js";
import "./chunk-XNYPRDKK.js";
import "./chunk-JNYZ3I5R.js";
import "./chunk-Y4BWIIWH.js";
import "./chunk-TTJIKWMC.js";
import "./chunk-CMEG2CKL.js";
import "./chunk-VHPBXBDE.js";
import "./chunk-6ACTD4UJ.js";
import "./chunk-5REYU5G2.js";
import "./chunk-N626Y23H.js";
import {
  a
} from "./chunk-TJPLHZCD.js";
import "./chunk-KLFJ5V5G.js";
import "./chunk-G26ADAPQ.js";

// node_modules/@arcgis/core/arcade/Voxel.js
var n2 = "Voxel.Position";
var a3 = "Voxel.LocalTime";
function l(t4) {
  const s = t4.getAttribute(n2);
  if ("string" != typeof s) throw new a2(null, r.InvalidParameter, null);
  const o2 = JSON.parse(s);
  if (!Array.isArray(o2) || "number" != typeof o2[0] || "number" != typeof o2[1] || "number" != typeof o2[2]) throw new a2(null, r.InvalidParameter, null);
  return new t3(o2);
}
function u(i2, s) {
  const n3 = i2.getAttribute(a3);
  if (null == n3) return null;
  if (!c(n3)) throw new a2(null, r.InvalidParameter, null);
  return h.dateJSAndZoneToArcadeDate(n3, s);
}
var c2 = class {
  constructor(t4, e2) {
    this._graphic = t4, this._timeZone = e2, this.arcadeDeclaredClass = "esri.arcade.Voxel", this._layer = t4.sourceLayer;
  }
  getPosition() {
    return void 0 !== this._position ? this._position : this._position = l(this._graphic);
  }
  getLocalTime() {
    return void 0 !== this._localTime ? this._localTime : this._localTime = u(this._graphic, this._timeZone ?? "system");
  }
  keys() {
    return this._layer.fields.map(((t4) => t4.name)).sort();
  }
  hasField(t4) {
    return this._layer.fieldsIndex.has(t4);
  }
  field(t4) {
    const i2 = this._layer.fieldsIndex?.get(t4)?.name;
    if (null == i2) throw new a2(null, r.FieldNotFound, null, { key: t4 });
    switch (i2) {
      case n2:
        return this.getPosition();
      case a3:
        return this.getLocalTime();
    }
    return this._graphic.attributes[i2] ?? null;
  }
  castToText(t4 = false) {
    const e2 = { ...this._graphic.attributes };
    e2[n2] = this.getPosition(), a3 in e2 && (e2[a3] = this.getLocalTime());
    for (const r3 of Object.keys(e2)) this._layer.fieldsIndex?.has(r3) || delete e2[r3];
    return ye(e2, { useNumbersForDates: t4 });
  }
};

// node_modules/@arcgis/core/support/arcadeUtils.js
var M = { vars: { $feature: "any", $view: "any" } };
function R2(e2) {
  return e2.replaceAll(/[|\\{}()[\]^$+*?.]/g, "\\$&");
}
function T(e2) {
  return null == e2 ? null : o(e2) || te(e2) ? "array" : ne(e2) ? "date" : e(e2) ? "text" : t(e2) ? "boolean" : n(e2) ? "number" : e2 instanceof j ? "dictionary" : $(e2) ? "feature" : e2 instanceof _ ? "point" : e2 instanceof P ? "polygon" : e2 instanceof y ? "polyline" : e2 instanceof m ? "multipoint" : e2 instanceof z ? "extent" : e2 instanceof i ? "dateOnly" : e2 instanceof r2 ? "time" : K(e2) ? "featureSet" : X(e2) ? "featureSetCollection" : null;
}
function k(n3) {
  if (!n3) return null;
  try {
    return F(n3);
  } catch (r3) {
  }
  return null;
}
function z2(e2, r3) {
  const t4 = "string" == typeof e2 ? k(e2) : e2;
  if (!t4) return null;
  try {
    return r3 = r3 || a(M), g(t4, r3);
  } catch (o2) {
  }
  return null;
}
function J(e2, n3, r3) {
  return { vars: { $feature: null == e2 ? new D() : D.createFromGraphic(e2, r3), $view: n3?.view }, spatialReference: n3?.sr, timeZone: r3 ?? null };
}
function V(e2, n3, r3) {
  return D.createFromGraphicLikeObject(n3, e2, r3, null);
}
function O(e2, n3) {
  null != e2.vars && (e2.vars.$feature = n3);
}
function Z2(e2, n3) {
  let t4;
  try {
    t4 = G(e2, n3);
  } catch (o2) {
    t4 = null;
  }
  return t4;
}
function q(e2, n3) {
  let r3;
  try {
    r3 = e2 ? e2(n3) : null;
  } catch (t4) {
    r3 = null;
  }
  return r3;
}
function G2(e2, n3) {
  try {
    return e2 ? e2(n3) : Promise.resolve(null);
  } catch (r3) {
    return Promise.resolve(null);
  }
}
var L = new Set(["$feature", "$aggregatedFeatures", "$voxel"].map(((e2) => t2(e2))));
function N(e2, n3) {
  if (!e2) return [];
  const r3 = "string" == typeof e2 ? k(e2) : e2;
  if (!r3) return [];
  const o2 = C(r3).filter((({ varId: e3 }) => L.has(e3))).map((({ memberNamePattern: e3 }) => e3)).flatMap(((e3) => {
    if (e3.includes("*")) {
      if (null == n3) return [];
      const r4 = new RegExp(`^${e3.split(/\*+/).map(R2).join(".*")}$`, "i");
      return n3.filter(((e4) => r4.test(e4)));
    }
    return e3.toLowerCase();
  }));
  return [...new Set(o2.sort())];
}
function U(e2) {
  return I(e2, "$view");
}
function B2(e2, n3) {
  return !!e2 && I(e2, n3);
}
function H(e2) {
  if (!e2 || null == e2.spatialReference && (null == e2.scale || null == e2.viewingMode)) return;
  let n3, r3;
  const { timeProperties: t4, timeZone: o2 } = e2;
  if (null != t4) {
    const { currentStart: e3, currentEnd: a4 } = t4;
    null != o2 ? (n3 = null != e3 ? h.dateJSAndZoneToArcadeDate(e3, o2) : null, r3 = null != a4 ? h.dateJSAndZoneToArcadeDate(a4, o2) : null) : (n3 = null != e3 ? h.dateJSToArcadeDate(e3) : null, r3 = null != a4 ? h.dateJSToArcadeDate(a4) : null);
  }
  return { view: e2.viewingMode && null != e2.scale ? new j({ __proto__: null, viewingMode: e2.viewingMode, scale: e2.scale, timeProperties: null != n3 || null != r3 ? new j({ __proto__: null, currentStart: n3, currentEnd: r3, startIncluded: true, endIncluded: true }) : null }) : null, sr: e2.spatialReference };
}
function K2({ url: e2, spatialReference: n3, lrucache: r3, interceptor: t4 }) {
  const o2 = te2();
  return o2 ? o2.createFeatureSetCollectionFromService(e2, n3, r3, t4) : null;
}
function Q2({ layer: e2, spatialReference: n3, outFields: r3, returnGeometry: t4, lrucache: o2, interceptor: a4 }) {
  if (null === e2) return null;
  const l2 = te2();
  return l2 ? l2.constructFeatureSet(e2, n3, r3, t4 ?? true, o2, a4) : null;
}
function W(e2) {
  if (null === e2?.map) return null;
  const n3 = te2();
  return n3 ? n3.createFeatureSetCollectionFromMap(e2.map, e2.spatialReference, e2.lrucache, e2.interceptor) : null;
}
function X2(e2, n3) {
  return j.convertJsonToArcade(e2, n3);
}
function Y(e2, n3, r3 = []) {
  return Q(e2, n3, r3);
}
function ee() {
  return D2();
}
function ne3() {
  return B();
}
function re(e2) {
  return "type" in e2 && ("class-breaks" === e2.type || "dictionary" === e2.type || "dot-density" === e2.type || "pie-chart" === e2.type || "simple" === e2.type || "unique-value" === e2.type);
}
function te3(e2) {
  return "esri.layers.support.LabelClass" === e2.declaredClass;
}
function oe(e2) {
  return "esri.PopupTemplate" === e2.declaredClass;
}
function ae(e2, n3) {
  if (!e2) return false;
  if ("string" == typeof e2) return n3(e2);
  const r3 = e2;
  if (re(r3)) {
    if ("dot-density" === r3.type) {
      const e4 = r3.attributes?.some(((e5) => n3(e5.valueExpression)));
      if (e4) return e4;
    }
    const e3 = r3.visualVariables, t4 = !!e3 && e3.some(((e4) => {
      let r4 = n3(e4.valueExpression);
      return "size" === e4.type && (ce(e4.minSize) && (r4 = r4 || n3(e4.minSize.valueExpression)), ce(e4.maxSize) && (r4 = r4 || n3(e4.maxSize.valueExpression))), r4;
    }));
    return !(!("valueExpression" in r3) || !n3(r3.valueExpression)) || t4;
  }
  if (te3(r3)) {
    const e3 = r3.labelExpressionInfo?.expression;
    return !(!e3 || !n3(e3)) || false;
  }
  return !!oe(r3) && (!!r3.expressionInfos && r3.expressionInfos.some(((e3) => n3(e3.expression))) || Array.isArray(r3.content) && r3.content.some(((e3) => "expression" === e3.type && n3(e3.expressionInfo?.expression))));
}
function le(e2) {
  const n3 = k(e2);
  return !!n3 && Z(n3);
}
function ie(e2) {
  return ae(e2, le);
}
function ue(e2) {
  const n3 = k(e2);
  return !!n3 && R(n3);
}
function se(e2) {
  return ae(e2, ue);
}
function ce(e2) {
  return e2 && "esri.renderers.visualVariables.SizeVariable" === e2.declaredClass;
}
export {
  j as Dictionary,
  c2 as Voxel,
  ne2 as arcade,
  D as arcadeFeature,
  Q2 as convertFeatureLayerToFeatureSet,
  X2 as convertJsonToArcade,
  W as convertMapToFeatureSetCollection,
  K2 as convertServiceUrlToWorkspace,
  J as createExecContext,
  V as createFeature,
  z2 as createFunction,
  k as createSyntaxTree,
  U as dependsOnView,
  ne3 as enableFeatureSetOperations,
  ee as enableGeometryOperations,
  Z2 as evalSyntaxTree,
  G2 as executeAsyncFunction,
  q as executeFunction,
  N as extractFieldNames,
  T as getArcadeType,
  H as getViewInfo,
  ie as hasGeometryFunctions,
  se as hasGeometryOperations,
  B2 as hasVariable,
  Y as loadScriptDependencies,
  O as updateExecContext
};
//# sourceMappingURL=arcadeUtils-EVF3MVAK.js.map
