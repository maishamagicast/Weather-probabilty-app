import {
  i as i2
} from "./chunk-SNXPARJV.js";
import {
  t
} from "./chunk-LIWGRYNH.js";
import {
  L as L2
} from "./chunk-JUXSLKSN.js";
import {
  s as s2
} from "./chunk-Y2AI7GA5.js";
import {
  L
} from "./chunk-P3R3JSYO.js";
import {
  O,
  X
} from "./chunk-CAQUPYHC.js";
import {
  i3 as i,
  l2 as l,
  s2 as s
} from "./chunk-TJPLHZCD.js";

// node_modules/@arcgis/core/views/2d/engine/webgl/DisplayRecord.js
var _t = class _t {
  constructor(t5, e2, s6, i4, r2, h3, n3) {
    this.instanceId = t5, this.textureKey = e2, this.indexStart = s6, this.indexCount = i4, this.vertexStart = r2, this.vertexCount = h3, this.overlaps = n3;
  }
  updateBaseOffsets(t5) {
    this.vertexStart += t5.vertexFrom, this.indexStart += t5.indexFrom;
  }
  clone() {
    return new _t(this.instanceId, this.textureKey, this.indexStart, this.indexCount, this.vertexStart, this.vertexCount, this.overlaps);
  }
  static write(t5, e2, s6, i4, r2, h3, n3, a5) {
    t5.push(e2), t5.push(s6), t5.push(i4), t5.push(r2), t5.push(h3), t5.push(n3), t5.push(a5);
  }
  serialize(t5) {
    return t5.push(this.instanceId), t5.push(this.textureKey), t5.push(this.indexStart), t5.push(this.indexCount), t5.push(this.vertexStart), t5.push(this.vertexCount), t5.push(this.overlaps), t5;
  }
  static deserialize(e2) {
    const s6 = e2.readInt32(), i4 = e2.readInt32(), r2 = e2.readInt32(), h3 = e2.readInt32(), n3 = e2.readInt32(), a5 = e2.readInt32(), u2 = e2.readInt32();
    return new _t(s6, i4, r2, h3, n3, a5, u2);
  }
};
_t.byteSizeHint = 7 * Uint32Array.BYTES_PER_ELEMENT;
var t2 = _t;

// node_modules/@arcgis/core/views/2d/engine/webgl/util/serializationUtils.js
function e(e2, n3) {
  if (null !== n3) {
    e2.push(n3.length);
    for (const r2 of n3) r2.serialize(e2);
    return e2;
  }
  e2.push(0);
}
function n(e2, n3, r2) {
  const t5 = e2.readInt32(), o4 = new Array(t5);
  for (let i4 = 0; i4 < o4.length; i4++) o4[i4] = n3.deserialize(e2, r2);
  return o4;
}

// node_modules/@arcgis/core/views/2d/engine/webgl/DisplayEntity.js
var _s = class _s {
  constructor(t5, i4) {
    this.id = t5, this.sortKey = i4, this.records = [];
  }
  serialize(t5) {
    return t5.push(this.id), t5.writeF32(this.sortKey), e(t5, this.records), t5;
  }
  static deserialize(i4) {
    const e2 = i4.readInt32(), o4 = i4.readF32(), a5 = new _s(e2, o4);
    return a5.records = n(i4, t2) ?? [], a5;
  }
};
_s.byteSizeHint = 2 * Uint32Array.BYTES_PER_ELEMENT + t2.byteSizeHint;
var s3 = _s;

// node_modules/@arcgis/core/views/2d/engine/webgl/number.js
var n2 = new Float32Array(1);
var t3 = new Uint32Array(n2.buffer);
function a(r2) {
  return n2[0] = r2, t3[0];
}
function h(r2) {
  return t3[0] = r2, n2[0];
}
function s4(n3, t5) {
  return 65535 & n3 | t5 << 16;
}
function y(n3) {
  const t5 = a(n3), r2 = t5 >>> 31;
  let u2 = t5 >>> 23 & 255, o4 = 8388607 & t5;
  return u2 -= 127, u2 > 15 ? r2 << 15 | 31744 : u2 < -25 ? 0 : (u2 < -14 && (o4 += 8388608, o4 /= 2 ** (-14 - u2), u2 = -15), u2 += 15, o4 /= 8192, o4 = A(o4, 1023), r2 << 15 | u2 << 10 | o4);
}
function A(n3, t5) {
  const r2 = Math.floor(n3), u2 = n3 - r2;
  return r2 < t5 && (u2 > 0.5 || 0.5 === u2 && r2 % 2 == 1) ? r2 + 1 : r2;
}
function b(n3) {
  let t5 = n3 >>> 15, r2 = n3 >> 10 & 31, u2 = 1023 & n3;
  return t5 = t5 ? -1 : 1, r2 -= 15, u2 /= 1024, r2 > -15 ? u2 += 1 : r2 = -14, t5 * 2 ** r2 * u2;
}

// node_modules/@arcgis/core/views/2d/engine/webgl/shaderGraph/techniques/mesh/utils.js
function t4(t5) {
  const r2 = t5.map((({ name: e2, count: t6, type: r3 }) => `${e2}.${t6}.${r3}`)).join(",");
  return l(r2);
}
function r(e2, t5, o4, a5, c2, n3, s6) {
  if (e2.primitiveName === t5) {
    let t6 = a5?.readWithDefault(c2, n3, e2[o4] && s6);
    return "text" === e2.type && (t6 = t6.toString()), void (e2[o4] = t6);
  }
  if ("type" in e2 && null != e2.type) {
    if (e2.effects) for (const i4 of e2.effects) r(i4, t5, o4, a5, c2, n3, s6);
    switch (e2.type) {
      case "CIMPointSymbol":
      case "CIMLineSymbol":
      case "CIMPolygonSymbol":
        if (e2.symbolLayers) for (const i4 of e2.symbolLayers) r(i4, t5, o4, a5, c2, n3, s6);
        break;
      case "CIMTextSymbol":
        e2.symbol && r(e2.symbol, t5, o4, a5, c2, n3, s6);
        break;
      case "CIMHatchFill":
        e2.lineSymbol && r(e2.lineSymbol, t5, o4, a5, c2, n3, s6);
        break;
      case "CIMPictureMarker":
      case "CIMCharacterMarker":
      case "CIMVectorMarker":
        if (e2.markerPlacement && r(e2.markerPlacement, t5, o4, a5, c2, n3, s6), "CIMVectorMarker" === e2.type && e2.markerGraphics) for (const i4 of e2.markerGraphics) r(i4, t5, o4, a5, c2, n3, s6), r(i4.symbol, t5, o4, a5, c2, n3, s6);
    }
  }
}
var o = 400;
function a2(e2) {
  const t5 = Math.max(1.25 * e2.width, 20);
  return null != e2.effects && e2.effects.length > 0 ? o : t5;
}

// node_modules/@arcgis/core/views/2d/engine/webgl/shaderGraph/techniques/mesh/dataViewUtils.js
function o2(e2, o4, s6, f2) {
  const r2 = s6.packPrecisionFactor ?? 1;
  switch (s6.type) {
    case O.BYTE:
      if (1 === s6.count) e2.setInt8(f2 + s6.offset, o4 * r2);
      else for (let t5 = 0; t5 < s6.count; t5++) {
        const n3 = t5 * Int8Array.BYTES_PER_ELEMENT;
        e2.setInt8(f2 + s6.offset + n3, o4[t5] * r2);
      }
      break;
    case O.UNSIGNED_BYTE:
      if (1 === s6.count) e2.setUint8(f2 + s6.offset, o4 * r2);
      else for (let t5 = 0; t5 < s6.count; t5++) {
        const n3 = t5 * Uint8Array.BYTES_PER_ELEMENT;
        e2.setUint8(f2 + s6.offset + n3, o4[t5] * r2);
      }
      break;
    case O.SHORT:
      if (1 === s6.count) e2.setInt16(f2 + s6.offset, o4 * r2, true);
      else for (let t5 = 0; t5 < s6.count; t5++) {
        const n3 = t5 * Int16Array.BYTES_PER_ELEMENT;
        e2.setInt16(f2 + s6.offset + n3, o4[t5] * r2, true);
      }
      break;
    case O.UNSIGNED_SHORT:
      if (1 === s6.count) e2.setUint16(f2 + s6.offset, o4 * r2, true);
      else for (let t5 = 0; t5 < s6.count; t5++) {
        const n3 = t5 * Uint16Array.BYTES_PER_ELEMENT;
        e2.setUint16(f2 + s6.offset + n3, o4[t5] * r2, true);
      }
      break;
    case O.INT:
      if (1 === s6.count) e2.setInt32(f2 + s6.offset, o4 * r2, true);
      else for (let t5 = 0; t5 < s6.count; t5++) {
        const n3 = t5 * Int32Array.BYTES_PER_ELEMENT;
        e2.setInt32(f2 + s6.offset + n3, o4[t5] * r2, true);
      }
      break;
    case O.UNSIGNED_INT:
      if (1 === s6.count) e2.setUint32(f2 + s6.offset, o4 * r2, true);
      else for (let t5 = 0; t5 < s6.count; t5++) {
        const n3 = t5 * Uint32Array.BYTES_PER_ELEMENT;
        e2.setUint32(f2 + s6.offset + n3, o4[t5] * r2, true);
      }
      break;
    case O.FLOAT:
      if (1 === s6.count) e2.setFloat32(f2 + s6.offset, o4 * r2, true);
      else for (let t5 = 0; t5 < s6.count; t5++) {
        const n3 = t5 * Float32Array.BYTES_PER_ELEMENT;
        e2.setFloat32(f2 + s6.offset + n3, o4[t5] * r2, true);
      }
      break;
    case O.HALF_FLOAT:
      if (1 === s6.count) e2.setUint16(f2 + s6.offset, y(o4 * r2), true);
      else for (let n3 = 0; n3 < s6.count; n3++) {
        const E = n3 * Uint16Array.BYTES_PER_ELEMENT;
        e2.setUint16(f2 + s6.offset + E, y(o4[n3] * r2), true);
      }
  }
}
function s5(t5, o4, s6) {
  switch (o4.type) {
    case O.BYTE: {
      if (1 === o4.count) return t5.getInt8(s6 + o4.offset);
      const e2 = [];
      for (let n3 = 0; n3 < o4.count; n3++) {
        const f2 = n3 * Int8Array.BYTES_PER_ELEMENT;
        e2.push(t5.getInt8(s6 + o4.offset + f2));
      }
      return e2;
    }
    case O.UNSIGNED_BYTE: {
      if (1 === o4.count) return t5.getUint8(s6 + o4.offset);
      const e2 = [];
      for (let n3 = 0; n3 < o4.count; n3++) {
        const f2 = n3 * Uint8Array.BYTES_PER_ELEMENT;
        e2.push(t5.getUint8(s6 + o4.offset + f2));
      }
      return e2;
    }
    case O.SHORT: {
      if (1 === o4.count) return t5.getInt16(s6 + o4.offset, true);
      const e2 = [];
      for (let n3 = 0; n3 < o4.count; n3++) {
        const f2 = n3 * Int16Array.BYTES_PER_ELEMENT;
        e2.push(t5.getInt16(s6 + o4.offset + f2, true));
      }
      return e2;
    }
    case O.UNSIGNED_SHORT: {
      if (1 === o4.count) return t5.getUint16(s6 + o4.offset, true);
      const e2 = [];
      for (let n3 = 0; n3 < o4.count; n3++) {
        const f2 = n3 * Uint16Array.BYTES_PER_ELEMENT;
        e2.push(t5.getUint16(s6 + o4.offset + f2, true));
      }
      return e2;
    }
    case O.INT: {
      if (1 === o4.count) return t5.getInt32(s6 + o4.offset, true);
      const e2 = [];
      for (let n3 = 0; n3 < o4.count; n3++) {
        const f2 = n3 * Int32Array.BYTES_PER_ELEMENT;
        e2.push(t5.getInt32(s6 + o4.offset + f2, true));
      }
      return e2;
    }
    case O.UNSIGNED_INT: {
      if (1 === o4.count) return t5.getUint32(s6 + o4.offset, true);
      const e2 = [];
      for (let n3 = 0; n3 < o4.count; n3++) {
        const f2 = n3 * Uint32Array.BYTES_PER_ELEMENT;
        e2.push(t5.getUint32(s6 + o4.offset + f2, true));
      }
      return e2;
    }
    case O.FLOAT: {
      if (1 === o4.count) return t5.getFloat32(s6 + o4.offset, true);
      const e2 = [];
      for (let n3 = 0; n3 < o4.count; n3++) {
        const f2 = n3 * Float32Array.BYTES_PER_ELEMENT;
        e2.push(t5.getFloat32(s6 + o4.offset + f2, true));
      }
      return e2;
    }
    case O.HALF_FLOAT: {
      if (1 === o4.count) return b(t5.getUint16(s6 + o4.offset, true));
      const n3 = [];
      for (let f2 = 0; f2 < o4.count; f2++) {
        const r2 = f2 * Uint16Array.BYTES_PER_ELEMENT;
        n3.push(b(t5.getUint16(s6 + o4.offset + r2, true)));
      }
      return n3;
    }
  }
}

// node_modules/@arcgis/core/views/2d/engine/webgl/collisions/LabelMetric.js
var h2 = 2;
var a3 = class _a {
  constructor(e2, i4, t5, s6, r2, h3, a5, n3, l3, o4, d2, c2 = [], u2 = 0, f2 = 0) {
    this.displayId = e2, this.labelClassId = i4, this.labelIdHash = t5, this.hash = s6, this.anchorX = r2, this.anchorY = h3, this.directionX = a5, this.directionY = n3, this.maxScale = l3, this.minScale = o4, this.referenceBounds = d2, this.bounds = c2, this.recordStart = u2, this.recordCount = f2, this.priority = 0, this._colliders = null, this.uniqueSymbol = null, this.selectedForRendering = false;
  }
  get xTile() {
    return this.anchorX;
  }
  get yTile() {
    return this.anchorY;
  }
  colliders(t5) {
    if (!this._colliders) {
      const s6 = t5.attributeView, r2 = L;
      let a5 = this.referenceBounds?.size ?? 0;
      const n3 = t5.layerView.labelingCollisionInfos[0].vvEvaluators[0];
      if (null != n3) {
        const e2 = n3(s6.getVisualVariableData(this.displayId, L2.SIZE));
        a5 = isNaN(e2) || null == e2 || e2 === 1 / 0 ? a5 : e2;
      }
      const l3 = this.minScale ? t5.layerView.view.featuresTilingScheme.scaleToZoom(this.minScale) : 0, o4 = this.maxScale ? t5.layerView.view.featuresTilingScheme.scaleToZoom(this.maxScale) : 25, d2 = this.directionX * (r2 + a5 / 2), c2 = this.directionY * (r2 + a5 / 2);
      this._colliders = this.bounds.map(((e2) => ({ labelId: this.labelIdHash, xTile: this.anchorX, yTile: this.anchorY, dxPixels: e2.x - e2.halfWidth + d2, dyPixels: e2.y - e2.halfHeight + c2, hard: true, partIndex: 1, width: e2.width + h2, height: e2.height + h2, angle: 0, xScreen: 0, yScreen: 0, dxScreen: 0, dyScreen: 0, enabled: true, minLod: l3, maxLod: o4 })));
    }
    return this._colliders;
  }
  get id() {
    return this.displayId;
  }
  serialize(e2) {
    e2.push(this.displayId), e2.push(this.labelClassId), e2.push(this.labelIdHash), e2.push(this.hash), e2.push(this.recordStart), e2.push(this.recordCount), e2.writeF32(this.anchorX), e2.writeF32(this.anchorY), e2.writeF32(this.directionX), e2.writeF32(this.directionY), e2.writeF32(this.maxScale), e2.writeF32(this.minScale), this.referenceBounds ? (e2.writeF32(this.referenceBounds.size), e2.writeF32(this.referenceBounds.offsetX), e2.writeF32(this.referenceBounds.offsetY)) : (e2.writeF32(0), e2.writeF32(0), e2.writeF32(0)), e(e2, this.bounds);
  }
  static deserialize(e2) {
    const i4 = e2.readInt32(), s6 = e2.readInt32(), h3 = e2.readInt32(), n3 = e2.readInt32(), l3 = e2.readInt32(), o4 = e2.readInt32(), d2 = e2.readF32(), c2 = e2.readF32(), u2 = e2.readF32(), f2 = e2.readF32(), m2 = e2.readF32(), F = e2.readF32(), w = e2.readF32(), I = e2.readF32(), p2 = e2.readF32(), S = n(e2, i2) ?? [];
    return new _a(i4, s6, h3, n3, d2, c2, u2, f2, m2, F, { size: w, offsetX: I, offsetY: p2 }, S, l3, o4);
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/Utils.js
var a4 = () => i.getLogger("esri.views.2d.engine.webgl.Utils");
function o3(t5) {
  switch (t5) {
    case X.UNSIGNED_BYTE:
      return 1;
    case X.UNSIGNED_SHORT_4_4_4_4:
      return 2;
    case X.FLOAT:
      return 4;
    default:
      return void a4().error(new s("webgl-utils", `Unable to handle type ${t5}`));
  }
}
function i3(t5) {
  switch (t5) {
    case X.UNSIGNED_BYTE:
      return Uint8Array;
    case X.UNSIGNED_SHORT_4_4_4_4:
      return Uint16Array;
    case X.FLOAT:
      return Float32Array;
    default:
      return void a4().error(new s("webgl-utils", `Unable to handle type ${t5}`));
  }
}
function c(e2) {
  const t5 = /* @__PURE__ */ new Map();
  for (const r2 in e2) {
    const a5 = e2[r2];
    let o4 = 0;
    t5.set(r2, a5.map(((e3) => {
      const t6 = new t(e3.name, e3.count, e3.type, o4, 0, e3.normalized || false);
      return o4 += e3.count * s2(e3.type), t6;
    }))), t5.get(r2).forEach(((e3) => e3.stride = o4));
  }
  return t5;
}
var l2 = (e2) => {
  const t5 = /* @__PURE__ */ new Map();
  for (const r2 in e2) for (const n3 of e2[r2]) t5.set(n3.name, n3.location);
  return t5;
};
var u = (e2) => {
  const t5 = {};
  return e2.forEach(((e3, r2) => t5[r2] = e3?.length ? e3[0].stride : 0)), t5;
};
var m = /* @__PURE__ */ new Map();
var $ = (e2, t5) => {
  if (!m.has(e2)) {
    const r2 = c(t5), n3 = { strides: u(r2), bufferLayouts: r2, attributes: l2(t5) };
    m.set(e2, n3);
  }
  return m.get(e2);
};
var f = (e2) => e2.includes("data:image/svg+xml");
function d(e2) {
  const t5 = [];
  for (let r2 = 0; r2 < e2.length; r2++) t5.push(e2.charCodeAt(r2));
  return t5;
}
function p(e2) {
  if (null == e2) return "";
  const { type: t5 } = e2;
  switch (t5) {
    case "CIMMarkerPlacementAlongLineRandomSize":
      return `${t5}-${e2.seed}-${e2.randomization}`;
    case "CIMMarkerPlacementAlongLineVariableSize":
      return `${t5}-${e2.maxRandomOffset}-${e2.numberOfSizes}-${e2.seed}-${e2.variationMethod}`;
    case "CIMMarkerPlacementAtExtremities":
      return `${t5}-${e2.extremityPlacement}-${e2.offsetAlongLine}`;
    case "CIMMarkerPlacementAtRatioPositions":
      return `${t5}-${e2.beginPosition}-${e2.endPosition}-${e2.flipFirst}-${JSON.stringify(e2.positionArray)}`;
    case "CIMMarkerPlacementAtMeasuredUnits":
      return `${t5}-${e2.interval}-${e2.skipMarkerRate}-${e2.placeAtExtremities}`;
    case "CIMMarkerPlacementInsidePolygon":
      return `${t5}-${e2.stepX}-${e2.stepY}-${e2.randomness}-${e2.gridType}-${e2.seed}-${e2.shiftOddRows}`;
    case "CIMMarkerPlacementOnLine":
      return `${t5}-${e2.relativeTo}-${e2.startPointOffset}`;
    case "CIMMarkerPlacementOnVertices":
      return `${t5}-${e2.placeOnControlPoints}-${e2.placeOnEndPoints}-${e2.placeOnRegularVertices}`;
    case "CIMMarkerPlacementPolygonCenter":
      return `${t5}-${e2.method}`;
    default:
      return `${t5}`;
  }
}

export {
  t2 as t,
  n,
  s3 as s,
  a,
  h,
  s4 as s2,
  t4 as t2,
  r,
  a2,
  o2 as o,
  s5 as s3,
  a3,
  o3 as o2,
  i3 as i,
  $,
  f,
  d,
  p
};
//# sourceMappingURL=chunk-ISZVN2MZ.js.map
