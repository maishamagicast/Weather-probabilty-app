import {
  F,
  W,
  Y,
  v,
  z as z2
} from "./chunk-V7GE6MKB.js";
import "./chunk-THA6KPOR.js";
import {
  e as e3
} from "./chunk-VJFNPV3I.js";
import {
  d
} from "./chunk-PUDEDAPY.js";
import "./chunk-JXBJIDCW.js";
import "./chunk-RWIBDRMM.js";
import {
  c
} from "./chunk-MWIJEAM3.js";
import "./chunk-BGSPX4Z3.js";
import "./chunk-WBA6DQSU.js";
import {
  a as a3
} from "./chunk-BB6EK2RQ.js";
import {
  s as s2
} from "./chunk-R3HU2OBM.js";
import "./chunk-3ESJRJZD.js";
import {
  p as p3
} from "./chunk-L6GG77AZ.js";
import "./chunk-XOKYRVJ5.js";
import {
  A,
  l
} from "./chunk-D2DRG2DH.js";
import {
  e as e2
} from "./chunk-HOVLU5XA.js";
import {
  c as c2
} from "./chunk-2DCDAX3U.js";
import "./chunk-EZ5REY53.js";
import {
  p as p4
} from "./chunk-3HYSKSYM.js";
import {
  f as f2
} from "./chunk-EWP4DLQF.js";
import {
  p as p2
} from "./chunk-CHGKJUJ3.js";
import "./chunk-3YBQQHIP.js";
import "./chunk-OJQCHQYS.js";
import {
  t
} from "./chunk-N3W3EVP3.js";
import {
  b,
  b2,
  d as d2,
  l as l2,
  m as m4,
  p as p6,
  s as s3,
  y as y4
} from "./chunk-ZJXLBTN2.js";
import "./chunk-SIRTOV2N.js";
import {
  m as m3,
  u as u2
} from "./chunk-V7CFMRVF.js";
import "./chunk-LINWZZJL.js";
import {
  ae
} from "./chunk-QZISYUPA.js";
import "./chunk-HQRWZZNA.js";
import "./chunk-CKFS2QIU.js";
import "./chunk-PI2R2EZ2.js";
import "./chunk-JLGVQWP5.js";
import "./chunk-LCT65JMM.js";
import "./chunk-IR6JOM7Y.js";
import "./chunk-MK7DDFJN.js";
import {
  j
} from "./chunk-H2PFGMJP.js";
import {
  S
} from "./chunk-OFINLTIW.js";
import "./chunk-TIU3P5HE.js";
import "./chunk-EU5HNJUP.js";
import "./chunk-CJSURDZH.js";
import "./chunk-FFY3IMAS.js";
import {
  i as i2
} from "./chunk-JGQLR7O7.js";
import {
  g
} from "./chunk-YT2ORY5Z.js";
import "./chunk-2UINVE7X.js";
import "./chunk-KXZAYF3U.js";
import "./chunk-PHSQVJNW.js";
import "./chunk-KFNWBWN4.js";
import "./chunk-K55CXVYD.js";
import "./chunk-G2F62CY5.js";
import "./chunk-Q37ABIVM.js";
import "./chunk-VFMQPCCZ.js";
import "./chunk-63ZT5BWV.js";
import "./chunk-OPQ3FCJ4.js";
import "./chunk-W3BJJE6D.js";
import "./chunk-UZ3YWBWC.js";
import "./chunk-2EOHKZLO.js";
import "./chunk-W6SOR4OP.js";
import "./chunk-XF5GRUK5.js";
import {
  u,
  y as y2
} from "./chunk-CYQZCOHI.js";
import "./chunk-S7GLMIAQ.js";
import "./chunk-OUR2XGMQ.js";
import "./chunk-YIVJSMJO.js";
import "./chunk-QMUTCCDX.js";
import "./chunk-GCTSCKPO.js";
import "./chunk-6U4EGJOK.js";
import "./chunk-W7U4L72B.js";
import "./chunk-UICDKBDP.js";
import "./chunk-3M6ALZOH.js";
import "./chunk-QPV4BKBC.js";
import "./chunk-LQQCPLIT.js";
import "./chunk-4O46EK5T.js";
import "./chunk-UO2UKPG5.js";
import "./chunk-EMULKSUV.js";
import "./chunk-AY3JR4QM.js";
import {
  p as p5
} from "./chunk-DKFJHHQ4.js";
import "./chunk-Z34SUCTX.js";
import "./chunk-A2AZM62Y.js";
import {
  R
} from "./chunk-LQYJLB4P.js";
import "./chunk-D6GGPM6D.js";
import "./chunk-FQY65CBA.js";
import {
  m as m2
} from "./chunk-HH4Q2NN5.js";
import "./chunk-3CFYBBSV.js";
import "./chunk-AACFCXAP.js";
import "./chunk-ZT7UIVVR.js";
import {
  h
} from "./chunk-R25QZWQ7.js";
import "./chunk-BELQIHLO.js";
import "./chunk-BPI4BR4E.js";
import "./chunk-YVMULGDJ.js";
import "./chunk-CJDZN5K5.js";
import "./chunk-N77BULFI.js";
import "./chunk-6TZIEYTZ.js";
import "./chunk-UMUW6RKM.js";
import "./chunk-XRTNDGK2.js";
import "./chunk-A6R2FXH6.js";
import "./chunk-H6ZVHKNF.js";
import "./chunk-YAXW2DL6.js";
import "./chunk-QLKHFYAN.js";
import "./chunk-3TSZDV6B.js";
import "./chunk-P4O4YCLI.js";
import "./chunk-FV6ZNHFI.js";
import "./chunk-MSSQA3XK.js";
import "./chunk-PBKE5BCM.js";
import {
  q
} from "./chunk-FOALQHMM.js";
import "./chunk-7HS3ESHX.js";
import "./chunk-2CS746FZ.js";
import "./chunk-NEI5HAVK.js";
import "./chunk-RCOFAQFP.js";
import "./chunk-CO2J5JPW.js";
import "./chunk-CHAHOTAY.js";
import {
  y as y3
} from "./chunk-RZGBA4KS.js";
import "./chunk-FSYN2HHU.js";
import "./chunk-7I4TWCTW.js";
import {
  I as I2,
  g as g2
} from "./chunk-W5UOLFE2.js";
import "./chunk-AZ2S2PYZ.js";
import "./chunk-SCMB64VM.js";
import "./chunk-FOPBVVXE.js";
import "./chunk-INI6MHIQ.js";
import "./chunk-R7YP6EQJ.js";
import "./chunk-QUZZIDFR.js";
import "./chunk-CBCDVQSA.js";
import "./chunk-74GULGYB.js";
import "./chunk-RKF6WUZT.js";
import "./chunk-RMRI4NYS.js";
import "./chunk-YYLIW24Q.js";
import "./chunk-B7BH33JH.js";
import "./chunk-BLBN3L5Q.js";
import "./chunk-5EWIWLNU.js";
import {
  p
} from "./chunk-TOCH3L2K.js";
import {
  z
} from "./chunk-CBXZL53X.js";
import "./chunk-HYAO4PVV.js";
import "./chunk-SRNKPAJX.js";
import {
  a as a2,
  n
} from "./chunk-MOMLPET6.js";
import "./chunk-VNQUG2TO.js";
import "./chunk-EULNFFHG.js";
import "./chunk-SDIBXPSJ.js";
import "./chunk-LPCUYJ2B.js";
import "./chunk-3QHX4R4B.js";
import "./chunk-SMO33YG7.js";
import {
  f
} from "./chunk-LCBAL6ER.js";
import "./chunk-6JCZVSRM.js";
import "./chunk-LLGOMKTE.js";
import "./chunk-ZB6KRLRI.js";
import "./chunk-67AKDROO.js";
import "./chunk-CM3TIXEV.js";
import "./chunk-2AYGXVZI.js";
import {
  I
} from "./chunk-OUZJZB6I.js";
import "./chunk-WO5FLTVY.js";
import "./chunk-MGA7XBRB.js";
import "./chunk-XNUSHDFN.js";
import "./chunk-4AKMPOG7.js";
import "./chunk-2CJBZZN7.js";
import "./chunk-APMQAZ5Z.js";
import "./chunk-ZJQPHR3K.js";
import "./chunk-NJZD7WM5.js";
import {
  r as r2
} from "./chunk-CL7VLXUR.js";
import "./chunk-FCX4ZA3Z.js";
import {
  m2 as m
} from "./chunk-2ZPU5IZX.js";
import {
  a2 as a
} from "./chunk-S62CSPIH.js";
import {
  x
} from "./chunk-X26VPODZ.js";
import "./chunk-XNYPRDKK.js";
import "./chunk-JNYZ3I5R.js";
import {
  r
} from "./chunk-Y4BWIIWH.js";
import "./chunk-TTJIKWMC.js";
import "./chunk-CMEG2CKL.js";
import "./chunk-VHPBXBDE.js";
import "./chunk-6ACTD4UJ.js";
import "./chunk-5REYU5G2.js";
import {
  k,
  y
} from "./chunk-N626Y23H.js";
import {
  e,
  i3 as i,
  s2 as s
} from "./chunk-TJPLHZCD.js";
import {
  has
} from "./chunk-KLFJ5V5G.js";
import "./chunk-G26ADAPQ.js";

// node_modules/@arcgis/core/layers/graphics/sources/WFSSource.js
var F2 = class extends p {
  constructor() {
    super(...arguments), this._connection = null, this._workerHandler = null, this.capabilities = y2(false, false), this.type = "wfs", this.refresh = k((async () => {
      await this.load();
      const e4 = { customParameters: this.layer.customParameters, maxRecordCount: this.layer.maxRecordCount, maxTotalRecordCount: this.layer.maxTotalRecordCount, maxPageCount: this.layer.maxPageCount }, { extent: t2 } = await this._workerHandler.refresh(e4);
      return t2 && (this.sourceJSON.extent = t2), { dataChanged: true, updates: { extent: this.sourceJSON.extent } };
    }));
  }
  load(e4) {
    const t2 = null != e4 ? e4.signal : null;
    return this.addResolvingPromise(this._startWorker({ signal: t2 })), Promise.resolve(this);
  }
  destroy() {
    this._connection?.close(), this._connection = null, this._workerHandler = null;
  }
  async openPorts() {
    return await this.load(), this._connection.openPorts();
  }
  async queryFeatures(e4, t2 = {}) {
    const r3 = await this.queryFeaturesJSON(e4, t2);
    return g.fromJSON(r3);
  }
  async queryFeaturesJSON(e4, t2 = {}) {
    return await this.load(t2), this._workerHandler.queryFeatures(e4 ? e4.toJSON() : void 0, t2);
  }
  async queryFeatureCount(e4, t2 = {}) {
    return await this.load(t2), this._workerHandler.queryFeatureCount(e4 ? e4.toJSON() : void 0, t2);
  }
  async queryObjectIds(e4, t2 = {}) {
    return await this.load(t2), this._workerHandler.queryObjectIds(e4 ? e4.toJSON() : void 0, t2);
  }
  async queryExtent(e4, t2 = {}) {
    await this.load(t2);
    const r3 = await this._workerHandler.queryExtent(e4 ? e4.toJSON() : void 0, t2);
    return { count: r3.count, extent: z.fromJSON(r3.extent) };
  }
  async querySnapping(e4, t2 = {}) {
    return await this.load(t2), this._workerHandler.querySnapping(e4, t2);
  }
  async queryAttributeBins(e4, t2 = {}) {
    await this.load(t2);
    const r3 = await this._workerHandler.queryAttributeBins(e4?.toJSON(), t2);
    return i2.fromJSON(r3);
  }
  async _createLoadOptions(e4) {
    const { url: r3, customParameters: o, name: a4, namespaceUri: s4, fields: i3, geometryType: n2, maxRecordCount: l3, maxPageCount: u3, maxTotalRecordCount: p7, swapXY: m5 } = this.layer, w = "defaults" === this.layer.originOf("spatialReference") ? void 0 : this.layer.spatialReference;
    if (!r3) throw new s("wfs-layer:missing-url", "WFSLayer must be created with a url");
    this.wfsCapabilities || (this.wfsCapabilities = await v(r3, { customParameters: o, ...e4 }));
    const g3 = ["fields", "geometryType", "name", "namespaceUri", "swapXY"].some(((e5) => null == this.layer[e5])), S2 = g3 ? await W(this.wfsCapabilities, a4, s4, { spatialReference: w, customParameters: o, signal: e4?.signal }) : { ...z2(i3 ?? []), geometryType: n2, name: a4, namespaceUri: s4, spatialReference: w, swapXY: m5 }, F3 = Y(this.wfsCapabilities.readFeatureTypes(), S2.name, S2.namespaceUri), x2 = y3.toJSON(S2.geometryType), { operations: O } = this.wfsCapabilities, j2 = O.GetFeature.url, C = O.GetFeature.outputFormat;
    return { customParameters: o, featureType: F3, fields: S2.fields?.map(((e5) => e5.toJSON())) ?? [], geometryField: S2.geometryField, geometryType: x2, getFeatureUrl: j2, getFeatureOutputFormat: C, maxRecordCount: l3, maxPageCount: u3, maxTotalRecordCount: p7, objectIdField: S2.objectIdField, spatialReference: S2.spatialReference?.toJSON(), swapXY: !!S2.swapXY };
  }
  async _startWorker(e4) {
    const [t2, r3] = await y([this._createLoadOptions(e4), p5("WFSSourceWorker", { ...e4, strategy: has("feature-layers-workers") ? "dedicated" : "local", registryTarget: this })]), a4 = t2.error || r3.error || null, n2 = r3.value || null;
    if (a4) throw n2 && n2.close(), a4;
    const l3 = t2.value;
    this._connection = r3.value, this._workerHandler = this._connection.createInvokeProxy();
    const u3 = await this._workerHandler.load(l3, e4);
    for (const s4 of u3.warnings) i.getLogger(this.layer).warn("#load()", `${s4.message} (title: '${this.layer.title || "no title"}', id: '${this.layer.id ?? "no id"}')`, { warning: s4 });
    this.sourceJSON = { dateFieldsTimeReference: { timeZoneIANA: n }, extent: u3.extent, fields: l3.fields, geometryType: l3.geometryType, objectIdField: l3.objectIdField, geometryField: l3.geometryField, drawingInfo: u(l3.geometryType), name: l3.featureType.title, wfsInfo: { name: l3.featureType.name, featureUrl: l3.getFeatureUrl, maxFeatures: l3.maxRecordCount, swapXY: l3.swapXY, supportedSpatialReferences: l3.featureType.supportedSpatialReferences, version: "2.0.0", wfsNamespace: l3.featureType.namespaceUri } };
  }
};
r([m()], F2.prototype, "capabilities", void 0), r([m({ constructOnly: true })], F2.prototype, "layer", void 0), r([m()], F2.prototype, "sourceJSON", void 0), r([m()], F2.prototype, "type", void 0), r([m()], F2.prototype, "wfsCapabilities", void 0), F2 = r([a("esri.layers.graphics.sources.WFSSource")], F2);

// node_modules/@arcgis/core/layers/WFSLayer.js
var J;
var M = s2();
var Z = J = class extends p3(a3(e2(d(c(p2(c2(e3(f2(t(b2(j(S(h))))))))))))) {
  static fromWFSLayerInfo(e4) {
    const { customParameters: t2, fields: r3, geometryField: i3, geometryType: o, name: s4, namespaceUri: n2, objectIdField: p7, spatialReference: a4, swapXY: l3, url: m5, wfsCapabilities: d3 } = e4;
    return new J({ customParameters: t2, fields: r3, geometryField: i3, geometryType: o, name: s4, namespaceUri: n2, objectIdField: p7, spatialReference: a4, swapXY: l3, url: m5, wfsCapabilities: d3 });
  }
  constructor(e4) {
    super(e4), this.copyright = null, this.customParameters = null, this.dateFieldsTimeZone = null, this.definitionExpression = null, this.displayField = null, this.elevationInfo = null, this.featureUrl = void 0, this.fields = null, this.fieldsIndex = null, this.fullExtent = null, this.geometryType = null, this.labelsVisible = true, this.labelingInfo = null, this.legendEnabled = true, this.objectIdField = null, this.operationalLayerType = "WFS", this.maxRecordCount = 3e3, this.maxPageCount = 10, this.maxTotalRecordCount = 2e5, this.mode = 0, this.name = null, this.namespaceUri = null, this.outFields = null, this.popupEnabled = true, this.popupTemplate = null, this.screenSizePerspectiveEnabled = true, this.source = new F2({ layer: this }), this.spatialReference = f.WGS84, this.spatialReferences = [4326], this.swapXY = void 0, this.title = "WFS", this.type = "wfs", this.url = null, this.version = void 0;
  }
  destroy() {
    this.source?.destroy();
  }
  load(e4) {
    return this.addResolvingPromise(this.loadFromPortal({ supportedTypes: ["WFS"] }, e4).then((() => this.source.load(e4))).then((() => {
      this.read(this.source.sourceJSON, { origin: "service", url: this.parsedUrl }), this.revert(["objectIdField", "fields", "timeInfo", "spatialReference", "name", "namespaceUri"], "service"), g2(this.renderer, this.fieldsIndex), I2(this.timeInfo, this.fieldsIndex);
    }))), Promise.resolve(this);
  }
  get capabilities() {
    return this.source?.capabilities;
  }
  get createQueryVersion() {
    return this.commitProperty("definitionExpression"), this.commitProperty("timeExtent"), this.commitProperty("timeOffset"), this.commitProperty("geometryType"), this.commitProperty("capabilities"), (this._get("createQueryVersion") || 0) + 1;
  }
  get defaultPopupTemplate() {
    return this.createPopupTemplate();
  }
  writeFields(e4, t2, r3) {
    const o = e4.filter(((e5) => e5.name !== F));
    this.geometryField && o.unshift(new m2({ name: this.geometryField, alias: this.geometryField, type: "geometry" })), e(r3, o.map(((e5) => e5.toJSON())), t2);
  }
  get parsedUrl() {
    return I(this.url);
  }
  set renderer(e4) {
    g2(e4, this.fieldsIndex), this._set("renderer", e4);
  }
  get wfsCapabilities() {
    return this.source?.wfsCapabilities;
  }
  set wfsCapabilities(e4) {
    this.source && (this.source.wfsCapabilities = e4);
  }
  createPopupTemplate(e4) {
    return p4(this, e4);
  }
  createQuery() {
    const e4 = new R({ returnGeometry: true, outFields: ["*"], where: this.definitionExpression || "1=1" }), { timeOffset: t2, timeExtent: r3 } = this;
    return e4.timeExtent = null != t2 && null != r3 ? r3.offset(-t2.value, t2.unit) : r3 || null, e4;
  }
  getFieldDomain(e4, t2) {
    return this.getField(e4)?.domain;
  }
  getField(e4) {
    return this.fieldsIndex?.get(e4);
  }
  queryFeatures(e4, t2) {
    return this.load().then((() => this.source.queryFeatures(R.from(e4) || this.createQuery(), t2))).then(((e5) => {
      if (e5?.features) for (const t3 of e5.features) t3.layer = t3.sourceLayer = this;
      return e5;
    }));
  }
  queryObjectIds(e4, t2) {
    return this.load().then((() => this.source.queryObjectIds(R.from(e4) || this.createQuery(), t2)));
  }
  queryFeatureCount(e4, t2) {
    return this.load().then((() => this.source.queryFeatureCount(R.from(e4) || this.createQuery(), t2)));
  }
  queryExtent(e4, t2) {
    return this.load().then((() => this.source.queryExtent(R.from(e4) || this.createQuery(), t2)));
  }
  async queryAttributeBins(e4, t2) {
    const { source: r3, capabilities: i3 } = await this.load();
    ae(e4, i3, "WFSLayer");
    const o = await import("./AttributeBinsQuery-WK2S6C5J.js"), s4 = await r3.queryAttributeBins(o.default.from(e4), t2);
    if (s4.features) for (const n2 of s4.features) n2.layer = n2.sourceLayer = this;
    return s4;
  }
  async hasDataChanged() {
    try {
      const { dataChanged: e4, updates: t2 } = await this.source.refresh();
      return null != t2 && this.read(t2, { origin: "service", url: this.parsedUrl, ignoreDefaults: true }), e4;
    } catch {
    }
    return false;
  }
};
r([m({ readOnly: true })], Z.prototype, "capabilities", null), r([m({ type: String })], Z.prototype, "copyright", void 0), r([m({ readOnly: true })], Z.prototype, "createQueryVersion", null), r([m({ json: { name: "wfsInfo.customParameters", write: { overridePolicy: (e4) => ({ enabled: !!(e4 && Object.keys(e4).length > 0), ignoreOrigin: true }) } } })], Z.prototype, "customParameters", void 0), r([m(a2("dateFieldsTimeReference"))], Z.prototype, "dateFieldsTimeZone", void 0), r([m({ readOnly: true })], Z.prototype, "defaultPopupTemplate", null), r([m({ type: String, json: { name: "layerDefinition.definitionExpression", write: { enabled: true, allowNull: true } } })], Z.prototype, "definitionExpression", void 0), r([m({ type: String })], Z.prototype, "displayField", void 0), r([m(m4)], Z.prototype, "elevationInfo", void 0), r([m({ type: String, readOnly: true, json: { name: "wfsInfo.featureUrl", write: { ignoreOrigin: true, isRequired: true } } })], Z.prototype, "featureUrl", void 0), r([m({ type: [m2], json: { name: "layerDefinition.fields", write: { ignoreOrigin: true, isRequired: true }, origins: { service: { name: "fields" } } } })], Z.prototype, "fields", void 0), r([r2("fields")], Z.prototype, "writeFields", null), r([m(M.fieldsIndex)], Z.prototype, "fieldsIndex", void 0), r([m({ type: z, json: { name: "extent" } })], Z.prototype, "fullExtent", void 0), r([m()], Z.prototype, "geometryField", void 0), r([m({ type: String, json: { read: { source: "layerDefinition.geometryType", reader: y3.read }, write: { target: "layerDefinition.geometryType", writer: y3.write, ignoreOrigin: true }, origins: { service: { read: y3.read } } } })], Z.prototype, "geometryType", void 0), r([m({ type: String })], Z.prototype, "id", void 0), r([m(p6)], Z.prototype, "labelsVisible", void 0), r([m({ type: [A], json: { name: "layerDefinition.drawingInfo.labelingInfo", read: { reader: l }, write: true } })], Z.prototype, "labelingInfo", void 0), r([m(d2)], Z.prototype, "legendEnabled", void 0), r([m({ type: ["show", "hide"] })], Z.prototype, "listMode", void 0), r([m({ type: String })], Z.prototype, "objectIdField", void 0), r([m({ type: ["WFS"] })], Z.prototype, "operationalLayerType", void 0), r([m({ type: x, json: { name: "wfsInfo.maxFeatures", write: { ignoreOrigin: true, isRequired: true } } })], Z.prototype, "maxRecordCount", void 0), r([m({ type: x })], Z.prototype, "maxPageCount", void 0), r([m({ type: x })], Z.prototype, "maxTotalRecordCount", void 0), r([m({ type: [0], readOnly: true, json: { origins: { "web-map": { write: { ignoreOrigin: true, isRequired: true } } } } })], Z.prototype, "mode", void 0), r([m({ type: String, json: { name: "wfsInfo.name", write: { ignoreOrigin: true, isRequired: true } } })], Z.prototype, "name", void 0), r([m({ type: String, json: { name: "wfsInfo.wfsNamespace", write: { ignoreOrigin: true, isRequired: true } } })], Z.prototype, "namespaceUri", void 0), r([m(b)], Z.prototype, "opacity", void 0), r([m(M.outFields)], Z.prototype, "outFields", void 0), r([m({ readOnly: true })], Z.prototype, "parsedUrl", null), r([m(l2)], Z.prototype, "popupEnabled", void 0), r([m({ type: q, json: { name: "popupInfo", write: true } })], Z.prototype, "popupTemplate", void 0), r([m({ types: m3, json: { origins: { service: { name: "drawingInfo.renderer" }, "web-scene": { types: u2, name: "layerDefinition.drawingInfo.renderer", write: true } }, name: "layerDefinition.drawingInfo.renderer", write: { ignoreOrigin: true } } })], Z.prototype, "renderer", null), r([m(s3)], Z.prototype, "screenSizePerspectiveEnabled", void 0), r([m({ readOnly: true })], Z.prototype, "source", void 0), r([m({ type: f, json: { name: "layerDefinition.spatialReference", write: { ignoreOrigin: true, isRequired: true }, origins: { service: { name: "extent.spatialReference" } } } })], Z.prototype, "spatialReference", void 0), r([m({ readOnly: true, type: [x], json: { name: "wfsInfo.supportedSpatialReferences", write: { ignoreOrigin: true, isRequired: true } } })], Z.prototype, "spatialReferences", void 0), r([m({ type: Boolean, value: false, json: { name: "wfsInfo.swapXY", write: { ignoreOrigin: true, isRequired: true } } })], Z.prototype, "swapXY", void 0), r([m({ json: { write: { ignoreOrigin: true, isRequired: true }, origins: { service: { name: "name" } } } })], Z.prototype, "title", void 0), r([m({ json: { read: false }, readOnly: true })], Z.prototype, "type", void 0), r([m(y4)], Z.prototype, "url", void 0), r([m({ type: String, readOnly: true, json: { name: "wfsInfo.version", write: { ignoreOrigin: true, isRequired: true } } })], Z.prototype, "version", void 0), r([m()], Z.prototype, "wfsCapabilities", null), Z = J = r([a("esri.layers.WFSLayer")], Z);
var _ = Z;
export {
  _ as default
};
//# sourceMappingURL=WFSLayer-YUABJ2RN.js.map
