import {
  t
} from "./chunk-BLUWNVP6.js";
import "./chunk-XRPPUYTZ.js";
import {
  O
} from "./chunk-KAVZRVPC.js";
import "./chunk-3DDYAE2Z.js";
import "./chunk-PE6RTTM2.js";
import "./chunk-HSYGCPAM.js";
import "./chunk-U3M2HTCF.js";
import "./chunk-G6DMFUCZ.js";
import "./chunk-6PL4I2QQ.js";
import {
  S
} from "./chunk-R4ARMIGB.js";
import {
  u
} from "./chunk-M6JFBQWH.js";
import "./chunk-GY7Z7OPO.js";
import "./chunk-JRBH6HCP.js";
import "./chunk-TI4LRNX7.js";
import "./chunk-JOKMLVBH.js";
import "./chunk-OBI6XSOO.js";
import "./chunk-ZYWMFOAJ.js";
import "./chunk-6HU6D6AI.js";
import "./chunk-CO23VBIK.js";
import "./chunk-QFNAF2OO.js";
import "./chunk-RYUENKYI.js";
import "./chunk-OJQCHQYS.js";
import "./chunk-NA4PNORD.js";
import "./chunk-7MEIWNUT.js";
import "./chunk-TRRRRFK2.js";
import "./chunk-W7HTQBDK.js";
import "./chunk-ISZVN2MZ.js";
import "./chunk-YF3MIHOZ.js";
import "./chunk-Q2JFTIYQ.js";
import "./chunk-SNXPARJV.js";
import "./chunk-WKQKH2TM.js";
import "./chunk-WGJD7U4H.js";
import "./chunk-OUBBZ23V.js";
import "./chunk-7WMSTTK2.js";
import "./chunk-UP64JZZX.js";
import "./chunk-2EA3JV2W.js";
import "./chunk-QIDR2RCE.js";
import "./chunk-EU5HNJUP.js";
import "./chunk-FFY3IMAS.js";
import "./chunk-PGNIZQW2.js";
import "./chunk-LSXG3EQM.js";
import "./chunk-VQWEDC6T.js";
import "./chunk-KXZAYF3U.js";
import "./chunk-PHSQVJNW.js";
import "./chunk-KFNWBWN4.js";
import "./chunk-K55CXVYD.js";
import "./chunk-PBRYZOOK.js";
import "./chunk-GS5DZQYM.js";
import "./chunk-ZG3HABK4.js";
import "./chunk-63ZT5BWV.js";
import "./chunk-LIWGRYNH.js";
import "./chunk-LOLNWH3R.js";
import "./chunk-2EOHKZLO.js";
import "./chunk-S7GLMIAQ.js";
import "./chunk-PXNA3G6N.js";
import "./chunk-KZ2G7XW2.js";
import "./chunk-QMUTCCDX.js";
import "./chunk-24S6C5S6.js";
import "./chunk-7Y4U2JD3.js";
import "./chunk-GCTSCKPO.js";
import "./chunk-6U4EGJOK.js";
import "./chunk-W7U4L72B.js";
import "./chunk-RWNJO2QP.js";
import "./chunk-3M6ALZOH.js";
import "./chunk-QPV4BKBC.js";
import "./chunk-DDDZPNGZ.js";
import "./chunk-UO2UKPG5.js";
import "./chunk-EMULKSUV.js";
import "./chunk-AY3JR4QM.js";
import "./chunk-YXTIORDS.js";
import "./chunk-7ASGQ7X4.js";
import "./chunk-DL2726UG.js";
import "./chunk-AKZZRLKD.js";
import "./chunk-746KDGCX.js";
import "./chunk-SVGSXWMQ.js";
import "./chunk-IFDA5FOT.js";
import "./chunk-D5KSFCG5.js";
import "./chunk-JUXSLKSN.js";
import "./chunk-YGH6TKDR.js";
import "./chunk-QNRDEVXA.js";
import "./chunk-KW37MFF6.js";
import "./chunk-QIPPWPN2.js";
import "./chunk-Y2AI7GA5.js";
import "./chunk-P3R3JSYO.js";
import "./chunk-CAQUPYHC.js";
import "./chunk-2RL34CVC.js";
import "./chunk-BNQMKYX6.js";
import "./chunk-B6C2GOG6.js";
import "./chunk-K3VYMAVM.js";
import "./chunk-FPALEK52.js";
import "./chunk-LQYJLB4P.js";
import "./chunk-D6GGPM6D.js";
import "./chunk-FQY65CBA.js";
import "./chunk-HH4Q2NN5.js";
import "./chunk-IR4HVW2K.js";
import "./chunk-OT2P27SF.js";
import "./chunk-XJOLJK3F.js";
import "./chunk-3CFYBBSV.js";
import "./chunk-ZVNJ2S2Z.js";
import "./chunk-KPGNM4LZ.js";
import "./chunk-7OH24VUH.js";
import "./chunk-AACFCXAP.js";
import "./chunk-P5DG4SNT.js";
import "./chunk-BPI4BR4E.js";
import "./chunk-CJDZN5K5.js";
import "./chunk-N77BULFI.js";
import "./chunk-6TZIEYTZ.js";
import "./chunk-UMUW6RKM.js";
import "./chunk-XRTNDGK2.js";
import "./chunk-A6R2FXH6.js";
import "./chunk-H6ZVHKNF.js";
import "./chunk-YAXW2DL6.js";
import "./chunk-P4O4YCLI.js";
import {
  d
} from "./chunk-PBKE5BCM.js";
import "./chunk-FOALQHMM.js";
import "./chunk-7HS3ESHX.js";
import "./chunk-2CS746FZ.js";
import "./chunk-NEI5HAVK.js";
import "./chunk-RCOFAQFP.js";
import "./chunk-CO2J5JPW.js";
import "./chunk-CHAHOTAY.js";
import "./chunk-RZGBA4KS.js";
import "./chunk-FSYN2HHU.js";
import "./chunk-7I4TWCTW.js";
import "./chunk-W5UOLFE2.js";
import "./chunk-AZ2S2PYZ.js";
import "./chunk-SCMB64VM.js";
import "./chunk-FOPBVVXE.js";
import "./chunk-INI6MHIQ.js";
import "./chunk-R7YP6EQJ.js";
import "./chunk-QUZZIDFR.js";
import "./chunk-CBCDVQSA.js";
import {
  V
} from "./chunk-74GULGYB.js";
import "./chunk-RKF6WUZT.js";
import "./chunk-RMRI4NYS.js";
import "./chunk-YYLIW24Q.js";
import "./chunk-B7BH33JH.js";
import "./chunk-BLBN3L5Q.js";
import "./chunk-5EWIWLNU.js";
import "./chunk-TOCH3L2K.js";
import "./chunk-CBXZL53X.js";
import {
  a as a2,
  h,
  l
} from "./chunk-HYAO4PVV.js";
import "./chunk-SRNKPAJX.js";
import "./chunk-MOMLPET6.js";
import "./chunk-VNQUG2TO.js";
import "./chunk-EULNFFHG.js";
import "./chunk-SDIBXPSJ.js";
import "./chunk-LPCUYJ2B.js";
import "./chunk-3QHX4R4B.js";
import "./chunk-SMO33YG7.js";
import "./chunk-LCBAL6ER.js";
import "./chunk-6JCZVSRM.js";
import "./chunk-LLGOMKTE.js";
import "./chunk-ZB6KRLRI.js";
import "./chunk-67AKDROO.js";
import "./chunk-CM3TIXEV.js";
import "./chunk-2AYGXVZI.js";
import "./chunk-OUZJZB6I.js";
import "./chunk-WO5FLTVY.js";
import "./chunk-MGA7XBRB.js";
import "./chunk-XNUSHDFN.js";
import "./chunk-4AKMPOG7.js";
import "./chunk-2CJBZZN7.js";
import "./chunk-APMQAZ5Z.js";
import "./chunk-ZJQPHR3K.js";
import "./chunk-NJZD7WM5.js";
import "./chunk-CL7VLXUR.js";
import "./chunk-FCX4ZA3Z.js";
import "./chunk-2ZPU5IZX.js";
import {
  a2 as a
} from "./chunk-S62CSPIH.js";
import "./chunk-X26VPODZ.js";
import "./chunk-XNYPRDKK.js";
import "./chunk-JNYZ3I5R.js";
import {
  r
} from "./chunk-Y4BWIIWH.js";
import "./chunk-TTJIKWMC.js";
import "./chunk-CMEG2CKL.js";
import "./chunk-VHPBXBDE.js";
import "./chunk-6ACTD4UJ.js";
import "./chunk-5REYU5G2.js";
import {
  e
} from "./chunk-N626Y23H.js";
import "./chunk-TJPLHZCD.js";
import {
  L
} from "./chunk-KLFJ5V5G.js";
import "./chunk-G26ADAPQ.js";

// node_modules/@arcgis/core/views/2d/layers/MapNotesLayerView2D.js
var d2 = "sublayers";
var u2 = "layerView";
var f = /* @__PURE__ */ new Set(["default"]);
var m = class extends S(u) {
  constructor() {
    super(...arguments), this._highlightIds = /* @__PURE__ */ new Map();
  }
  *graphicsViews() {
    null == this._graphicsViewsFeatureCollectionMap ? null == this._graphicsViews ? yield* [] : yield* this._graphicsViews : yield* this._graphicsViewsFeatureCollectionMap.keys();
  }
  async hitTest(i, e2) {
    return Array.from(this.graphicsViews(), ((e3) => {
      const s = e3.hitTest(i);
      if (null != this._graphicsViewsFeatureCollectionMap) {
        const i2 = this._graphicsViewsFeatureCollectionMap.get(e3);
        for (const e4 of s) !e4.popupTemplate && i2.popupTemplate && (e4.popupTemplate = i2.popupTemplate), e4.sourceLayer = e4.layer = this.layer;
      }
      return s;
    })).flat().map(((e3) => ({ type: "graphic", graphic: e3, layer: this.layer, mapPoint: i })));
  }
  highlight(i, h2 = "default") {
    let a3;
    "number" == typeof i ? a3 = [i] : i instanceof d ? a3 = [i.uid] : Array.isArray(i) && i.length > 0 ? a3 = "number" == typeof i[0] ? i : i.map(((i2) => i2 && i2.uid)) : V.isCollection(i) && (a3 = i.map(((i2) => i2 && i2.uid)).toArray());
    const o = a3?.filter(L);
    return o?.length ? (this._addHighlight(o), e((() => this._removeHighlight(o)))) : e();
  }
  update(i) {
    for (const e2 of this.graphicsViews()) e2.processUpdate(i);
  }
  attach() {
    const i = this.view, e2 = () => this.requestUpdate(), s = this.layer.featureCollections;
    if (null != s && s.length) {
      this._graphicsViewsFeatureCollectionMap = /* @__PURE__ */ new Map();
      for (const t2 of s) {
        const s2 = new t(this.view.featuresTilingScheme), r2 = new O({ view: i, graphics: t2.source, renderer: t2.renderer, requestUpdateCallback: e2, container: s2 });
        this._graphicsViewsFeatureCollectionMap.set(r2, t2), this.container.addChild(r2.container), this.addHandles([l((() => t2.visible), ((i2) => r2.container.visible = i2), h), l((() => r2.updating), (() => this.notifyChange("updating")), h)], u2);
      }
      this._updateHighlight();
    } else null != this.layer.sublayers && this.addHandles(a2((() => this.layer.sublayers), "change", (() => this._createGraphicsViews()), { onListenerAdd: () => this._createGraphicsViews(), onListenerRemove: () => this._destroyGraphicsViews() }), d2);
  }
  detach() {
    this._destroyGraphicsViews(), this.removeHandles(d2);
  }
  moveEnd() {
  }
  viewChange() {
    for (const i of this.graphicsViews()) i.viewChange();
  }
  isUpdating() {
    for (const i of this.graphicsViews()) if (i.updating) return true;
    return false;
  }
  _destroyGraphicsViews() {
    this.container.removeAllChildren(), this.removeHandles(u2);
    for (const i of this.graphicsViews()) i.destroy();
    this._graphicsViews = null, this._graphicsViewsFeatureCollectionMap = null;
  }
  _createGraphicsViews() {
    if (this._destroyGraphicsViews(), null == this.layer.sublayers) return;
    const i = [], e2 = this.view, s = () => this.requestUpdate();
    for (const t2 of this.layer.sublayers) {
      const r2 = new t(this.view.featuresTilingScheme);
      r2.fadeTransitionEnabled = true;
      const o = new O({ view: e2, graphics: t2.graphics, requestUpdateCallback: s, container: r2 });
      this.addHandles([t2.on("graphic-update", o.graphicUpdateHandler), l((() => t2.visible), ((i2) => o.container.visible = i2), h), l((() => o.updating), (() => this.notifyChange("updating")), h)], u2), this.container.addChild(o.container), i.push(o);
    }
    this._graphicsViews = i, this._updateHighlight();
  }
  _addHighlight(i) {
    for (const e2 of i) if (this._highlightIds.has(e2)) {
      const i2 = this._highlightIds.get(e2);
      this._highlightIds.set(e2, i2 + 1);
    } else this._highlightIds.set(e2, 1);
    this._updateHighlight();
  }
  _removeHighlight(i) {
    for (const e2 of i) if (this._highlightIds.has(e2)) {
      const i2 = this._highlightIds.get(e2) - 1;
      0 === i2 ? this._highlightIds.delete(e2) : this._highlightIds.set(e2, i2);
    }
    this._updateHighlight();
  }
  _updateHighlight() {
    const i = Array.from(this._highlightIds.keys()), e2 = this._getHighlightBits(f.values());
    for (const s of this.graphicsViews()) s.setHighlight(i.map(((i2) => ({ objectId: i2, highlightFlags: e2 }))));
  }
};
m = r([a("esri.views.2d.layers.MapNotesLayerView2D")], m);
var w = m;
export {
  w as default
};
//# sourceMappingURL=MapNotesLayerView2D-7UFLQCQE.js.map
