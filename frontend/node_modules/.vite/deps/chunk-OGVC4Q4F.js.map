{
  "version": 3,
  "sources": ["../../@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/hud/HUD.glsl.js", "../../@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/hud/AlignPixel.glsl.js", "../../@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/hud/HUDRenderStyle.js", "../../@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/hud/HUDVisibility.glsl.js"],
  "sourcesContent": ["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.33/esri/copyright.txt for details.\n*/\nimport{addVerticalOffset as e}from\"../attributes/VerticalOffset.glsl.js\";import{ScreenSizePerspective as t,addScreenSizePerspectiveAlignment as o}from\"../util/ScreenSizePerspective.glsl.js\";import{addProjViewLocalOrigin as a,addCameraPosition as s,addViewNormal as i,addPixelRatio as r}from\"../util/View.glsl.js\";import{Float4BindUniform as n}from\"../../shaderModules/Float4BindUniform.js\";import{FloatBindUniform as l}from\"../../shaderModules/FloatBindUniform.js\";import{FloatPassUniform as f}from\"../../shaderModules/FloatPassUniform.js\";import{glsl as c}from\"../../shaderModules/glsl.js\";import{VertexAttribute as p}from\"../../../lib/VertexAttribute.js\";const d=.5;function u(u,v){u.include(t),u.attributes.add(p.POSITION,\"vec3\"),u.attributes.add(p.NORMAL,\"vec3\"),u.attributes.add(p.CENTEROFFSETANDDISTANCE,\"vec4\");const m=u.vertex;a(m,v),s(m,v),m.uniforms.add(new n(\"viewport\",(e=>e.camera.fullViewport)),new f(\"polygonOffset\",(e=>e.shaderPolygonOffset)),new l(\"cameraGroundRelative\",(e=>e.camera.aboveGround?1:-1))),v.hasVerticalOffset&&e(m),m.code.add(c`struct ProjectHUDAux {\nvec3 posModel;\nvec3 posView;\nvec3 vnormal;\nfloat distanceToCamera;\nfloat absCosAngle;\n};`),m.code.add(c`\n    float applyHUDViewDependentPolygonOffset(float pointGroundDistance, float absCosAngle, inout vec3 posView) {\n      float pointGroundSign = ${v.terrainDepthTest?c.float(0):c`sign(pointGroundDistance)`};\n      if (pointGroundSign == 0.0) {\n        pointGroundSign = cameraGroundRelative;\n      }\n\n      // cameraGroundRelative is -1 if camera is below ground, 1 if above ground\n      // groundRelative is 1 if both camera and symbol are on the same side of the ground, -1 otherwise\n      float groundRelative = cameraGroundRelative * pointGroundSign;\n\n      // view angle dependent part of polygon offset emulation: we take the absolute value because the sign that is\n      // dropped is instead introduced using the ground-relative position of the symbol and the camera\n      if (polygonOffset > .0) {\n        float cosAlpha = clamp(absCosAngle, 0.01, 1.0);\n        float tanAlpha = sqrt(1.0 - cosAlpha * cosAlpha) / cosAlpha;\n        float factor = (1.0 - tanAlpha / viewport[2]);\n\n        // same side of the terrain\n        if (groundRelative > 0.0) {\n          posView *= factor;\n        }\n        // opposite sides of the terrain\n        else {\n          posView /= factor;\n        }\n      }\n\n      return groundRelative;\n    }\n  `),v.draped&&!v.hasVerticalOffset||i(m),v.draped||(m.uniforms.add(new l(\"perDistancePixelRatio\",(e=>Math.tan(e.camera.fovY/2)/(e.camera.fullViewport[2]/2)))),m.code.add(c`\n    void applyHUDVerticalGroundOffset(vec3 normalModel, inout vec3 posModel, inout vec3 posView) {\n      float distanceToCamera = length(posView);\n\n      // Compute offset in world units for a half pixel shift\n      float pixelOffset = distanceToCamera * perDistancePixelRatio * ${c.float(d)};\n\n      // Apply offset along normal in the direction away from the ground surface\n      vec3 modelOffset = normalModel * cameraGroundRelative * pixelOffset;\n\n      // Apply the same offset also on the view space position\n      vec3 viewOffset = (viewNormal * vec4(modelOffset, 1.0)).xyz;\n\n      posModel += modelOffset;\n      posView += viewOffset;\n    }\n  `)),v.screenCenterOffsetUnitsEnabled&&r(m),v.hasScreenSizePerspective&&o(m),m.code.add(c`\n    vec4 projectPositionHUD(out ProjectHUDAux aux) {\n      vec3 centerOffset = centerOffsetAndDistance.xyz;\n      float pointGroundDistance = centerOffsetAndDistance.w;\n\n      aux.posModel = position;\n      aux.posView = (view * vec4(aux.posModel, 1.0)).xyz;\n      aux.vnormal = normal;\n      ${v.draped?\"\":\"applyHUDVerticalGroundOffset(aux.vnormal, aux.posModel, aux.posView);\"}\n\n      // Screen sized offset in world space, used for example for line callouts\n      // Note: keep this implementation in sync with the CPU implementation, see\n      //   - MaterialUtil.verticalOffsetAtDistance\n      //   - HUDMaterial.applyVerticalOffsetTransformation\n\n      aux.distanceToCamera = length(aux.posView);\n\n      vec3 viewDirObjSpace = normalize(cameraPosition - aux.posModel);\n      float cosAngle = dot(aux.vnormal, viewDirObjSpace);\n\n      aux.absCosAngle = abs(cosAngle);\n\n      ${v.hasScreenSizePerspective&&(v.hasVerticalOffset||v.screenCenterOffsetUnitsEnabled)?\"vec3 perspectiveFactor = screenSizePerspectiveScaleFactor(aux.absCosAngle, aux.distanceToCamera, screenSizePerspectiveAlignment);\":\"\"}\n\n      ${v.hasVerticalOffset?v.hasScreenSizePerspective?\"float verticalOffsetScreenHeight = applyScreenSizePerspectiveScaleFactorFloat(verticalOffset.x, perspectiveFactor);\":\"float verticalOffsetScreenHeight = verticalOffset.x;\":\"\"}\n\n      ${v.hasVerticalOffset?c`\n            float worldOffset = clamp(verticalOffsetScreenHeight * verticalOffset.y * aux.distanceToCamera, verticalOffset.z, verticalOffset.w);\n            vec3 modelOffset = aux.vnormal * worldOffset;\n            aux.posModel += modelOffset;\n            vec3 viewOffset = (viewNormal * vec4(modelOffset, 1.0)).xyz;\n            aux.posView += viewOffset;\n            // Since we elevate the object, we need to take that into account\n            // in the distance to ground\n            pointGroundDistance += worldOffset;`:\"\"}\n\n      float groundRelative = applyHUDViewDependentPolygonOffset(pointGroundDistance, aux.absCosAngle, aux.posView);\n\n      ${v.screenCenterOffsetUnitsEnabled?\"\":c`\n            // Apply x/y in view space, but z in screen space (i.e. along posView direction)\n            aux.posView += vec3(centerOffset.x, centerOffset.y, 0.0);\n\n            // Same material all have same z != 0.0 condition so should not lead to\n            // branch fragmentation and will save a normalization if it's not needed\n            if (centerOffset.z != 0.0) {\n              aux.posView -= normalize(aux.posView) * centerOffset.z;\n            }\n          `}\n\n      vec4 posProj = proj * vec4(aux.posView, 1.0);\n\n      ${v.screenCenterOffsetUnitsEnabled?v.hasScreenSizePerspective?\"float centerOffsetY = applyScreenSizePerspectiveScaleFactorFloat(centerOffset.y, perspectiveFactor);\":\"float centerOffsetY = centerOffset.y;\":\"\"}\n\n      ${v.screenCenterOffsetUnitsEnabled?\"posProj.xy += vec2(centerOffset.x, centerOffsetY) * pixelRatio * 2.0 / viewport.zw * posProj.w;\":\"\"}\n\n      // constant part of polygon offset emulation\n      posProj.z -= groundRelative * polygonOffset * posProj.w;\n      return posProj;\n    }\n  `)}export{u as HUD,d as HUDVerticalPixelOffset};\n", "/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.33/esri/copyright.txt for details.\n*/\nimport{BooleanBindUniform as e}from\"../../shaderModules/BooleanBindUniform.js\";import{glsl as i}from\"../../shaderModules/glsl.js\";function l(l){l.uniforms.add(new e(\"alignPixelEnabled\",(e=>e.alignPixelEnabled))),l.code.add(i`vec4 alignToPixelCenter(vec4 clipCoord, vec2 widthHeight) {\nif (!alignPixelEnabled)\nreturn clipCoord;\nvec2 xy = vec2(0.500123) + 0.5 * clipCoord.xy / clipCoord.w;\nvec2 pixelSz = vec2(1.0) / widthHeight;\nvec2 ij = (floor(xy * widthHeight) + vec2(0.5)) * pixelSz;\nvec2 result = (ij * 2.0 - vec2(1.0)) * clipCoord.w;\nreturn vec4(result, clipCoord.zw);\n}`),l.code.add(i`vec4 alignToPixelOrigin(vec4 clipCoord, vec2 widthHeight) {\nif (!alignPixelEnabled)\nreturn clipCoord;\nvec2 xy = vec2(0.5) + 0.5 * clipCoord.xy / clipCoord.w;\nvec2 pixelSz = vec2(1.0) / widthHeight;\nvec2 ij = floor((xy + 0.5 * pixelSz) * widthHeight) * pixelSz;\nvec2 result = (ij * 2.0 - vec2(1.0)) * clipCoord.w;\nreturn vec4(result, clipCoord.zw);\n}`)}export{l as AlignPixel};\n", "/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.33/esri/copyright.txt for details.\n*/\nvar c;!function(c){c[c.Occluded=0]=\"Occluded\",c[c.NotOccluded=1]=\"NotOccluded\",c[c.Both=2]=\"Both\",c[c.COUNT=3]=\"COUNT\"}(c||(c={}));export{c as HUDRenderStyle};\n", "/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.33/esri/copyright.txt for details.\n*/\nimport{AlignPixel as e}from\"./AlignPixel.glsl.js\";import{HUDRenderStyle as r}from\"./HUDRenderStyle.js\";import{Float4BindUniform as o}from\"../../shaderModules/Float4BindUniform.js\";import{FloatBindUniform as i}from\"../../shaderModules/FloatBindUniform.js\";import{glsl as l}from\"../../shaderModules/glsl.js\";import{Texture2DBindUniform as t}from\"../../shaderModules/Texture2DBindUniform.js\";function n(n){n.vertex.uniforms.add(new i(\"renderTransparentlyOccludedHUD\",(e=>e.hudRenderStyle===r.Occluded?1:e.hudRenderStyle===r.NotOccluded?0:.75)),new o(\"viewport\",(e=>e.camera.fullViewport)),new t(\"hudVisibilityTexture\",(e=>e.hudVisibility?.getTexture()))),n.vertex.include(e),n.vertex.code.add(l`bool testHUDVisibility(vec4 posProj) {\nvec4 posProjCenter = alignToPixelCenter(posProj, viewport.zw);\nvec4 occlusionPixel = texture(hudVisibilityTexture, .5 + .5 * posProjCenter.xy / posProjCenter.w);\nif (renderTransparentlyOccludedHUD > 0.5) {\nreturn occlusionPixel.r * occlusionPixel.g > 0.0 && occlusionPixel.g * renderTransparentlyOccludedHUD < 1.0;\n}\nreturn occlusionPixel.r * occlusionPixel.g > 0.0 && occlusionPixel.g == 1.0;\n}`)}export{n as HUDVisibility};\n"],
  "mappings": "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",
  "names": ["d", "u", "s", "o", "e", "f", "l", "e", "c", "n", "e", "o"]
}
