import {
  o as o3
} from "./chunk-D2LYUBTC.js";
import {
  c
} from "./chunk-XOKC7WTG.js";
import {
  o as o4
} from "./chunk-345ZKZWI.js";
import {
  e as e4,
  t
} from "./chunk-KRZHFMU4.js";
import {
  n as n3,
  o2
} from "./chunk-CGESJDPA.js";
import {
  o
} from "./chunk-RZPBZYCG.js";
import {
  e as e5
} from "./chunk-FL3AEKKI.js";
import {
  n as n2
} from "./chunk-FXWNGVAA.js";
import {
  e
} from "./chunk-ULRXIASY.js";
import {
  e as e3
} from "./chunk-3JKWT76Y.js";
import {
  e as e2
} from "./chunk-LOLNWH3R.js";
import {
  n
} from "./chunk-RKF6WUZT.js";

// node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/attributes/VertexPosition.glsl.js
function v(r, o6) {
  const { attributes: e6, vertex: f, varyings: v2, fragment: F2 } = r;
  f.include(e4, o6), e6.add(e.POSITION, "vec3"), v2.add("vPositionWorldCameraRelative", "vec3"), v2.add("vPosition_view", "vec3", { invariant: true }), f.uniforms.add(new e5("transformWorldFromViewTH", ((r2) => r2.transformWorldFromViewTH)), new e5("transformWorldFromViewTL", ((r2) => r2.transformWorldFromViewTL)), new o2("transformViewFromCameraRelativeRS", ((r2) => r2.transformViewFromCameraRelativeRS)), new o3("transformProjFromView", ((r2) => r2.transformProjFromView)), new t("transformWorldFromModelRS", ((r2) => r2.transformWorldFromModelRS)), new o("transformWorldFromModelTH", ((r2) => r2.transformWorldFromModelTH)), new o("transformWorldFromModelTL", ((r2) => r2.transformWorldFromModelTL))), f.code.add(n2`vec3 positionWorldCameraRelative() {
vec3 rotatedModelPosition = transformWorldFromModelRS * position;
vec3 transform_CameraRelativeFromModel = dpAdd(
transformWorldFromModelTL,
transformWorldFromModelTH,
-transformWorldFromViewTL,
-transformWorldFromViewTH
);
return transform_CameraRelativeFromModel + rotatedModelPosition;
}`), f.code.add(n2`
    void forwardPosition(float fOffset) {
      vPositionWorldCameraRelative = positionWorldCameraRelative();
      if (fOffset != 0.0) {
        vPositionWorldCameraRelative += fOffset * ${o6.spherical ? n2`normalize(transformWorldFromViewTL + vPositionWorldCameraRelative)` : n2`vec3(0.0, 0.0, 1.0)`};
      }

      vPosition_view = transformViewFromCameraRelativeRS * vPositionWorldCameraRelative;
      gl_Position = transformProjFromView * vec4(vPosition_view, 1.0);
    }
  `), F2.uniforms.add(new e5("transformWorldFromViewTL", ((r2) => r2.transformWorldFromViewTL))), f.code.add(n2`vec3 positionWorld() {
return transformWorldFromViewTL + vPositionWorldCameraRelative;
}`), F2.code.add(n2`vec3 positionWorld() {
return transformWorldFromViewTL + vPositionWorldCameraRelative;
}`);
}
var F = class extends c {
  constructor() {
    super(...arguments), this.transformWorldFromViewTH = n(), this.transformWorldFromViewTL = n(), this.transformViewFromCameraRelativeRS = e2(), this.transformProjFromView = e3();
  }
};
var w = class extends c {
  constructor() {
    super(...arguments), this.transformWorldFromModelRS = e2(), this.transformWorldFromModelTH = n(), this.transformWorldFromModelTL = n();
  }
};

// node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/ForwardLinearDepth.glsl.js
function i(e6) {
  e6.varyings.add("linearDepth", "float", { invariant: true });
}
function t2(e6) {
  e6.vertex.uniforms.add(new o4("nearFar", ((e7) => e7.camera.nearFar)));
}
function n4(e6) {
  e6.vertex.code.add(n2`float calculateLinearDepth(vec2 nearFar,float z) {
return (-z - nearFar[0]) / (nearFar[1] - nearFar[0]);
}`);
}
function d(r, d2) {
  const { vertex: s } = r;
  switch (d2.output) {
    case n3.Color:
    case n3.ColorEmission:
      if (d2.receiveShadows) return i(r), void s.code.add(n2`void forwardLinearDepth() { linearDepth = gl_Position.w; }`);
      break;
    case n3.Shadow:
    case n3.ShadowHighlight:
    case n3.ShadowExcludeHighlight:
    case n3.ViewshedShadow:
      return r.include(v, d2), i(r), t2(r), n4(r), void s.code.add(n2`void forwardLinearDepth() {
linearDepth = calculateLinearDepth(nearFar, vPosition_view.z);
}`);
  }
  s.code.add(n2`void forwardLinearDepth() {}`);
}

// node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/Transform.glsl.js
function o5(o6) {
  n4(o6), o6.vertex.code.add(n2`vec4 transformPositionWithDepth(mat4 proj, mat4 view, vec3 pos, vec2 nearFar, out float depth) {
vec4 eye = view * vec4(pos, 1.0);
depth = calculateLinearDepth(nearFar,eye.z);
return proj * eye;
}`), o6.vertex.code.add(n2`vec4 transformPosition(mat4 proj, mat4 view, vec3 pos) {
return proj * (view * vec4(pos, 1.0));
}`);
}

export {
  F,
  w,
  t2 as t,
  d,
  o5 as o
};
//# sourceMappingURL=chunk-HGEYMHZP.js.map
