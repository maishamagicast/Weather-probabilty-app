import {
  Z
} from "./chunk-SUYBRL4O.js";
import {
  m
} from "./chunk-HH4Q2NN5.js";
import {
  w
} from "./chunk-4KZLIAP7.js";
import {
  i3 as i
} from "./chunk-TJPLHZCD.js";
import {
  has
} from "./chunk-KLFJ5V5G.js";

// node_modules/@arcgis/core/layers/support/fieldProperties.js
function s() {
  return { fields: { type: [m], value: null, set: function(i2) {
    if (i2 && has("big-integer-warning-enabled")) {
      const t = i2.filter(((e) => "big-integer" === e.type || "oid" === e.type && (e.length || 0) >= 8));
      if (t.length) {
        const i3 = t.map(((e) => `'${e.name}'`)).join(", ");
        i.getLogger(this).warn("#fields", `Layer (title: '${this.title ?? "no title"}', id: '${this.id ?? "no id"}') references big-integer field(s): ${i3}, support for which is experimental. Only integers less than ${Number.MAX_SAFE_INTEGER} (Number.MAX_SAFE_INTEGER) are supported.`);
      }
    }
    this._set("fields", i2);
  } }, fieldsIndex: { readOnly: true, get() {
    return Z.fromLayer(this);
  } }, outFields: { type: [String], json: { read: false }, set: function(e) {
    this._userOutFields = e, this.notifyChange("outFields");
  }, get: function() {
    const i2 = this._userOutFields;
    if (!i2?.length) return null;
    if (i2.includes("*")) return ["*"];
    if (!this.fields) return i2;
    for (const t of i2) {
      const r = this.fieldsIndex?.has(t);
      r || i.getLogger("esri.layers.support.fieldProperties").error("field-attributes-layer:invalid-field", `Invalid field ${t} found in outFields`, { layer: this, outFields: i2 });
    }
    return w(this.fieldsIndex, i2);
  } } };
}

export {
  s
};
//# sourceMappingURL=chunk-6CJTWEUR.js.map
