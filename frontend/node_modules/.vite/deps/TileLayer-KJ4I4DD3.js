import {
  ae,
  f as f3,
  m as m2
} from "./chunk-RPNSGTGL.js";
import "./chunk-NJEKKV7N.js";
import "./chunk-25VP2OQW.js";
import "./chunk-DR7CKJIZ.js";
import "./chunk-5ZJG2W6X.js";
import "./chunk-UVVPMLPB.js";
import "./chunk-EYECC3PG.js";
import "./chunk-LUPQ25XG.js";
import "./chunk-DJRZXLB2.js";
import "./chunk-L6GG77AZ.js";
import "./chunk-XOKYRVJ5.js";
import "./chunk-OLNO472C.js";
import "./chunk-ROOICUH3.js";
import "./chunk-EU5HNJUP.js";
import "./chunk-2WPJ2N7Z.js";
import "./chunk-4MVMXF4W.js";
import "./chunk-RY6GJKN7.js";
import "./chunk-EZYDA2X4.js";
import "./chunk-QHD5R6KE.js";
import "./chunk-PTLGJ4Y6.js";
import "./chunk-TSUTFMFQ.js";
import "./chunk-YIVJSMJO.js";
import "./chunk-24S6C5S6.js";
import "./chunk-UICDKBDP.js";
import "./chunk-AUHP32YH.js";
import "./chunk-AY3JR4QM.js";
import "./chunk-A2AZM62Y.js";
import "./chunk-LBDNG364.js";
import "./chunk-FV6ZNHFI.js";
import {
  o as o2
} from "./chunk-LP5PTXVN.js";
import "./chunk-PRDARNYW.js";
import "./chunk-JD3JZPVU.js";
import "./chunk-BMKLG7HR.js";
import "./chunk-SCZN6GUJ.js";
import "./chunk-OUFI3E5Y.js";
import "./chunk-QOICX6SF.js";
import "./chunk-LUNNU672.js";
import "./chunk-FFY3IMAS.js";
import "./chunk-DJ5QZHL6.js";
import "./chunk-IR6JOM7Y.js";
import "./chunk-YR234R2O.js";
import "./chunk-FI3Y4ZNX.js";
import "./chunk-M6LH7ANK.js";
import "./chunk-FTX3VFJX.js";
import "./chunk-COXNSOYZ.js";
import "./chunk-PHSQVJNW.js";
import "./chunk-KFNWBWN4.js";
import "./chunk-XQVHLLRA.js";
import "./chunk-K5CV62SX.js";
import "./chunk-P7KAQGGQ.js";
import "./chunk-J6CZRLYU.js";
import "./chunk-4QXO2FM6.js";
import "./chunk-S7GLMIAQ.js";
import "./chunk-SUYBRL4O.js";
import "./chunk-7Y4U2JD3.js";
import "./chunk-GCTSCKPO.js";
import "./chunk-6U4EGJOK.js";
import "./chunk-EMULKSUV.js";
import "./chunk-ZBTRSUIE.js";
import "./chunk-D6GGPM6D.js";
import "./chunk-U2JVYDTA.js";
import "./chunk-HH4Q2NN5.js";
import "./chunk-4OFMCNMO.js";
import "./chunk-OT2P27SF.js";
import "./chunk-XJOLJK3F.js";
import "./chunk-H7YECHT3.js";
import "./chunk-3CFYBBSV.js";
import "./chunk-VCKINPGN.js";
import "./chunk-SDCRJECE.js";
import "./chunk-4G42CJX6.js";
import "./chunk-NEI5HAVK.js";
import "./chunk-D7G7U7XX.js";
import "./chunk-2CS746FZ.js";
import "./chunk-UET4BL4J.js";
import "./chunk-YMT7TAQQ.js";
import "./chunk-RZGBA4KS.js";
import "./chunk-FSYN2HHU.js";
import "./chunk-7I4TWCTW.js";
import "./chunk-SCMB64VM.js";
import "./chunk-MBJ7YPSH.js";
import "./chunk-D34PNYRG.js";
import "./chunk-APMQAZ5Z.js";
import {
  t
} from "./chunk-EU64TE5C.js";
import "./chunk-R7YP6EQJ.js";
import {
  p as p3
} from "./chunk-POGBW6IR.js";
import "./chunk-JXQG7YSO.js";
import "./chunk-HZ6335W2.js";
import {
  i
} from "./chunk-3GQTEESV.js";
import "./chunk-SPM2JNCJ.js";
import "./chunk-KLTPDVMD.js";
import "./chunk-MX6AIKIJ.js";
import {
  l
} from "./chunk-RYQ7D3GL.js";
import {
  e
} from "./chunk-HOVLU5XA.js";
import {
  f as f2
} from "./chunk-EWP4DLQF.js";
import {
  p as p2
} from "./chunk-CHGKJUJ3.js";
import "./chunk-3YBQQHIP.js";
import "./chunk-OJQCHQYS.js";
import {
  t as t2
} from "./chunk-N3W3EVP3.js";
import {
  b2 as b,
  y
} from "./chunk-5BYUGSWZ.js";
import "./chunk-SIRTOV2N.js";
import {
  j
} from "./chunk-ORRXYRSR.js";
import {
  S
} from "./chunk-OFINLTIW.js";
import "./chunk-Y3I5OGQC.js";
import "./chunk-K55CXVYD.js";
import {
  c
} from "./chunk-M4XVX74D.js";
import "./chunk-UZ3YWBWC.js";
import "./chunk-2EOHKZLO.js";
import "./chunk-W7U4L72B.js";
import "./chunk-3M6ALZOH.js";
import "./chunk-QPV4BKBC.js";
import "./chunk-LQQCPLIT.js";
import "./chunk-4O46EK5T.js";
import {
  h
} from "./chunk-A7I2KMJU.js";
import "./chunk-BPI4BR4E.js";
import "./chunk-3L5JZOMH.js";
import "./chunk-N77BULFI.js";
import "./chunk-NEIJCC5O.js";
import "./chunk-UMUW6RKM.js";
import "./chunk-XRTNDGK2.js";
import "./chunk-A6R2FXH6.js";
import "./chunk-H6ZVHKNF.js";
import "./chunk-YAXW2DL6.js";
import "./chunk-4KZLIAP7.js";
import "./chunk-62NATJWT.js";
import "./chunk-FOPBVVXE.js";
import "./chunk-INI6MHIQ.js";
import "./chunk-QUZZIDFR.js";
import "./chunk-CBCDVQSA.js";
import "./chunk-RKF6WUZT.js";
import "./chunk-RMRI4NYS.js";
import "./chunk-YYLIW24Q.js";
import "./chunk-B7BH33JH.js";
import "./chunk-BLBN3L5Q.js";
import "./chunk-XNUSHDFN.js";
import "./chunk-4AKMPOG7.js";
import "./chunk-2CJBZZN7.js";
import "./chunk-ZJQPHR3K.js";
import "./chunk-R4XAU2TW.js";
import "./chunk-YVMULGDJ.js";
import "./chunk-3LLHBKLI.js";
import "./chunk-74GULGYB.js";
import "./chunk-HYAO4PVV.js";
import "./chunk-SRNKPAJX.js";
import "./chunk-VNQUG2TO.js";
import "./chunk-MOMLPET6.js";
import "./chunk-3QHX4R4B.js";
import "./chunk-ORMKIVR7.js";
import "./chunk-TOCH3L2K.js";
import "./chunk-EULNFFHG.js";
import "./chunk-SDIBXPSJ.js";
import "./chunk-CBXZL53X.js";
import "./chunk-LPCUYJ2B.js";
import "./chunk-SMO33YG7.js";
import {
  f
} from "./chunk-LCBAL6ER.js";
import "./chunk-6JCZVSRM.js";
import "./chunk-LLGOMKTE.js";
import "./chunk-ZB6KRLRI.js";
import {
  s as s2
} from "./chunk-67AKDROO.js";
import "./chunk-CM3TIXEV.js";
import {
  H,
  d,
  g2 as g,
  p2 as p
} from "./chunk-POWGZO3T.js";
import {
  I,
  _,
  v
} from "./chunk-OUZJZB6I.js";
import {
  o
} from "./chunk-NJZD7WM5.js";
import {
  r as r2
} from "./chunk-CL7VLXUR.js";
import "./chunk-FCX4ZA3Z.js";
import {
  m2 as m
} from "./chunk-2ZPU5IZX.js";
import {
  a2
} from "./chunk-S62CSPIH.js";
import "./chunk-X26VPODZ.js";
import "./chunk-XNYPRDKK.js";
import {
  r
} from "./chunk-Y4BWIIWH.js";
import "./chunk-TTJIKWMC.js";
import "./chunk-CMEG2CKL.js";
import "./chunk-VHPBXBDE.js";
import "./chunk-6ACTD4UJ.js";
import "./chunk-5REYU5G2.js";
import "./chunk-JNYZ3I5R.js";
import {
  a
} from "./chunk-N626Y23H.js";
import {
  s2 as s
} from "./chunk-TJPLHZCD.js";
import "./chunk-KLFJ5V5G.js";
import "./chunk-G26ADAPQ.js";

// node_modules/@arcgis/core/layers/TileLayer.js
var W;
var B = ["Canvas/World_Dark_Gray_Base", "Canvas/World_Dark_Gray_Reference", "Canvas/World_Light_Gray_Base", "Canvas/World_Light_Gray_Reference", "Elevation/World_Hillshade", "Elevation/World_Hillshade_Dark", "Ocean/World_Ocean_Base", "Ocean/World_Ocean_Reference", "Ocean_Basemap", "Reference/World_Boundaries_and_Places", "Reference/World_Boundaries_and_Places_Alternate", "Reference/World_Transportation", "World_Imagery", "World_Street_Map", "World_Topo_Map"];
var C = W = class extends p2(t2(m2(p3(f3(b(j(l(S(f2(i(e(h)))))))))))) {
  constructor(...e2) {
    super(...e2), this.listMode = "show", this.elevationInfo = new c({ mode: "on-the-ground" }), this.isReference = null, this.operationalLayerType = "ArcGISTiledMapServiceLayer", this.resampling = true, this.sourceJSON = null, this.spatialReference = null, this.path = null, this.sublayers = null, this.type = "tile", this.url = null;
  }
  normalizeCtorArgs(e2, r3) {
    return "string" == typeof e2 ? { url: e2, ...r3 } : e2;
  }
  load(e2) {
    const r3 = null != e2 ? e2.signal : null;
    return this.addResolvingPromise(this.loadFromPortal({ supportedTypes: ["Map Service"] }, e2).catch(a).then((() => this._fetchService(r3)))), Promise.resolve(this);
  }
  get attributionDataUrl() {
    const e2 = this.parsedUrl?.path.toLowerCase();
    return e2 ? this._getDefaultAttribution(this._getMapName(e2)) : null;
  }
  readSpatialReference(e2, r3) {
    return (e2 = e2 || r3.tileInfo?.spatialReference) && f.fromJSON(e2);
  }
  writeSublayers(e2, r3, t3, s3) {
    if (!this.loaded || !e2) return;
    const i2 = e2.slice().reverse().flatten((({ sublayers: e3 }) => e3 && e3.toArray().reverse())).toArray(), o3 = [], a3 = { writeSublayerStructure: false, ...s3 };
    i2.forEach(((e3) => {
      const r4 = e3.write({}, a3);
      o3.push(r4);
    }));
    o3.some(((e3) => Object.keys(e3).length > 1)) && (r3.layers = o3);
  }
  get tileServers() {
    return this._getDefaultTileServers(this.parsedUrl?.path);
  }
  castTileServers(e2) {
    return Array.isArray(e2) ? e2.map(((e3) => I(e3).path)) : null;
  }
  fetchTile(e2, t3, s3, i2 = {}) {
    const { signal: o3 } = i2, a3 = this.getTileUrl(e2, t3, s3), l2 = { responseType: "image", signal: o3, query: { ...this.refreshParameters } };
    return H(a3, l2).then(((e3) => e3.data));
  }
  async fetchImageBitmapTile(e2, t3, s3, i2 = {}) {
    const { signal: o3 } = i2;
    if (this.fetchTile !== W.prototype.fetchTile) {
      const r3 = await this.fetchTile(e2, t3, s3, i2);
      return o2(r3, e2, t3, s3, o3);
    }
    const a3 = this.getTileUrl(e2, t3, s3), l2 = { responseType: "blob", signal: o3, query: { ...this.refreshParameters } }, { data: n } = await H(a3, l2);
    return o2(n, e2, t3, s3, o3);
  }
  getTileUrl(e2, r3, t3) {
    const s3 = !this.capabilities.operations.supportsTileMap && this.supportsBlankTile, i2 = v({ ...this.parsedUrl?.query, blankTile: !s3 && null, ...this.customParameters, token: this.apiKey }), o3 = this.tileServers;
    return `${o3 && o3.length ? o3[r3 % o3.length] : this.parsedUrl?.path}/tile/${e2}/${r3}/${t3}${i2 ? "?" + i2 : ""}`;
  }
  loadAll() {
    return t(this, ((e2) => {
      e2(this.allSublayers);
    }));
  }
  _fetchService(e2) {
    return new Promise(((s3, i2) => {
      if (this.sourceJSON) {
        if (null != this.sourceJSON.bandCount && null != this.sourceJSON.pixelSizeX) throw new s("tile-layer:unsupported-url", "use ImageryTileLayer to open a tiled image service");
        return void s3({ data: this.sourceJSON });
      }
      if (!this.parsedUrl) throw new s("tile-layer:undefined-url", "layer's url is not defined");
      const o3 = p(this.parsedUrl.path);
      if (null != o3 && "ImageServer" === o3.serverType) throw new s("tile-layer:unsupported-url", "use ImageryTileLayer to open a tiled image service");
      H(this.parsedUrl.path, { query: { f: "json", ...this.parsedUrl.query, ...this.customParameters, token: this.apiKey }, responseType: "json", signal: e2 }).then(s3, i2);
    })).then(((r3) => {
      let t3 = this.url;
      if (r3.ssl && (t3 = this.url = t3.replace(/^http:/i, "https:")), this.sourceJSON = r3.data, this.read(r3.data, { origin: "service", url: this.parsedUrl }), 10.1 === this.version && !g(t3)) return this._fetchServerVersion(t3, e2).then(((e3) => {
        this.read({ currentVersion: e3 });
      })).catch((() => {
      }));
    }));
  }
  _fetchServerVersion(e2, s3) {
    if (!d(e2)) return Promise.reject();
    const i2 = e2.replace(/(.*\/rest)\/.*/i, "$1") + "/info";
    return H(i2, { query: { f: "json", ...this.customParameters, token: this.apiKey }, responseType: "json", signal: s3 }).then(((e3) => {
      if (e3.data?.currentVersion) return e3.data.currentVersion;
      throw new s("tile-layer:version-not-available", "Server did not provide a version");
    }));
  }
  _getMapName(e2) {
    const r3 = e2.match(/^(?:https?:)?\/\/(server\.arcgisonline\.com|services\.arcgisonline\.com|ibasemaps-api\.arcgis\.com)\/arcgis\/rest\/services\/([^/]+(\/[^/]+)*)\/mapserver/i);
    return r3 ? r3[2] : void 0;
  }
  _getDefaultAttribution(e2) {
    if (null == e2) return null;
    let r3;
    e2 = e2.toLowerCase();
    for (let t3 = 0, s3 = B.length; t3 < s3; t3++) if (r3 = B[t3], r3.toLowerCase().includes(e2)) return _("//static.arcgis.com/attribution/" + r3);
    return null;
  }
  _getDefaultTileServers(e2) {
    if (null == e2) return [];
    const r3 = -1 !== e2.search(/^(?:https?:)?\/\/server\.arcgisonline\.com/i), t3 = -1 !== e2.search(/^(?:https?:)?\/\/services\.arcgisonline\.com/i);
    return r3 || t3 ? [e2, e2.replace(r3 ? /server\.arcgisonline/i : /services\.arcgisonline/i, r3 ? "services.arcgisonline" : "server.arcgisonline")] : [];
  }
  get hasOverriddenFetchTile() {
    return !this.fetchTile[N];
  }
};
r([m({ readOnly: true })], C.prototype, "attributionDataUrl", null), r([m({ type: ["show", "hide", "hide-children"] })], C.prototype, "listMode", void 0), r([m({ json: { read: true, write: true } })], C.prototype, "blendMode", void 0), r([m()], C.prototype, "elevationInfo", void 0), r([m({ type: Boolean, json: { read: false, write: { enabled: true, overridePolicy: () => ({ enabled: false }) } } })], C.prototype, "isReference", void 0), r([m({ readOnly: true, type: ["ArcGISTiledMapServiceLayer"] })], C.prototype, "operationalLayerType", void 0), r([m({ type: Boolean })], C.prototype, "resampling", void 0), r([m()], C.prototype, "sourceJSON", void 0), r([m({ type: f })], C.prototype, "spatialReference", void 0), r([o("spatialReference", ["spatialReference", "tileInfo"])], C.prototype, "readSpatialReference", null), r([m({ type: String, json: { origins: { "web-scene": { read: true, write: true } }, read: false } })], C.prototype, "path", void 0), r([m({ readOnly: true })], C.prototype, "sublayers", void 0), r([r2("sublayers", { layers: { type: [ae] } })], C.prototype, "writeSublayers", null), r([m({ json: { read: false, write: false } })], C.prototype, "popupEnabled", void 0), r([m()], C.prototype, "tileServers", null), r([s2("tileServers")], C.prototype, "castTileServers", null), r([m({ readOnly: true, json: { read: false } })], C.prototype, "type", void 0), r([m(y)], C.prototype, "url", void 0), C = W = r([a2("esri.layers.TileLayer")], C);
var N = Symbol("default-fetch-tile");
C.prototype.fetchTile[N] = true;
var k = C;
export {
  k as default
};
//# sourceMappingURL=TileLayer-KJ4I4DD3.js.map
