import {
  E,
  Ie,
  h,
  i2,
  m as m3
} from "./chunk-ZJG4IQZH.js";
import "./chunk-YGH5IYUW.js";
import "./chunk-YGPPU7AB.js";
import "./chunk-VFKFSI5B.js";
import "./chunk-SZ4I37ZN.js";
import {
  ue
} from "./chunk-7RVS6KUX.js";
import "./chunk-QYQAGD6G.js";
import "./chunk-Y6UIOJ4V.js";
import "./chunk-XFDQFUMH.js";
import "./chunk-QHWOGFQV.js";
import "./chunk-PUDEDAPY.js";
import "./chunk-JXBJIDCW.js";
import "./chunk-RWIBDRMM.js";
import "./chunk-MWIJEAM3.js";
import "./chunk-BGSPX4Z3.js";
import "./chunk-WBA6DQSU.js";
import "./chunk-BB6EK2RQ.js";
import "./chunk-R3HU2OBM.js";
import {
  l as l2
} from "./chunk-32DGBWKL.js";
import "./chunk-3ESJRJZD.js";
import "./chunk-L6GG77AZ.js";
import "./chunk-XOKYRVJ5.js";
import "./chunk-D2DRG2DH.js";
import {
  e as e2
} from "./chunk-HOVLU5XA.js";
import "./chunk-2DCDAX3U.js";
import "./chunk-EZ5REY53.js";
import "./chunk-3HYSKSYM.js";
import {
  f
} from "./chunk-EWP4DLQF.js";
import {
  p as p2
} from "./chunk-CHGKJUJ3.js";
import "./chunk-3YBQQHIP.js";
import "./chunk-OJQCHQYS.js";
import {
  t as t2
} from "./chunk-N3W3EVP3.js";
import {
  b2 as b,
  y
} from "./chunk-ZJXLBTN2.js";
import "./chunk-SIRTOV2N.js";
import "./chunk-V7CFMRVF.js";
import "./chunk-LINWZZJL.js";
import "./chunk-QZISYUPA.js";
import "./chunk-HQRWZZNA.js";
import "./chunk-CKFS2QIU.js";
import "./chunk-PI2R2EZ2.js";
import "./chunk-JLGVQWP5.js";
import "./chunk-LCT65JMM.js";
import "./chunk-IR6JOM7Y.js";
import "./chunk-MK7DDFJN.js";
import {
  j
} from "./chunk-H2PFGMJP.js";
import {
  S
} from "./chunk-OFINLTIW.js";
import "./chunk-TIU3P5HE.js";
import "./chunk-EU5HNJUP.js";
import "./chunk-CJSURDZH.js";
import "./chunk-FFY3IMAS.js";
import "./chunk-YT2ORY5Z.js";
import "./chunk-2UINVE7X.js";
import "./chunk-KXZAYF3U.js";
import "./chunk-PHSQVJNW.js";
import "./chunk-KFNWBWN4.js";
import "./chunk-K55CXVYD.js";
import "./chunk-G2F62CY5.js";
import "./chunk-Q37ABIVM.js";
import "./chunk-VFMQPCCZ.js";
import "./chunk-63ZT5BWV.js";
import "./chunk-OPQ3FCJ4.js";
import "./chunk-W3BJJE6D.js";
import "./chunk-UZ3YWBWC.js";
import "./chunk-2EOHKZLO.js";
import "./chunk-CYQZCOHI.js";
import "./chunk-S7GLMIAQ.js";
import "./chunk-E3X3R7JS.js";
import "./chunk-5J3DOLRD.js";
import "./chunk-ITDL4YVK.js";
import "./chunk-LDDUMPNU.js";
import "./chunk-CCQBS25D.js";
import "./chunk-PXNA3G6N.js";
import "./chunk-OUR2XGMQ.js";
import "./chunk-TSHXWKM2.js";
import "./chunk-KZ2G7XW2.js";
import "./chunk-YIVJSMJO.js";
import "./chunk-QMUTCCDX.js";
import "./chunk-24S6C5S6.js";
import "./chunk-7Y4U2JD3.js";
import "./chunk-GCTSCKPO.js";
import "./chunk-6U4EGJOK.js";
import "./chunk-W7U4L72B.js";
import "./chunk-OXO3GGCE.js";
import "./chunk-BOPGQCAL.js";
import "./chunk-C4HV45QS.js";
import "./chunk-FB53UFVR.js";
import "./chunk-UICDKBDP.js";
import "./chunk-HRIEIPLV.js";
import "./chunk-RWNJO2QP.js";
import "./chunk-3M6ALZOH.js";
import "./chunk-QPV4BKBC.js";
import "./chunk-DDDZPNGZ.js";
import "./chunk-XVEUTBL6.js";
import "./chunk-LQQCPLIT.js";
import "./chunk-4O46EK5T.js";
import "./chunk-4R7TSTKL.js";
import "./chunk-UO2UKPG5.js";
import "./chunk-EMULKSUV.js";
import "./chunk-AY3JR4QM.js";
import "./chunk-YG6ILDTP.js";
import "./chunk-DKFJHHQ4.js";
import "./chunk-Z34SUCTX.js";
import "./chunk-A2AZM62Y.js";
import "./chunk-LQYJLB4P.js";
import "./chunk-D6GGPM6D.js";
import "./chunk-FQY65CBA.js";
import "./chunk-HH4Q2NN5.js";
import "./chunk-S5G7D7MX.js";
import "./chunk-6BZTNQVP.js";
import "./chunk-IR4HVW2K.js";
import "./chunk-OT2P27SF.js";
import "./chunk-XJOLJK3F.js";
import "./chunk-3CFYBBSV.js";
import "./chunk-ZVNJ2S2Z.js";
import "./chunk-KPGNM4LZ.js";
import "./chunk-AACFCXAP.js";
import "./chunk-P5DG4SNT.js";
import "./chunk-ZT7UIVVR.js";
import {
  h as h2
} from "./chunk-R25QZWQ7.js";
import "./chunk-BELQIHLO.js";
import "./chunk-BPI4BR4E.js";
import "./chunk-YVMULGDJ.js";
import "./chunk-CJDZN5K5.js";
import "./chunk-N77BULFI.js";
import "./chunk-6TZIEYTZ.js";
import "./chunk-UMUW6RKM.js";
import "./chunk-XRTNDGK2.js";
import "./chunk-7WPGDYQW.js";
import "./chunk-QDOFETFN.js";
import "./chunk-A6R2FXH6.js";
import "./chunk-H6ZVHKNF.js";
import "./chunk-YAXW2DL6.js";
import "./chunk-QLKHFYAN.js";
import "./chunk-3TSZDV6B.js";
import "./chunk-P4O4YCLI.js";
import {
  n as n2
} from "./chunk-FV6ZNHFI.js";
import "./chunk-MSSQA3XK.js";
import "./chunk-PBKE5BCM.js";
import "./chunk-FOALQHMM.js";
import "./chunk-7HS3ESHX.js";
import "./chunk-2CS746FZ.js";
import "./chunk-NEI5HAVK.js";
import "./chunk-RCOFAQFP.js";
import "./chunk-CO2J5JPW.js";
import "./chunk-CHAHOTAY.js";
import "./chunk-RZGBA4KS.js";
import "./chunk-FSYN2HHU.js";
import "./chunk-7I4TWCTW.js";
import "./chunk-W5UOLFE2.js";
import "./chunk-AZ2S2PYZ.js";
import "./chunk-SCMB64VM.js";
import "./chunk-FOPBVVXE.js";
import "./chunk-INI6MHIQ.js";
import "./chunk-R7YP6EQJ.js";
import "./chunk-QUZZIDFR.js";
import "./chunk-CBCDVQSA.js";
import {
  V as V2
} from "./chunk-74GULGYB.js";
import "./chunk-RKF6WUZT.js";
import "./chunk-RMRI4NYS.js";
import "./chunk-YYLIW24Q.js";
import "./chunk-B7BH33JH.js";
import "./chunk-BLBN3L5Q.js";
import "./chunk-5EWIWLNU.js";
import "./chunk-TOCH3L2K.js";
import "./chunk-CBXZL53X.js";
import {
  U,
  l
} from "./chunk-HYAO4PVV.js";
import "./chunk-SRNKPAJX.js";
import "./chunk-MOMLPET6.js";
import "./chunk-VNQUG2TO.js";
import "./chunk-EULNFFHG.js";
import "./chunk-SDIBXPSJ.js";
import "./chunk-LPCUYJ2B.js";
import "./chunk-3QHX4R4B.js";
import "./chunk-SMO33YG7.js";
import "./chunk-LCBAL6ER.js";
import "./chunk-6JCZVSRM.js";
import "./chunk-LLGOMKTE.js";
import "./chunk-ZB6KRLRI.js";
import "./chunk-67AKDROO.js";
import "./chunk-CM3TIXEV.js";
import {
  m,
  p
} from "./chunk-2AYGXVZI.js";
import {
  V,
  Y
} from "./chunk-OUZJZB6I.js";
import "./chunk-WO5FLTVY.js";
import "./chunk-MGA7XBRB.js";
import "./chunk-XNUSHDFN.js";
import "./chunk-4AKMPOG7.js";
import "./chunk-2CJBZZN7.js";
import "./chunk-APMQAZ5Z.js";
import "./chunk-ZJQPHR3K.js";
import {
  o
} from "./chunk-NJZD7WM5.js";
import {
  r as r2
} from "./chunk-CL7VLXUR.js";
import "./chunk-FCX4ZA3Z.js";
import {
  e,
  m2,
  n2 as n,
  t2 as t
} from "./chunk-2ZPU5IZX.js";
import {
  a2
} from "./chunk-S62CSPIH.js";
import "./chunk-X26VPODZ.js";
import "./chunk-XNYPRDKK.js";
import {
  u
} from "./chunk-JNYZ3I5R.js";
import {
  r
} from "./chunk-Y4BWIIWH.js";
import "./chunk-TTJIKWMC.js";
import "./chunk-CMEG2CKL.js";
import "./chunk-VHPBXBDE.js";
import "./chunk-6ACTD4UJ.js";
import "./chunk-5REYU5G2.js";
import {
  a
} from "./chunk-N626Y23H.js";
import {
  i3 as i,
  s2 as s
} from "./chunk-TJPLHZCD.js";
import "./chunk-KLFJ5V5G.js";
import "./chunk-G26ADAPQ.js";

// node_modules/@arcgis/core/layers/KnowledgeGraphLayer.js
var R = class extends p2(t2(f(l2(b(j(S(e2(h2)))))))) {
  constructor(e3) {
    super(e3), this._graphTypeLookup = /* @__PURE__ */ new Map(), this._namedTypesModified = false, this.dataManager = null, this.definitionSetMap = null, this.knowledgeGraph = null, this.layers = new (V2.ofType(Ie))(), this.memberEntityTypes = null, this.memberRelationshipTypes = null, this.operationalLayerType = "KnowledgeGraphLayer", this.sublayerIdsCache = /* @__PURE__ */ new Map(), this.tables = new (V2.ofType(Ie))(), this.type = "knowledge-graph", this.url = null, this.addHandles(l((() => this.layers.concat(this.tables)), ((e4, i3) => this._handleSublayersChange(e4, i3)), U));
  }
  load(e3) {
    return this.addResolvingPromise(this._doLoad(e3)), Promise.resolve(this);
  }
  async _doLoad(e3) {
    try {
      await this.loadFromPortal({ supportedTypes: ["Knowledge Graph Layer"] }, e3);
    } catch (i3) {
      a(i3);
    }
    await this._fetchMetadata(), await this._initializeLayerProperties(), this.loadLayerAssumingLocalCache(), this._layersLoadedFromAuthoritativeItem() || await i2(this);
  }
  async _fetchMetadata() {
    if (!this.url) throw new s("knowledge-graph:missing-url", "KnowledgeGraphLayer must be created with a url");
    const e3 = await ue(this.url);
    this.knowledgeGraph = e3, this._forEachGraphType(((e4) => {
      e4.name && this._graphTypeLookup.set(e4.name, e4);
    }));
  }
  async _initializeLayerProperties() {
    this.originIdOf("inclusionModeDefinition") === e.USER ? this._validateInclusionModeDefinition() : await this._initializeInclusionModeDefinition(), this._setMemberTypes(), this.dataManager = new E({ knowledgeGraph: this.knowledgeGraph, inclusionModeDefinition: this.inclusionModeDefinition });
  }
  async _initializeInclusionModeDefinition() {
    const e3 = this.definitionSetMap ? await m3(this.definitionSetMap, true) : { generateAllSublayers: true, namedTypeDefinitions: /* @__PURE__ */ new Map() };
    [...this.layers.toArray(), ...this.tables.toArray()].forEach(((i3) => {
      const t3 = this._graphTypeLookup.get(i3.graphTypeName);
      t3 && !e3.namedTypeDefinitions.has(t3.name) && e3.namedTypeDefinitions.set(t3.name, { useAllData: true });
    })), this.setAtOrigin("inclusionModeDefinition", e3, t(this.originIdOf("definitionSetMap")));
  }
  _validateInclusionModeDefinition() {
    const { inclusionModeDefinition: e3 } = this;
    if (!e3) return;
    const { namedTypeDefinitions: i3 } = e3;
    if (i3?.size > 0) i3.forEach(((e4, t3) => {
      const a3 = this._graphTypeLookup.get(t3);
      if (!a3) return i.getLogger(this).warn(`A named type, ${t3}, was in the inclusion list that wasn't in the data model and will be removed`), void i3.delete(t3);
      "relationship" !== a3.type && "entity" !== a3.type && (i.getLogger(this).warn(`A named type, ${t3}, was in the inclusion list that wasn't properly modeled and will be removed`), i3.delete(t3));
    }));
    else if (!e3.generateAllSublayers) throw new s("knowledge-graph:composite-layer-constructor", "If an explicit inclusion definition is defined, at least one namedTypeDefinition must also be defined");
  }
  _setMemberTypes() {
    let e3 = [], i3 = [];
    const { inclusionModeDefinition: t3 } = this, a3 = t3?.namedTypeDefinitions;
    !t3 || t3.generateAllSublayers ? (e3 = this.knowledgeGraph.dataModel?.entityTypes ?? [], i3 = this.knowledgeGraph.dataModel?.relationshipTypes ?? []) : a3 && a3.size > 0 && a3.forEach(((t4, a4) => {
      const s2 = this._graphTypeLookup.get(a4);
      switch (s2?.type) {
        case "relationship":
          i3.push(s2);
          break;
        case "entity":
          e3.push(s2);
      }
    })), this.memberEntityTypes = e3, this.memberRelationshipTypes = i3;
  }
  _forEachGraphType(e3) {
    [...this.knowledgeGraph.dataModel?.entityTypes ?? [], ...this.knowledgeGraph.dataModel?.relationshipTypes ?? []].forEach(((i3) => {
      e3(i3);
    }));
  }
  _refreshNamedTypes() {
    this._namedTypesModified = true;
    for (const e3 of this.layers) e3.emit("refresh", { dataChanged: true });
    for (const e3 of this.tables) e3.emit("refresh", { dataChanged: true });
  }
  async _handleNewRecords(e3) {
    const i3 = /* @__PURE__ */ new Set(), t3 = [];
    for (const a3 of e3) {
      if (!this._graphTypeLookup.has(a3.typeName)) continue;
      false === this.layers.concat(this.tables).some(((e4) => e4.objectType.name === a3.typeName)) && (this.dataManager.sublayerCaches.set(a3.typeName, /* @__PURE__ */ new Map()), i3.add(a3.typeName));
      u(this.sublayerIdsCache, a3.typeName, (() => /* @__PURE__ */ new Set())).add(a3.id), t3.push(a3);
    }
    this.dataManager.addToLayer(t3);
    for (const a3 of i3) {
      const e4 = this._graphTypeLookup.get(a3);
      e4 && (this._addSublayer(e4), "entity" === e4.type ? this.dataManager.entityTypeNames.add(a3) : this.dataManager.relationshipTypeNames.add(a3));
    }
    await i2(this, Array.from(i3)), this._refreshNamedTypes();
  }
  _createSublayers(e3, i3, t3) {
    e3.forEach(((e4) => {
      const a3 = this._createSublayer(e4);
      t3(a3) && i3.push(a3), this._updateSublayerCaches(e4);
    }));
  }
  _addSublayer(e3) {
    const i3 = this._createSublayer(e3);
    return i3.geometryType ? this.layers.push(i3) : this.tables.push(i3), i3;
  }
  _createSublayer(e3) {
    return new Ie({ objectType: e3, parentCompositeLayer: this, graphType: e3.type });
  }
  _updateSublayers(e3, i3) {
    i3.forEach(((i4) => {
      i4.parentCompositeLayer = this;
      const t3 = e3.find(((e4) => e4.type === i4.graphType && e4.name === i4.graphTypeName));
      t3 && (i4.objectType = t3, this._updateSublayerCaches(t3));
    }));
  }
  _updateSublayerCaches({ name: e3 }) {
    if (!e3) return;
    const i3 = this.dataManager.sublayerCaches;
    i3.has(e3) || i3.set(e3, /* @__PURE__ */ new Map());
  }
  _saveUrlAsNewResource(e3, i3, t3, a3) {
    e3[i3] = "<pending>", t3.pendingOperations.push(O(this.inclusionModeDefinition).then(((s2) => {
      const o2 = K(a3);
      e3[i3] = o2.itemRelativeUrl, t3.toAdd.push({ resource: o2, content: { type: "blob", blob: s2 }, compress: false, finish: (e4) => {
        this.definitionSetMap = e4.url;
      } });
    })));
  }
  _displaysAllRecords(e3) {
    for (const [, { useAllData: i3 }] of e3.namedTypeDefinitions) if (!i3) return false;
    return true;
  }
  _handleSublayersChange(e3, i3) {
    i3 && (i3.forEach(((e4) => {
      e4.parent = null;
    })), this.removeHandles("sublayers-owner")), e3 && (e3.forEach(((e4) => {
      e4.parent = this;
    })), this.addHandles([e3.on("after-add", (({ item: e4 }) => {
      e4.parent = this;
    })), e3.on("after-remove", (({ item: e4 }) => {
      e4.parent = null;
    }))], "sublayers-owner"));
  }
  _layersLoadedFromAuthoritativeItem() {
    const e3 = this.originIdOf("layers");
    return e3 >= e.PORTAL_ITEM && e3 < e.USER;
  }
  readDefinitionSetMap(e3, i3, t3) {
    return p(e3, t3);
  }
  writeDefinitionSetMap(e3, i3, t3, a3) {
    const s2 = a3?.portalItem, o2 = a3?.resources, r3 = n(a3?.origin);
    if (!s2 || !o2 || null == r3) return void (e3 && (i3[t3] = m(e3, a3)));
    const { inclusionModeDefinition: n3 } = this;
    if (!n3 || this._displaysAllRecords(n3)) return void (this.definitionSetMap = null);
    const l3 = this.originIdOf("inclusionModeDefinition");
    if (l3 === e.USER || this._namedTypesModified || r3 < l3) this._saveUrlAsNewResource(i3, t3, o2, s2);
    else if (r3 === l3 && e3) {
      const r4 = m(e3, a3);
      Y(r4) ? this._saveUrlAsNewResource(i3, t3, o2, s2) : i3[t3] = r4;
    }
  }
  set inclusionModeDefinition(e3) {
    "loaded" !== this.loadStatus && "failed" !== this.loadStatus ? this._set("inclusionModeDefinition", e3) : i.getLogger(this).error("#inclusionModeDefinition", "inclusionModeDefinition cannot be changed after the layer is loaded.");
  }
  loadLayerAssumingLocalCache() {
    const e3 = [...this.memberEntityTypes, ...this.memberRelationshipTypes];
    this.layers.length || this.originIdOf("tables") === e.DEFAULTS ? this.originIdOf("layers") === e.DEFAULTS ? this._createSublayers(e3, this.layers, ((e4) => !!e4.geometryType)) : this._updateSublayers(e3, this.layers) : this.layers = new V2(), this.tables.length || this.originIdOf("layers") === e.DEFAULTS ? this.originIdOf("tables") === e.DEFAULTS ? this._createSublayers(e3, this.tables, ((e4) => !e4.geometryType)) : this._updateSublayers(e3, this.tables) : this.tables = new V2(), this.dataManager.inclusionModeDefinition?.namedTypeDefinitions?.forEach(((e4, i3) => {
      const t3 = u(this.sublayerIdsCache, i3, (() => /* @__PURE__ */ new Set()));
      e4.members?.forEach(((e5) => {
        t3.add(e5.id);
      }));
    }));
  }
  async addRecords(e3) {
    await this.load(), await this._handleNewRecords(e3);
  }
  async createSublayerForNamedType(e3) {
    await this.load();
    const i3 = this._graphTypeLookup.get(e3);
    if (!i3) throw new s("knowledge-graph:missing-type", "The specified type does not exist in the layer's graph data model.");
    if (this.dataManager.sublayerCaches.has(e3)) throw new s("knowledge-graph:duplicate-type", "The specified type already exists as a sublayer.");
    this.dataManager.sublayerCaches.set(e3, /* @__PURE__ */ new Map()), u(this.sublayerIdsCache, e3, (() => /* @__PURE__ */ new Set()));
    const t3 = this._addSublayer(i3);
    return "entity" === i3.type ? this.dataManager.entityTypeNames.add(e3) : this.dataManager.relationshipTypeNames.add(e3), this.dataManager.inclusionModeDefinition && this.dataManager.inclusionModeDefinition.namedTypeDefinitions.set(e3, { useAllData: true }), await i2(this, [e3]), this._refreshNamedTypes(), t3;
  }
  convertSublayerToDynamicData(e3) {
    if (!this.dataManager.inclusionModeDefinition) throw new s("knowledge-graph:fully-dynamic-membership", "This Knowledge Graph Layer already uses fully dynamic membership, individual sublayers cannot be converted");
    if (!this._graphTypeLookup.get(e3)) throw new s("knowledge-graph:missing-type", "The specified type does not exist in the layer's graph data model.");
    if (!this.dataManager.sublayerCaches.has(e3)) throw new s("knowledge-graph:duplicate-type", "The specified type does not exist as a sublayer.");
    const i3 = this.dataManager.inclusionModeDefinition.namedTypeDefinitions.get(e3);
    i3?.useAllData ? i.getLogger(this).warn("This Knowledge Graph Layer already uses dynamic membership for the sublayer - no conversion was made") : (this.dataManager.inclusionModeDefinition.namedTypeDefinitions.set(e3, { useAllData: true }), this.sublayerIdsCache.delete(e3), this._refreshNamedTypes());
  }
  convertSublayerToExplicitMembership(e3) {
    if (!this.dataManager.inclusionModeDefinition) throw new s("knowledge-graph:fully-dynamic-membership", "This Knowledge Graph Layer already uses fully dynamic membership, individual sublayers cannot be converted");
    if (!this._graphTypeLookup.get(e3)) throw new s("knowledge-graph:missing-type", "The specified type does not exist in the layer's graph data model.");
    const i3 = this.dataManager.inclusionModeDefinition.namedTypeDefinitions.get(e3);
    if (!i3 || i3.useAllData) {
      if (!this.dataManager.sublayerCaches.has(e3)) throw new s("knowledge-graph:duplicate-type", "The specified type does not exist as a sublayer.");
      this.sublayerIdsCache.set(e3, /* @__PURE__ */ new Set()), this.dataManager.inclusionModeDefinition.namedTypeDefinitions.set(e3, { useAllData: false, members: /* @__PURE__ */ new Map() }), this._refreshNamedTypes();
    } else i.getLogger(this).warn("This Knowledge Graph Layer already uses explicit membership for the sublayer - no conversion was made");
  }
  convertToFullyDynamicData() {
    this.dataManager.inclusionModeDefinition || i.getLogger(this).warn("This Knowledge Graph Layer already uses fully dynamic membership - no conversion was made"), this.sublayerIdsCache.clear(), this.dataManager.inclusionModeDefinition = null, this._refreshNamedTypes();
  }
  convertToExplicitMembership() {
    this.dataManager.inclusionModeDefinition && this.dataManager.inclusionModeDefinition.namedTypeDefinitions.size > 0 && i.getLogger(this).warn("This Knowledge Graph Layer already uses explicit membership - no conversion was made"), this.dataManager.inclusionModeDefinition = { generateAllSublayers: false, namedTypeDefinitions: /* @__PURE__ */ new Map() };
    for (const e3 of this.dataManager.sublayerCaches.keys()) u(this.sublayerIdsCache, e3, (() => /* @__PURE__ */ new Set())), this.dataManager.inclusionModeDefinition.namedTypeDefinitions.set(e3, { useAllData: false, members: /* @__PURE__ */ new Map() });
    this._refreshNamedTypes();
  }
  async removeRecords(e3) {
    await this.load();
    const i3 = [];
    for (const t3 of e3) false === this.dataManager.inclusionModeDefinition?.namedTypeDefinitions?.get(t3.typeName)?.useAllData && this.dataManager.inclusionModeDefinition?.namedTypeDefinitions?.get(t3.typeName)?.members?.has(t3.id) && i3.push(t3);
    this.dataManager.removeFromLayer(i3);
    for (const t3 of i3) this.sublayerIdsCache.get(t3.typeName)?.delete(t3.id);
    return this._refreshNamedTypes(), i3;
  }
};
r([m2()], R.prototype, "dataManager", void 0), r([m2({ json: { write: { ignoreOrigin: true, writerEnsuresNonNull: true } } })], R.prototype, "definitionSetMap", void 0), r([o("definitionSetMap")], R.prototype, "readDefinitionSetMap", null), r([r2("definitionSetMap")], R.prototype, "writeDefinitionSetMap", null), r([m2()], R.prototype, "inclusionModeDefinition", null), r([m2()], R.prototype, "knowledgeGraph", void 0), r([m2({ type: V2.ofType(Ie), json: { write: { ignoreOrigin: true } } })], R.prototype, "layers", void 0), r([m2()], R.prototype, "memberEntityTypes", void 0), r([m2()], R.prototype, "memberRelationshipTypes", void 0), r([m2({ type: ["KnowledgeGraphLayer"] })], R.prototype, "operationalLayerType", void 0), r([m2()], R.prototype, "sublayerIdsCache", void 0), r([m2({ type: V2.ofType(Ie), json: { write: { ignoreOrigin: true } } })], R.prototype, "tables", void 0), r([m2({ json: { read: false } })], R.prototype, "type", void 0), r([m2(y)], R.prototype, "url", void 0), R = r([a2("esri.layers.KnowledgeGraphLayer")], R);
var U2 = R;
async function O(e3) {
  const i3 = await h(e3);
  return new Blob([i3], { type: "application/x-protobuf" });
}
function K(e3) {
  const i3 = `definitionSetMap-${n2()}.dat`, t3 = V("knowledgeGraphLayer", i3);
  return e3.resourceFromPath(t3);
}
export {
  U2 as default
};
//# sourceMappingURL=KnowledgeGraphLayer-SCEDNDDJ.js.map
