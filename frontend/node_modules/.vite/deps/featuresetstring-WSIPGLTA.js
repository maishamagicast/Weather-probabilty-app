import {
  j
} from "./chunk-X6MR5RJV.js";
import {
  $,
  $e,
  Be,
  Ce,
  De,
  He,
  K,
  Ke,
  Oe,
  Ue,
  We,
  ae,
  he,
  pe,
  q
} from "./chunk-ONCJ5DYL.js";
import {
  b
} from "./chunk-4I7FX2CT.js";
import "./chunk-MX6BY66A.js";
import "./chunk-SMDDQAST.js";
import "./chunk-UO2UKPG5.js";
import "./chunk-EMULKSUV.js";
import {
  a,
  r
} from "./chunk-AY3JR4QM.js";
import "./chunk-HH4Q2NN5.js";
import "./chunk-3CFYBBSV.js";
import "./chunk-SCMB64VM.js";
import "./chunk-FOPBVVXE.js";
import "./chunk-RMRI4NYS.js";
import "./chunk-YYLIW24Q.js";
import "./chunk-B7BH33JH.js";
import "./chunk-BLBN3L5Q.js";
import "./chunk-CBXZL53X.js";
import "./chunk-SDIBXPSJ.js";
import "./chunk-LPCUYJ2B.js";
import "./chunk-SMO33YG7.js";
import "./chunk-LCBAL6ER.js";
import "./chunk-6JCZVSRM.js";
import "./chunk-LLGOMKTE.js";
import "./chunk-ZB6KRLRI.js";
import "./chunk-67AKDROO.js";
import "./chunk-CM3TIXEV.js";
import "./chunk-2AYGXVZI.js";
import "./chunk-OUZJZB6I.js";
import "./chunk-APMQAZ5Z.js";
import "./chunk-ZJQPHR3K.js";
import "./chunk-NJZD7WM5.js";
import "./chunk-CL7VLXUR.js";
import "./chunk-FCX4ZA3Z.js";
import "./chunk-2ZPU5IZX.js";
import "./chunk-S62CSPIH.js";
import "./chunk-X26VPODZ.js";
import "./chunk-XNYPRDKK.js";
import "./chunk-JNYZ3I5R.js";
import "./chunk-Y4BWIIWH.js";
import "./chunk-TTJIKWMC.js";
import "./chunk-CMEG2CKL.js";
import "./chunk-VHPBXBDE.js";
import "./chunk-6ACTD4UJ.js";
import "./chunk-5REYU5G2.js";
import "./chunk-N626Y23H.js";
import "./chunk-TJPLHZCD.js";
import "./chunk-KLFJ5V5G.js";
import "./chunk-G26ADAPQ.js";

// node_modules/@arcgis/core/arcade/functions/featuresetstring.js
function T(a2, e) {
  return a2 && a2.domain ? "coded-value" === a2.domain.type || "codedValue" === a2.domain.type ? j.convertObjectToArcadeDictionary({ type: "codedValue", name: a2.domain.name, dataType: b[a2.field.type], codedValues: a2.domain.codedValues.map(((n) => ({ name: n.name, code: n.code }))) }, Ke(e)) : j.convertObjectToArcadeDictionary({ type: "range", name: a2.domain.name, dataType: b[a2.field.type], min: a2.domain.minValue, max: a2.domain.maxValue }, Ke(e)) : null;
}
function b2(h) {
  "async" === h.mode && (h.functions.domain = function(n, d) {
    return h.standardFunctionAsync(n, d, (async (u, m, f) => {
      if (ae(f, 2, 3, n, d), $(f[0])) {
        return T(Ue(f[0], pe(f[1]), void 0 === f[2] ? void 0 : f[2]), n);
      }
      if (K(f[0])) {
        await f[0]._ensureLoaded();
        return T(Ce(pe(f[1]), f[0], null, void 0 === f[2] ? void 0 : f[2]), n);
      }
      throw new a(n, r.InvalidParameter, d);
    }));
  }, h.functions.subtypes = function(o, i) {
    return h.standardFunctionAsync(o, i, (async (s, m, f) => {
      if (ae(f, 1, 1, o, i), $(f[0])) {
        const a2 = He(f[0]);
        return a2 ? j.convertObjectToArcadeDictionary(a2, Ke(o)) : null;
      }
      if (K(f[0])) {
        await f[0]._ensureLoaded();
        const a2 = f[0].subtypeMetaData();
        return a2 ? j.convertObjectToArcadeDictionary(a2, Ke(o)) : null;
      }
      throw new a(o, r.InvalidParameter, i);
    }));
  }, h.functions.domainname = function(n, o) {
    return h.standardFunctionAsync(n, o, (async (d, u, l) => {
      if (ae(l, 2, 4, n, o), $(l[0])) return $e(l[0], pe(l[1]), l[2], void 0 === l[3] ? void 0 : l[3]);
      if (K(l[0])) {
        await l[0]._ensureLoaded();
        const n2 = Ce(pe(l[1]), l[0], null, void 0 === l[3] ? void 0 : l[3]);
        return De(n2, l[2]);
      }
      throw new a(n, r.InvalidParameter, o);
    }));
  }, h.signatures.push({ name: "domainname", min: 2, max: 4 }), h.functions.domaincode = function(n, o) {
    return h.standardFunctionAsync(n, o, (async (d, u, m) => {
      if (ae(m, 2, 4, n, o), $(m[0])) return Be(m[0], pe(m[1]), m[2], void 0 === m[3] ? void 0 : m[3]);
      if (K(m[0])) {
        await m[0]._ensureLoaded();
        const n2 = Ce(pe(m[1]), m[0], null, void 0 === m[3] ? void 0 : m[3]);
        return Oe(n2, m[2]);
      }
      throw new a(n, r.InvalidParameter, o);
    }));
  }, h.signatures.push({ name: "domaincode", min: 2, max: 4 }), h.functions.text = function(n, r2) {
    return h.standardFunctionAsync(n, r2, (async (o, i, s) => {
      if (ae(s, 1, 2, n, r2), K(s[0])) {
        const t = q(s[1], "");
        if ("" === t) return s[0].castToText();
        if ("schema" === t.toLowerCase()) return s[0].convertToText("schema", o.abortSignal);
        if ("featureset" === t.toLowerCase()) return s[0].convertToText("featureset", o.abortSignal);
        throw new a(n, r.InvalidParameter, r2);
      }
      return he(s[0], s[1]);
    }));
  }, h.functions.gdbversion = function(n, o) {
    return h.standardFunctionAsync(n, o, (async (i, s, d) => {
      if (ae(d, 1, 1, n, o), $(d[0])) return d[0].gdbVersion();
      if (K(d[0])) {
        return (await d[0].load()).gdbVersion;
      }
      throw new a(n, r.InvalidParameter, o);
    }));
  }, h.functions.schema = function(o, i) {
    return h.standardFunctionAsync(o, i, (async (s, d, m) => {
      if (ae(m, 1, 1, o, i), K(m[0])) return await m[0].load(), j.convertObjectToArcadeDictionary(m[0].schema(), Ke(o));
      if ($(m[0])) {
        const a2 = We(m[0]);
        return a2 ? j.convertObjectToArcadeDictionary(a2, Ke(o)) : null;
      }
      throw new a(o, r.InvalidParameter, i);
    }));
  });
}
export {
  b2 as registerFunctions
};
//# sourceMappingURL=featuresetstring-WSIPGLTA.js.map
