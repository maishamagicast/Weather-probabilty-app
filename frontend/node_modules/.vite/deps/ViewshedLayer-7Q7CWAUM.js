import {
  b as b2,
  c
} from "./chunk-KWUWYQDF.js";
import "./chunk-3LXV24ZZ.js";
import {
  l as l3
} from "./chunk-7CSBO5GV.js";
import "./chunk-2ZGO74NI.js";
import "./chunk-RQJUGLAI.js";
import "./chunk-HUR2TTV7.js";
import "./chunk-6T6LJGGM.js";
import "./chunk-HPADPQJ7.js";
import "./chunk-3JKWT76Y.js";
import "./chunk-LOLNWH3R.js";
import {
  a as a4
} from "./chunk-QZBNKN5E.js";
import "./chunk-2RL34CVC.js";
import "./chunk-B6C2GOG6.js";
import "./chunk-K3VYMAVM.js";
import "./chunk-7I4TWCTW.js";
import {
  n,
  t
} from "./chunk-R7YP6EQJ.js";
import {
  b2 as b
} from "./chunk-5BYUGSWZ.js";
import "./chunk-SIRTOV2N.js";
import {
  S
} from "./chunk-OFINLTIW.js";
import "./chunk-M4XVX74D.js";
import "./chunk-UZ3YWBWC.js";
import "./chunk-2EOHKZLO.js";
import "./chunk-3M6ALZOH.js";
import "./chunk-QPV4BKBC.js";
import {
  h as h2
} from "./chunk-A7I2KMJU.js";
import "./chunk-BPI4BR4E.js";
import {
  Y
} from "./chunk-3L5JZOMH.js";
import "./chunk-N77BULFI.js";
import "./chunk-NEIJCC5O.js";
import "./chunk-UMUW6RKM.js";
import "./chunk-XRTNDGK2.js";
import "./chunk-H6ZVHKNF.js";
import "./chunk-YAXW2DL6.js";
import "./chunk-4KZLIAP7.js";
import "./chunk-62NATJWT.js";
import "./chunk-FOPBVVXE.js";
import "./chunk-INI6MHIQ.js";
import "./chunk-QUZZIDFR.js";
import {
  a as a3
} from "./chunk-CBCDVQSA.js";
import "./chunk-RKF6WUZT.js";
import "./chunk-RMRI4NYS.js";
import "./chunk-YYLIW24Q.js";
import "./chunk-B7BH33JH.js";
import "./chunk-BLBN3L5Q.js";
import {
  r as r3,
  s as s2
} from "./chunk-ZJQPHR3K.js";
import {
  V
} from "./chunk-74GULGYB.js";
import {
  l,
  w
} from "./chunk-HYAO4PVV.js";
import "./chunk-SRNKPAJX.js";
import "./chunk-VNQUG2TO.js";
import "./chunk-MOMLPET6.js";
import "./chunk-3QHX4R4B.js";
import "./chunk-TOCH3L2K.js";
import "./chunk-EULNFFHG.js";
import "./chunk-SDIBXPSJ.js";
import {
  z
} from "./chunk-CBXZL53X.js";
import "./chunk-LPCUYJ2B.js";
import {
  _
} from "./chunk-SMO33YG7.js";
import "./chunk-LCBAL6ER.js";
import "./chunk-6JCZVSRM.js";
import "./chunk-LLGOMKTE.js";
import "./chunk-ZB6KRLRI.js";
import {
  s
} from "./chunk-67AKDROO.js";
import "./chunk-CM3TIXEV.js";
import "./chunk-POWGZO3T.js";
import "./chunk-OUZJZB6I.js";
import "./chunk-NJZD7WM5.js";
import {
  r as r2
} from "./chunk-CL7VLXUR.js";
import {
  l as l2
} from "./chunk-FCX4ZA3Z.js";
import {
  m2 as m
} from "./chunk-2ZPU5IZX.js";
import {
  a2
} from "./chunk-S62CSPIH.js";
import {
  a
} from "./chunk-X26VPODZ.js";
import "./chunk-XNYPRDKK.js";
import {
  r
} from "./chunk-Y4BWIIWH.js";
import "./chunk-TTJIKWMC.js";
import "./chunk-CMEG2CKL.js";
import "./chunk-VHPBXBDE.js";
import "./chunk-6ACTD4UJ.js";
import "./chunk-5REYU5G2.js";
import "./chunk-JNYZ3I5R.js";
import {
  o4 as o
} from "./chunk-N626Y23H.js";
import "./chunk-TJPLHZCD.js";
import {
  h
} from "./chunk-KLFJ5V5G.js";
import "./chunk-G26ADAPQ.js";

// node_modules/@arcgis/core/analysis/Viewshed.js
var c2 = class extends l2.JSONSupportMixin(a3) {
  constructor(e) {
    super(e), this.observer = null, this.farDistance = 1e3, this.heading = 0, this.tilt = 90, this.horizontalFieldOfView = 45, this.verticalFieldOfView = 45, this.feature = null;
  }
  get valid() {
    return null != this.observer && this.farDistance > 0;
  }
  equals(e) {
    return o(this.observer, e.observer) && this.farDistance === e.farDistance && this.heading === e.heading && this.tilt === e.tilt && this.horizontalFieldOfView === e.horizontalFieldOfView && this.verticalFieldOfView === e.verticalFieldOfView && c(this.feature, e.feature);
  }
};
r([m({ type: _, json: { write: { isRequired: true } } })], c2.prototype, "observer", void 0), r([m({ type: Number, nonNullable: true, range: { min: 0 }, json: { write: { isRequired: true } } })], c2.prototype, "farDistance", void 0), r([m({ type: Number, nonNullable: true, json: { write: { isRequired: true } } }), s(((e) => a4.normalize(a(e), void 0, true)))], c2.prototype, "heading", void 0), r([m({ type: Number, nonNullable: true, range: { min: 0, max: 180 }, json: { write: { isRequired: true } } })], c2.prototype, "tilt", void 0), r([m({ type: Number, nonNullable: true, range: { min: 0, max: 360 }, json: { write: { isRequired: true } } })], c2.prototype, "horizontalFieldOfView", void 0), r([m({ type: Number, nonNullable: true, range: { min: 0, max: 180 }, json: { write: { isRequired: true } } })], c2.prototype, "verticalFieldOfView", void 0), r([m(b2)], c2.prototype, "feature", void 0), r([m({ readOnly: true, json: { read: false } })], c2.prototype, "valid", null), c2 = r([a2("esri.analysis.Viewshed")], c2);

// node_modules/@arcgis/core/analysis/ViewshedAnalysis.js
var v = V.ofType(c2);
var y = class extends l3 {
  constructor(e) {
    super(e), this.type = "viewshed", this._extent = null;
  }
  initialize() {
    this.addHandles(l((() => this._computeExtent()), ((e) => {
      null == e.pending && (this._extent = e.extent);
    }), w));
  }
  get viewsheds() {
    return this._get("viewsheds") || new v();
  }
  set viewsheds(e) {
    this._set("viewsheds", n(e, this.viewsheds, v));
  }
  get spatialReference() {
    for (const e of this.viewsheds) if (null != e.observer) return e.observer.spatialReference;
    return null;
  }
  get extent() {
    return this._extent;
  }
  get valid() {
    return this.viewsheds.every(((e) => e.valid));
  }
  async waitComputeExtent() {
    const e = this._computeExtent();
    null != e.pending && await e.pending;
  }
  _computeExtent() {
    const { spatialReference: e } = this;
    if (null == e) return { pending: null, extent: null };
    const t2 = this.viewsheds.filter(((e2) => null != e2.observer)), r4 = t2.map(((e2) => e2.observer)).toArray(), s3 = Y(r4, e);
    if (null != s3.pending) return { pending: s3.pending, extent: null };
    return { pending: null, extent: s3.geometries.map(((e2, r5) => {
      const s4 = t2.at(r5);
      return null != e2 && null != s4 ? this._computeViewshedExtent(this.viewsheds.at(r5), e2) : null;
    })).filter(((e2) => null != e2)).reduce(((e2, t3) => x(e2, t3)), null) };
  }
  _computeViewshedExtent(e, t2) {
    const { farDistance: r4, heading: s3, tilt: n2, horizontalFieldOfView: i, verticalFieldOfView: o2 } = e, { spatialReference: u2 } = t2, c3 = i / 2, m2 = o2 / 2, h3 = r4 / u2.metersPerUnit, f = [a4.normalize(s3 - c3), s3, a4.normalize(s3 + c3)], v2 = z.fromPoint(t2), y3 = (e2) => {
      const t3 = f.map(((t4) => a4.normalize(t4 - e2)));
      if (t3[0] > t3[2] || 360 === i) return h3;
      const r5 = t3.map(((e3) => Math.abs(e3 > 180 ? 360 - e3 : e3))).reduce(((e3, t4) => e3 > t4 ? t4 : e3));
      return r5 > 90 ? 0 : h3 * Math.cos(s2(r5));
    };
    v2.xmax += y3(90), v2.xmin -= y3(-90), v2.ymax += y3(0), v2.ymin -= y3(180);
    const x2 = t2.z;
    if (null != x2) {
      let e2 = x2, t3 = x2;
      const s4 = n2 - 90, i2 = r3(s4 + m2, -90, 90), o3 = r3(s4 - m2, -90, 90), l4 = u2?.isGeographic ? r4 : h3;
      e2 += l4 * g(i2), t3 += l4 * g(o3);
      const a5 = w2(m2) * l4, d = g(s4) * a5 * (1 - w2(c3));
      n2 < 90 && (e2 -= d), n2 > 90 && (t3 -= d), v2.zmax = Math.max(e2, x2), v2.zmin = Math.min(t3, x2);
    }
    return v2;
  }
  equals(e) {
    return this === e || super.equals(e) && h(this.viewsheds.toArray(), e.viewsheds.toArray(), ((e2, t2) => e2.equals(t2)));
  }
  clear() {
    this.viewsheds.removeAll();
  }
};
function x(e, t2) {
  return null == e ? t2 : null == t2 ? e : e.union(t2);
}
function w2(e) {
  return Math.cos(s2(e));
}
function g(e) {
  return Math.sin(s2(e));
}
r([m({ type: ["viewshed"] })], y.prototype, "type", void 0), r([m({ cast: t, type: v, nonNullable: true })], y.prototype, "viewsheds", null), r([m({ readOnly: true })], y.prototype, "spatialReference", null), r([m()], y.prototype, "_extent", void 0), r([m()], y.prototype, "extent", null), r([m({ readOnly: true })], y.prototype, "valid", null), y = r([a2("esri.analysis.ViewshedAnalysis")], y);

// node_modules/@arcgis/core/layers/ViewshedLayer.js
var y2 = class extends b(S(h2)) {
  constructor(e) {
    super(e), this.type = "viewshed", this.operationalLayerType = "ViewshedLayer", this.source = new y(), this.opacity = 1;
  }
  initialize() {
    this.addHandles(l((() => this.source), ((e, r4) => {
      null != r4 && r4.parent === this && (r4.parent = null), null != e && (e.parent = this);
    }), w));
  }
  async load() {
    return this.addResolvingPromise(this.source.waitComputeExtent()), this;
  }
  get spatialReference() {
    return this.source.spatialReference;
  }
  get fullExtent() {
    return this.source.extent;
  }
  releaseAnalysis(e) {
    this.source === e && (this.source = new y());
  }
  get analysis() {
    return this.source;
  }
  set analysis(e) {
    this.source = e;
  }
  get viewsheds() {
    return this.source.viewsheds;
  }
  set viewsheds(e) {
    this.source.viewsheds = e;
  }
  writeViewsheds(e, r4, s3, t2) {
    r4.viewsheds = e.filter(((e2) => e2.valid)).toJSON(t2);
  }
};
r([m({ json: { read: false }, readOnly: true })], y2.prototype, "type", void 0), r([m({ type: ["ViewshedLayer"] })], y2.prototype, "operationalLayerType", void 0), r([m({ type: y, nonNullable: true })], y2.prototype, "source", void 0), r([m({ readOnly: true })], y2.prototype, "spatialReference", null), r([m({ readOnly: true })], y2.prototype, "fullExtent", null), r([m({ readOnly: true, json: { read: false, write: false, origins: { service: { read: false, write: false }, "portal-item": { read: false, write: false }, "web-document": { read: false, write: false } } } })], y2.prototype, "opacity", void 0), r([m({ type: ["show", "hide"] })], y2.prototype, "listMode", void 0), r([m({ type: V.ofType(c2), json: { write: { ignoreOrigin: true }, origins: { "web-scene": { write: { ignoreOrigin: true } } } } })], y2.prototype, "viewsheds", null), r([r2("web-scene", "viewsheds")], y2.prototype, "writeViewsheds", null), y2 = r([a2("esri.layers.ViewshedLayer")], y2);
var u = y2;
export {
  u as default
};
//# sourceMappingURL=ViewshedLayer-7Q7CWAUM.js.map
