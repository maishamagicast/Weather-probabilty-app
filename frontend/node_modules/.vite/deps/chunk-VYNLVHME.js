import {
  q,
  s as s4
} from "./chunk-ZJQPHR3K.js";
import {
  z
} from "./chunk-CBXZL53X.js";
import {
  d
} from "./chunk-6JCZVSRM.js";
import {
  s as s3
} from "./chunk-67AKDROO.js";
import {
  l
} from "./chunk-FCX4ZA3Z.js";
import {
  m2 as m
} from "./chunk-2ZPU5IZX.js";
import {
  a2
} from "./chunk-S62CSPIH.js";
import {
  o
} from "./chunk-XNYPRDKK.js";
import {
  r
} from "./chunk-Y4BWIIWH.js";
import {
  s as s2
} from "./chunk-N626Y23H.js";
import {
  a,
  i3 as i,
  s2 as s
} from "./chunk-TJPLHZCD.js";
import {
  has,
  t
} from "./chunk-KLFJ5V5G.js";

// node_modules/@arcgis/core/layers/support/SimpleBandStatistics.js
var l2 = class {
  constructor(l6 = null, a7 = null, t3 = null) {
    this.minValue = l6, this.maxValue = a7, this.noDataValue = t3;
  }
};

// node_modules/@arcgis/core/layers/support/rasterFormats/pixelRangeUtils.js
var t2 = 9999999e31;
var n = 2e-7;
var e = { u1: [0, 1], u2: [0, 3], u4: [0, 15], u8: [0, 255], s8: [-128, 127], u16: [0, 65535], s16: [-32768, 32767], u32: [0, 4294967295], s32: [-2147483648, 2147483647], f32: [-34028234663852886e22, 34028234663852886e22], f64: [-Number.MAX_VALUE, Number.MAX_VALUE], unknown: void 0, c64: void 0, c128: void 0 };
function u(t3) {
  return e[t3] ?? [-34028234663852886e22, 34028234663852886e22];
}
var s5 = { u1: 1, u2: 1, u4: 1, u8: 1, s8: 1, u16: 2, s16: 2, u32: 4, s32: 4, f32: 4, f64: 8, unknown: 4, c64: 16, c128: 32 };
function o2(t3) {
  return s5[t3];
}
function l3(t3) {
  return o2(t3.pixelType) * t3.bandCount;
}
function i2(t3, n2) {
  return null == t3 || null == n2 ? "s32" : t3 < 0 ? t3 >= -128 && n2 < 128 ? "s8" : t3 >= -32768 && n2 < 32768 ? "s16" : "s32" : n2 < 256 ? "u8" : n2 < 65536 ? "u16" : "u32";
}
function r2(t3) {
  return (t3?.startsWith("s") || t3?.startsWith("u")) ?? false;
}
function c(t3, n2, e2, s8) {
  let [o5, l6] = u(e2);
  const i6 = r2(e2);
  return i6 && (o5 -= 1e-5, l6 += 1e-5), i6 ? e2.startsWith("u") ? a3(t3, n2, s8, [o5, l6]) : h(t3, n2, s8, [o5, l6]) : b(t3, n2, s8, [o5, l6]);
}
function f(t3, n2) {
  for (let e2 = 0; e2 < n2.length; e2++) n2[e2] && isNaN(t3[e2]) && (n2[e2] = 0, t3[e2] = 0);
}
function a3(t3, n2, e2, u6) {
  const [s8, o5] = u6;
  for (let l6 = 0; l6 < n2.length; l6++) if (n2[l6]) {
    const u7 = t3[l6];
    u7 < s8 || u7 > o5 ? n2[l6] = 0 : e2[l6] = u7 + 0.5 | 0;
  }
}
function h(t3, n2, e2, u6) {
  const [s8, o5] = u6;
  for (let l6 = 0; l6 < n2.length; l6++) if (n2[l6]) {
    const u7 = t3[l6];
    u7 < s8 || u7 > o5 ? n2[l6] = 0 : e2[l6] = u7 + (u7 > 0 ? 0.5 : -0.5) | 0;
  }
}
function b(t3, n2, e2, u6) {
  const [s8, o5] = u6;
  for (let l6 = 0; l6 < n2.length; l6++) if (n2[l6]) {
    const u7 = t3[l6];
    u7 < s8 || u7 > o5 ? n2[l6] = 0 : e2[l6] = u7;
  }
}
function g(e2, s8, o5) {
  if (e2.depthCount && e2.depthCount > 1) return;
  const { pixels: l6, statistics: i6, pixelType: r5 } = e2, c6 = l6[0].length, f5 = e2.bandMasks ?? [], a7 = e2.mask ?? new Uint8Array(c6).fill(255), h5 = "f32" === r5 || "f64" === r5, b4 = u(r5);
  let g5 = false;
  for (let u6 = 0; u6 < l6.length; u6++) {
    const e3 = "number" == typeof s8 ? s8 : s8[u6];
    if (null == e3) continue;
    const c7 = i6?.[u6]?.minValue ?? b4[0], m6 = i6?.[u6]?.maxValue ?? b4[1];
    if (c7 > e3 + Number.EPSILON || m6 < e3 - Number.EPSILON) continue;
    const p5 = f5[u6] || a7.slice(), d5 = l6[u6], N = o5?.customFloatTolerance;
    if (h5 && 0 !== N) {
      let u7 = N;
      u7 || (u7 = Math.abs(e3) >= t2 ? n * Math.abs(e3) : "f32" === r5 ? 2 ** -23 : Number.EPSILON);
      for (let t3 = 0; t3 < d5.length; t3++) p5[t3] && Math.abs(d5[t3] - e3) < u7 && (d5[t3] = 0, p5[t3] = 0, a7[t3] = 0, g5 = true);
    } else for (let t3 = 0; t3 < d5.length; t3++) p5[t3] && d5[t3] === e3 && (d5[t3] = 0, p5[t3] = 0, a7[t3] = 0, g5 = true);
    f5[u6] = p5;
  }
  if (g5) {
    const t3 = e2.bandMasks || e2.pixels.length > 1 ? f5 : null;
    o5?.matchAllNoData ? e2.mask = t3 && t3.length > 1 ? m5(t3) : a7 : (e2.bandMasks = t3, e2.mask = a7);
  }
  function m5(t3) {
    if (t3.length < 2) return t3[0];
    const n2 = t3[0].length, e3 = new Uint8Array(n2).fill(0);
    for (let u6 = 0; u6 < t3.length; u6++) {
      const s9 = t3[u6];
      for (let t4 = 0; t4 < n2; t4++) s9[t4] && (e3[t4] = 255);
    }
    return e3;
  }
  g5 && "updateStatistics" in e2 && e2.updateStatistics();
}

// node_modules/@arcgis/core/layers/support/PixelBlock.js
var p;
var c2 = p = class extends l {
  static createEmptyBand(t3, e2) {
    return new (p.getPixelArrayConstructor(t3))(e2);
  }
  static combineBandMasks(t3) {
    if (t3.length < 2) return t3[0];
    const e2 = t3[0].length, s8 = new Uint8Array(e2).fill(255);
    for (let i6 = 0; i6 < t3.length; i6++) {
      const l6 = t3[i6];
      for (let t4 = 0; t4 < e2; t4++) l6[t4] || (s8[t4] = 0);
    }
    return s8;
  }
  static getPixelArrayConstructor(t3) {
    let e2;
    switch (t3) {
      case "u1":
      case "u2":
      case "u4":
      case "u8":
        e2 = Uint8Array;
        break;
      case "u16":
        e2 = Uint16Array;
        break;
      case "u32":
        e2 = Uint32Array;
        break;
      case "s8":
        e2 = Int8Array;
        break;
      case "s16":
        e2 = Int16Array;
        break;
      case "s32":
        e2 = Int32Array;
        break;
      case "f32":
      case "c64":
      case "c128":
      case "unknown":
        e2 = Float32Array;
        break;
      case "f64":
        e2 = Float64Array;
    }
    return e2;
  }
  constructor(t3) {
    super(t3), this.width = null, this.height = null, this.pixelType = "f32", this.validPixelCount = null, this.mask = null, this.maskIsAlpha = false, this.premultiplyAlpha = false, this.statistics = null, this.depthCount = 1;
  }
  castPixelType(t3) {
    if (!t3) return "f32";
    let e2 = t3.toLowerCase();
    return ["u1", "u2", "u4"].includes(e2) ? e2 = "u8" : ["unknown", "u8", "s8", "u16", "s16", "u32", "s32", "f32", "f64"].includes(e2) || (e2 = "f32"), e2;
  }
  getPlaneCount() {
    return this.pixels?.length;
  }
  addData(t3) {
    if (!t3.pixels || t3.pixels.length !== this.width * this.height) throw new s("pixelblock:invalid-or-missing-pixels", "add data requires valid pixels array that has same length defined by pixel block width * height");
    this.pixels || (this.pixels = []), this.statistics || (this.statistics = []), this.pixels.push(t3.pixels), this.statistics.push(t3.statistics ?? new l2());
  }
  getAsRGBA() {
    const t3 = new ArrayBuffer(this.width * this.height * 4);
    switch (this.pixelType) {
      case "s8":
      case "s16":
      case "u16":
      case "s32":
      case "u32":
      case "f32":
      case "f64":
        this._fillFromNon8Bit(t3);
        break;
      default:
        this._fillFrom8Bit(t3);
    }
    return new Uint8ClampedArray(t3);
  }
  getAsRGBAFloat() {
    const t3 = new Float32Array(this.width * this.height * 4);
    return this._fillFrom32Bit(t3), t3;
  }
  updateStatistics() {
    if (!this.pixels) return;
    this.statistics = this.pixels.map(((t4) => u2(t4, this.mask)));
    const t3 = this.mask;
    let e2 = 0;
    if (null != t3) for (let s8 = 0; s8 < t3.length; s8++) t3[s8] && e2++;
    else e2 = this.width * this.height;
    this.validPixelCount = e2;
  }
  clamp(t3) {
    if (!t3 || "f64" === t3 || "f32" === t3 || !this.pixels) return;
    const [e2, s8] = u(t3), i6 = this.pixels, l6 = this.width * this.height, r5 = i6.length;
    let o5, n2, a7;
    const c6 = [];
    for (let h5 = 0; h5 < r5; h5++) {
      a7 = p.createEmptyBand(t3, l6), o5 = i6[h5];
      for (let t4 = 0; t4 < l6; t4++) n2 = o5[t4], a7[t4] = n2 > s8 ? s8 : n2 < e2 ? e2 : n2;
      c6.push(a7);
    }
    this.pixels = c6, this.pixelType = t3;
  }
  extractBands(t3) {
    const { pixels: e2, statistics: s8 } = this;
    if (null == t3 || 0 === t3.length || !e2 || 0 === e2.length) return this;
    const i6 = e2.length, l6 = t3.some(((t4) => t4 >= e2.length)), r5 = i6 === t3.length && !t3.some(((t4, e3) => t4 !== e3));
    if (l6 || r5) return this;
    const o5 = this.bandMasks?.length === i6 ? t3.map(((t4) => this.bandMasks[t4])) : void 0;
    let { mask: n2, validPixelCount: a7 } = this;
    const { width: h5, height: c6 } = this;
    return o5?.length && (n2 = p.combineBandMasks(o5), a7 = n2.filter(((t4) => !!t4)).length), new p({ pixelType: this.pixelType, width: h5, height: c6, mask: n2, bandMasks: o5, validPixelCount: a7, maskIsAlpha: this.maskIsAlpha, pixels: t3.map(((t4) => e2[t4])), statistics: s8 && t3.map(((t4) => s8[t4])) });
  }
  clone() {
    const t3 = new p({ width: this.width, height: this.height, pixelType: this.pixelType, maskIsAlpha: this.maskIsAlpha, validPixelCount: this.validPixelCount });
    let e2;
    null != this.mask && (t3.mask = new Uint8Array(this.mask)), this.bandMasks && (t3.bandMasks = this.bandMasks.map(((t4) => new Uint8Array(t4))));
    const s8 = p.getPixelArrayConstructor(this.pixelType);
    if (this.pixels && this.pixels.length > 0) {
      t3.pixels = [];
      const i6 = !!this.pixels[0].slice;
      for (e2 = 0; e2 < this.pixels.length; e2++) t3.pixels[e2] = i6 ? this.pixels[e2].slice() : new s8(this.pixels[e2]);
    }
    if (this.statistics) for (t3.statistics = [], e2 = 0; e2 < this.statistics.length; e2++) t3.statistics[e2] = a(this.statistics[e2]);
    return t3.premultiplyAlpha = this.premultiplyAlpha, t3;
  }
  _fillFrom8Bit(t3) {
    const { mask: e2, maskIsAlpha: s8, premultiplyAlpha: i6, pixels: r5 } = this;
    if (!t3 || !r5?.length) return void i.getLogger(this).error("getAsRGBA()", "Unable to convert to RGBA. The input pixel block is empty.");
    let o5, n2, a7, h5;
    o5 = n2 = a7 = r5[0], r5.length >= 3 ? (n2 = r5[1], a7 = r5[2]) : 2 === r5.length && (n2 = r5[1]);
    const p5 = new Uint32Array(t3), c6 = this.width * this.height;
    if (o5.length === c6) if (null != e2 && e2.length === c6) if (s8) for (h5 = 0; h5 < c6; h5++) {
      const t4 = e2[h5];
      if (t4) {
        const e3 = t4 / 255;
        p5[h5] = i6 ? t4 << 24 | a7[h5] * e3 << 16 | n2[h5] * e3 << 8 | o5[h5] * e3 : t4 << 24 | a7[h5] << 16 | n2[h5] << 8 | o5[h5];
      }
    }
    else for (h5 = 0; h5 < c6; h5++) e2[h5] && (p5[h5] = 255 << 24 | a7[h5] << 16 | n2[h5] << 8 | o5[h5]);
    else for (h5 = 0; h5 < c6; h5++) p5[h5] = 255 << 24 | a7[h5] << 16 | n2[h5] << 8 | o5[h5];
    else i.getLogger(this).error("getAsRGBA()", "Unable to convert to RGBA. The pixelblock is invalid.");
  }
  _fillFromNon8Bit(t3) {
    const { pixels: e2, mask: s8, statistics: i6 } = this;
    if (!t3 || !e2?.length) return void i.getLogger(this).error("getAsRGBA()", "Unable to convert to RGBA. The input pixel block is empty.");
    const r5 = this.pixelType;
    let o5 = 1, n2 = 0, a7 = 1;
    if (i6 && i6.length > 0) {
      for (const t4 of i6) if (null != t4.minValue && (n2 = Math.min(n2, t4.minValue)), null != t4.maxValue && null != t4.minValue) {
        const e3 = t4.maxValue - t4.minValue;
        a7 = Math.max(a7, e3);
      }
      o5 = 255 / a7;
    } else {
      let t4 = 255;
      "s8" === r5 ? (n2 = -128, t4 = 127) : "u16" === r5 ? t4 = 65535 : "s16" === r5 ? (n2 = -32768, t4 = 32767) : "u32" === r5 ? t4 = 4294967295 : "s32" === r5 ? (n2 = -2147483648, t4 = 2147483647) : "f32" === r5 ? (n2 = -34e38, t4 = 34e38) : "f64" === r5 && (n2 = -Number.MAX_VALUE, t4 = Number.MAX_VALUE), o5 = 255 / (t4 - n2);
    }
    const h5 = new Uint32Array(t3), p5 = this.width * this.height;
    let c6, u6, g5, f5, m5;
    if (c6 = u6 = g5 = e2[0], c6.length !== p5) return i.getLogger(this).error("getAsRGBA()", "Unable to convert to RGBA. The pixelblock is invalid.");
    if (e2.length >= 2) if (u6 = e2[1], e2.length >= 3 && (g5 = e2[2]), null != s8 && s8.length === p5) for (f5 = 0; f5 < p5; f5++) s8[f5] && (h5[f5] = 255 << 24 | (g5[f5] - n2) * o5 << 16 | (u6[f5] - n2) * o5 << 8 | (c6[f5] - n2) * o5);
    else for (f5 = 0; f5 < p5; f5++) h5[f5] = 255 << 24 | (g5[f5] - n2) * o5 << 16 | (u6[f5] - n2) * o5 << 8 | (c6[f5] - n2) * o5;
    else if (null != s8 && s8.length === p5) for (f5 = 0; f5 < p5; f5++) m5 = (c6[f5] - n2) * o5, s8[f5] && (h5[f5] = 255 << 24 | m5 << 16 | m5 << 8 | m5);
    else for (f5 = 0; f5 < p5; f5++) m5 = (c6[f5] - n2) * o5, h5[f5] = 255 << 24 | m5 << 16 | m5 << 8 | m5;
  }
  _fillFrom32Bit(t3) {
    const { pixels: e2, mask: s8 } = this;
    if (!t3 || !e2?.length) return i.getLogger(this).error("getAsRGBAFloat()", "Unable to convert to RGBA. The input pixel block is empty.");
    let i6, r5, o5, n2;
    i6 = r5 = o5 = e2[0], e2.length >= 3 ? (r5 = e2[1], o5 = e2[2]) : 2 === e2.length && (r5 = e2[1]);
    const a7 = this.width * this.height;
    if (i6.length !== a7) return i.getLogger(this).error("getAsRGBAFloat()", "Unable to convert to RGBA. The pixelblock is invalid.");
    let h5 = 0;
    if (null != s8 && s8.length === a7) for (n2 = 0; n2 < a7; n2++) t3[h5++] = i6[n2], t3[h5++] = r5[n2], t3[h5++] = o5[n2], t3[h5++] = 1 & s8[n2];
    else for (n2 = 0; n2 < a7; n2++) t3[h5++] = i6[n2], t3[h5++] = r5[n2], t3[h5++] = o5[n2], t3[h5++] = 1;
  }
};
function u2(t3, e2) {
  let s8 = 1 / 0, i6 = -1 / 0;
  const l6 = t3.length;
  let r5, o5 = 0;
  if (null != e2) for (r5 = 0; r5 < l6; r5++) e2[r5] && (o5 = t3[r5], s8 = o5 < s8 ? o5 : s8, i6 = o5 > i6 ? o5 : i6);
  else for (r5 = 0; r5 < l6; r5++) o5 = t3[r5], s8 = o5 < s8 ? o5 : s8, i6 = o5 > i6 ? o5 : i6;
  return new l2(s8, i6);
}
r([m({ json: { write: true } })], c2.prototype, "width", void 0), r([m({ json: { write: true } })], c2.prototype, "height", void 0), r([m({ json: { write: true } })], c2.prototype, "pixelType", void 0), r([s3("pixelType")], c2.prototype, "castPixelType", null), r([m({ json: { write: true } })], c2.prototype, "validPixelCount", void 0), r([m({ json: { write: true } })], c2.prototype, "mask", void 0), r([m({ json: { write: true } })], c2.prototype, "maskIsAlpha", void 0), r([m({ json: { write: true } })], c2.prototype, "pixels", void 0), r([m()], c2.prototype, "premultiplyAlpha", void 0), r([m({ json: { write: true } })], c2.prototype, "statistics", void 0), r([m({ json: { write: true } })], c2.prototype, "depthCount", void 0), r([m({ json: { write: true } })], c2.prototype, "noDataValues", void 0), r([m({ json: { write: true } })], c2.prototype, "bandMasks", void 0), c2 = p = r([a2("esri.layers.support.PixelBlock")], c2);

// node_modules/@arcgis/core/layers/support/rasterFunctions/pixelUtils.js
var l4;
var i3;
!(function(t3) {
  t3[t3.matchAny = 0] = "matchAny", t3[t3.matchAll = 1] = "matchAll";
})(l4 || (l4 = {})), (function(t3) {
  t3[t3.bestMatch = 0] = "bestMatch", t3[t3.fail = 1] = "fail";
})(i3 || (i3 = {}));
var o3 = 9;
function r3(t3) {
  return null != t3 && t3.pixels?.length > 0;
}
function a4(t3) {
  if (!t3?.length || t3.some(((t4) => !r3(t4)))) return null;
  if (1 === t3.length) return t3[0]?.clone() ?? null;
  const n2 = t3, { width: l6, height: i6, pixelType: o5 } = n2[0];
  if (n2.some(((t4) => t4.width !== l6 || t4.height !== i6))) return null;
  const s8 = n2.map((({ mask: t4 }) => t4)).filter(((t4) => null != t4));
  let a7 = null;
  s8.length && (a7 = new Uint8Array(l6 * i6), a7.set(s8[0]), s8.length > 1 && y(s8.slice(1), a7));
  const h5 = [];
  n2.forEach((({ pixels: t4 }) => h5.push(...t4)));
  const f5 = n2.map((({ statistics: t4 }) => t4)).filter(((t4) => t4?.length)), c6 = [];
  return f5.forEach(((t4) => c6.push(...t4))), new c2({ pixelType: o5, width: l6, height: i6, mask: a7, pixels: h5, statistics: c6.length ? c6 : null });
}
function h2(t3) {
  if (!t3) return;
  const e2 = t3.colormap;
  if (!e2 || 0 === e2.length) return;
  const n2 = e2.sort(((t4, e3) => t4[0] - e3[0])), l6 = n2[0][0] < 0 ? n2[0][0] : 0, i6 = Math.max(256, n2[n2.length - 1][0] - l6 + 1), o5 = new Uint8Array(4 * i6), r5 = [], s8 = 5 === n2[0].length;
  if (i6 > 65536) return n2.forEach(((t4) => {
    r5[t4[0] - l6] = s8 ? t4.slice(1) : t4.slice(1).concat([255]);
  })), { indexed2DColormap: r5, offset: l6, alphaSpecified: s8 };
  if (t3.fillUnspecified) {
    let t4 = n2[0];
    for (let e3 = t4[0] - l6, r6 = 0; e3 < i6; e3++) o5[4 * e3] = t4[1], o5[4 * e3 + 1] = t4[2], o5[4 * e3 + 2] = t4[3], o5[4 * e3 + 3] = s8 ? t4[4] : 255, e3 === t4[0] - l6 && (t4 = r6 === n2.length - 1 ? t4 : n2[++r6]);
  } else for (let a7 = 0; a7 < n2.length; a7++) {
    const t4 = n2[a7], e3 = 4 * (t4[0] - l6);
    o5[e3] = t4[1], o5[e3 + 1] = t4[2], o5[e3 + 2] = t4[3], o5[e3 + 3] = s8 ? t4[4] : 255;
  }
  return { indexedColormap: o5, offset: l6, alphaSpecified: s8 };
}
function f2(t3, e2) {
  if (!r3(t3)) return t3;
  if (!e2 || !e2.indexedColormap && !e2.indexed2DColormap) return t3;
  const n2 = t3.clone(), l6 = n2.pixels;
  let i6 = n2.mask;
  const o5 = n2.width * n2.height;
  if (1 !== l6.length) return t3;
  const { indexedColormap: s8, indexed2DColormap: a7, offset: h5, alphaSpecified: f5 } = e2, c6 = l6[0], u6 = new Uint8Array(c6.length), p5 = new Uint8Array(c6.length), x3 = new Uint8Array(c6.length);
  let m5, d5 = 0;
  if (s8) {
    const t4 = s8.length - 1;
    if (null != i6) for (let e3 = 0; e3 < o5; e3++) i6[e3] && (d5 = 4 * (c6[e3] - h5), d5 < h5 || d5 > t4 ? i6[e3] = 0 : (u6[e3] = s8[d5], p5[e3] = s8[d5 + 1], x3[e3] = s8[d5 + 2], i6[e3] = s8[d5 + 3]));
    else {
      i6 = new Uint8Array(o5);
      for (let e3 = 0; e3 < o5; e3++) d5 = 4 * (c6[e3] - h5), d5 < h5 || d5 > t4 ? i6[e3] = 0 : (u6[e3] = s8[d5], p5[e3] = s8[d5 + 1], x3[e3] = s8[d5 + 2], i6[e3] = s8[d5 + 3]);
      n2.mask = i6;
    }
  } else if (a7) if (null != i6) for (let r5 = 0; r5 < o5; r5++) i6[r5] && (m5 = a7[c6[r5]], u6[r5] = m5[0], p5[r5] = m5[1], x3[r5] = m5[2], i6[r5] = m5[3]);
  else {
    i6 = new Uint8Array(o5);
    for (let t4 = 0; t4 < o5; t4++) m5 = a7[c6[t4]], u6[t4] = m5[0], p5[t4] = m5[1], x3[t4] = m5[2], i6[t4] = m5[3];
    n2.mask = i6;
  }
  return n2.pixels = [u6, p5, x3], n2.statistics = null, n2.pixelType = "u8", n2.maskIsAlpha = f5, n2;
}
function c3(t3, n2) {
  if (!r3(t3)) return null;
  const { pixels: l6, mask: i6 } = t3, o5 = l6.length;
  let s8 = n2.lut;
  const { offset: a7 } = n2;
  s8 && 1 === s8[0].length && (s8 = l6.map((() => s8)));
  const h5 = [], f5 = n2.outputPixelType || "u8";
  for (let e2 = 0; e2 < o5; e2++) {
    const t4 = u3(l6[e2], i6, s8[e2], a7 || 0, f5);
    h5.push(t4);
  }
  const c6 = new c2({ width: t3.width, height: t3.height, pixels: h5, mask: i6, pixelType: f5 });
  return c6.updateStatistics(), c6;
}
function u3(t3, n2, l6, i6, o5) {
  const r5 = t3.length, s8 = c2.createEmptyBand(o5, r5);
  if (n2) for (let e2 = 0; e2 < r5; e2++) n2[e2] && (s8[e2] = l6[t3[e2] - i6]);
  else for (let e2 = 0; e2 < r5; e2++) s8[e2] = l6[t3[e2] - i6];
  return s8;
}
function p2(t3, e2) {
  if (!r3(t3)) return null;
  const n2 = t3.clone(), { pixels: l6 } = n2, i6 = n2.width * n2.height, o5 = e2.length, s8 = Math.floor(o5 / 2), a7 = e2[Math.floor(s8)], h5 = l6[0], f5 = new Uint8Array(i6), c6 = new Uint8Array(i6), u6 = new Uint8Array(i6);
  let p5 = n2.mask;
  const x3 = 4 === e2[0].mappedColor.length;
  p5 || (p5 = new Uint8Array(i6), p5.fill(x3 ? 255 : 1), n2.mask = p5);
  for (let r5 = 0; r5 < i6; r5++) if (p5[r5]) {
    const t4 = h5[r5];
    let n3 = false, l7 = s8, i7 = a7, x4 = 0, m5 = o5 - 1;
    for (; m5 - x4 > 1; ) {
      if (t4 === i7.value) {
        n3 = true;
        break;
      }
      t4 > i7.value ? x4 = l7 : m5 = l7, l7 = Math.floor((x4 + m5) / 2), i7 = e2[Math.floor(l7)];
    }
    n3 || (t4 === e2[x4].value ? (i7 = e2[x4], n3 = true) : t4 === e2[m5].value ? (i7 = e2[m5], n3 = true) : t4 < e2[x4].value ? n3 = false : t4 > e2[x4].value && (t4 < e2[m5].value ? (i7 = e2[x4], n3 = true) : m5 === o5 - 1 ? n3 = false : (i7 = e2[m5], n3 = true))), n3 ? (f5[r5] = i7.mappedColor[0], c6[r5] = i7.mappedColor[1], u6[r5] = i7.mappedColor[2], p5[r5] = i7.mappedColor[3]) : f5[r5] = c6[r5] = u6[r5] = p5[r5] = 0;
  }
  return n2.pixels = [f5, c6, u6], n2.mask = p5, n2.pixelType = "u8", n2.maskIsAlpha = x3, n2;
}
function x(e2, n2, l6 = false) {
  const i6 = 1e-5, r5 = new Float32Array(3 * o3), s8 = n2.length;
  for (let a7 = 0; a7 < o3; a7++) r5[3 * a7] = e2[2 * a7] ?? q - 1, r5[3 * a7 + 1] = e2[2 * a7 + 1] ?? q, r5[3 * a7 + 2] = n2[a7] ?? 0, a7 < s8 && (a7 > 0 && (r5[3 * a7] -= i6), e2[2 * a7 + 1] !== e2[2 * a7] && (a7 < s8 - 1 || !l6) && (r5[3 * a7 + 1] -= i6));
  return r5;
}
function m2(t3, l6) {
  if (!r3(t3)) return null;
  const { width: i6, height: o5 } = t3, { inputRanges: s8, outputValues: a7, outputPixelType: h5, noDataRanges: f5, allowUnmatched: c6, replacementValue: u6, isLastInputRangeInclusive: p5 } = l6, x3 = t3.pixels[0], m5 = c2.createEmptyBand(h5, x3.length), d5 = t3.mask, g5 = new Uint8Array(i6 * o5);
  d5 ? g5.set(d5) : g5.fill(255);
  const y4 = t3.pixelType.startsWith("f") ? 1e-6 : 0, w4 = s8.map(((t4) => t4 - y4));
  w4[0] = s8[0], w4[w4.length - 1] = s8[s8.length - 1] + (p5 ? 1e-6 : 0);
  const k3 = s8.length / 2, [M3, A3] = u(h5);
  for (let e2 = 0; e2 < o5; e2++) for (let t4 = 0; t4 < i6; t4++) {
    const n2 = e2 * i6 + t4;
    if (g5[n2]) {
      const t5 = x3[n2];
      let e3 = false;
      for (let l7 = k3 - 1; l7 >= 0; l7--) if (t5 === s8[2 * l7] || t5 > w4[2 * l7] && t5 < w4[2 * l7 + 1]) {
        m5[n2] = a7[l7], e3 = true;
        break;
      }
      e3 || (c6 ? m5[n2] = t5 > A3 ? A3 : t5 < M3 ? M3 : u6 ?? t5 : g5[n2] = 0);
    }
  }
  const U3 = f5?.length;
  if (U3) for (let e2 = 0; e2 < o5; e2++) for (let t4 = 0; t4 < i6; t4++) {
    const n2 = e2 * i6 + t4;
    if (!d5 || d5[n2]) {
      const t5 = x3[n2];
      for (let e3 = 0; e3 < U3; e3 += 2) if (t5 >= f5[e3] && t5 <= f5[e3 + 1]) {
        m5[n2] = 0, g5[n2] = 0;
        break;
      }
    }
  }
  return new c2({ width: i6, height: o5, pixelType: h5, pixels: [m5], mask: g5 });
}
function d2(t3, e2, n2, l6) {
  const i6 = null != n2 && n2.length >= 2 ? new Set(n2) : null, o5 = 1 === n2?.length ? n2[0] : null, r5 = !!e2?.length;
  for (let s8 = 0; s8 < t3.length; s8++) if (l6[s8]) {
    const n3 = t3[s8];
    if (r5) {
      let t4 = false;
      for (let l7 = 0; l7 < e2.length; l7 += 2) if (n3 >= e2[l7] && n3 <= e2[l7 + 1]) {
        t4 = true;
        break;
      }
      t4 || (l6[s8] = 0);
    }
    l6[s8] && (n3 === o5 || i6?.has(n3)) && (l6[s8] = 0);
  }
}
function g2(t3, e2) {
  const n2 = t3[0].length;
  for (let l6 = 0; l6 < n2; l6++) if (e2[l6]) {
    let n3 = false;
    for (let e3 = 0; e3 < t3.length; e3++) if (t3[e3][l6]) {
      n3 = true;
      break;
    }
    n3 || (e2[l6] = 0);
  }
}
function y(t3, e2) {
  const n2 = t3[0].length;
  for (let l6 = 0; l6 < n2; l6++) if (e2[l6]) {
    let n3 = false;
    for (let e3 = 0; e3 < t3.length; e3++) if (0 === t3[e3][l6]) {
      n3 = true;
      break;
    }
    n3 && (e2[l6] = 0);
  }
}
function w(t3, n2) {
  if (!r3(t3)) return null;
  const { width: l6, height: i6, pixels: o5 } = t3, s8 = l6 * i6, a7 = new Uint8Array(s8);
  t3.mask ? a7.set(t3.mask) : a7.fill(255);
  const h5 = o5.length, { includedRanges: f5, noDataValues: c6, outputPixelType: p5, matchAll: x3, lookups: m5 } = n2;
  if (m5) {
    const t4 = [];
    for (let e2 = 0; e2 < h5; e2++) {
      const n3 = m5[e2], l7 = u3(o5[e2], a7, n3.lut, n3.offset || 0, "u8");
      t4.push(l7);
    }
    1 === t4.length ? a7.set(t4[0]) : x3 ? g2(t4, a7) : y(t4, a7);
  } else if (x3) {
    const t4 = [];
    for (let e2 = 0; e2 < h5; e2++) {
      const n3 = new Uint8Array(s8);
      n3.set(a7), d2(o5[e2], f5?.slice(2 * e2, 2 * e2 + 2), c6?.[e2], n3), t4.push(n3);
    }
    1 === t4.length ? a7.set(t4[0]) : g2(t4, a7);
  } else for (let e2 = 0; e2 < h5; e2++) d2(o5[e2], f5?.slice(2 * e2, 2 * e2 + 2), c6?.[e2], a7);
  return new c2({ width: l6, height: i6, pixelType: p5, pixels: o5, mask: a7 });
}
function k(t3) {
  const { srcPixelType: l6, inputRanges: i6, outputValues: o5, allowUnmatched: r5, noDataRanges: s8, isLastInputRangeInclusive: a7, outputPixelType: h5 } = t3;
  if ("u8" !== l6 && "s8" !== l6 && "u16" !== l6 && "s16" !== l6) return null;
  const f5 = l6.includes("16") ? 65536 : 256, c6 = l6.includes("s") ? -f5 / 2 : 0, u6 = c2.createEmptyBand(h5, f5), p5 = new Uint8Array(f5);
  r5 && p5.fill(255);
  const [x3, m5] = u(h5);
  if (i6?.length && o5?.length) {
    const t4 = 1e-6, e2 = i6.map(((e3) => e3 - t4));
    e2[0] = i6[0], a7 && (e2[e2.length - 1] = i6[i6.length - 1]);
    for (let n2 = 0; n2 < e2.length; n2++) {
      const t5 = o5[n2] > m5 ? m5 : o5[n2] < x3 ? x3 : o5[n2], l7 = Math.ceil(e2[2 * n2] - c6), r6 = i6[2 * n2 + 1] === i6[2 * n2] ? l7 : Math.floor(e2[2 * n2 + 1] - c6);
      for (let e3 = l7; e3 <= r6; e3++) u6[e3] = t5, p5[e3] = 255;
    }
  }
  if (s8?.length) for (let e2 = 0; e2 < s8.length; e2++) {
    const t4 = Math.ceil(s8[2 * e2] - c6), n2 = Math.floor(s8[2 * e2 + 1] - c6);
    for (let e3 = t4; e3 <= n2; e3++) p5[e3] = 0;
  }
  return { lut: u6, offset: c6, mask: p5 };
}
function M(t3, e2, n2) {
  if ("u8" !== t3 && "s8" !== t3 && "u16" !== t3 && "s16" !== t3) return null;
  const l6 = t3.includes("16") ? 65536 : 256, i6 = t3.includes("s") ? -l6 / 2 : 0, o5 = new Uint8Array(l6);
  if (e2) for (let r5 = 0; r5 < e2.length; r5++) {
    const t4 = Math.ceil(e2[2 * r5] - i6), n3 = Math.floor(e2[2 * r5 + 1] - i6);
    for (let e3 = t4; e3 <= n3; e3++) o5[e3] = 255;
  }
  else o5.fill(255);
  if (n2) for (let r5 = 0; r5 < n2.length; r5++) o5[n2[r5] - i6] = 0;
  return { lut: o5, offset: i6 };
}
function A(t3, e2, n2, l6, i6, o5, r5, s8) {
  return { xmin: i6 <= n2 * t3 ? 0 : i6 < n2 * t3 + t3 ? i6 - n2 * t3 : t3, ymin: o5 <= l6 * e2 ? 0 : o5 < l6 * e2 + e2 ? o5 - l6 * e2 : e2, xmax: i6 + r5 <= n2 * t3 ? 0 : i6 + r5 < n2 * t3 + t3 ? i6 + r5 - n2 * t3 : t3, ymax: o5 + s8 <= l6 * e2 ? 0 : o5 + s8 < l6 * e2 + e2 ? o5 + s8 - l6 * e2 : e2 };
}
function U(t3, e2) {
  if (!t3 || 0 === t3.length) return null;
  const n2 = t3.find(((t4) => t4.pixelBlock));
  if (null == n2?.pixelBlock) return null;
  const l6 = (n2.extent.xmax - n2.extent.xmin) / n2.pixelBlock.width, i6 = (n2.extent.ymax - n2.extent.ymin) / n2.pixelBlock.height, o5 = 0.01 * Math.min(l6, i6), r5 = t3.sort(((t4, e3) => Math.abs(t4.extent.ymax - e3.extent.ymax) > o5 ? e3.extent.ymax - t4.extent.ymax : Math.abs(t4.extent.xmin - e3.extent.xmin) > o5 ? t4.extent.xmin - e3.extent.xmin : 0)), s8 = Math.min.apply(null, r5.map(((t4) => t4.extent.xmin))), a7 = Math.min.apply(null, r5.map(((t4) => t4.extent.ymin))), h5 = Math.max.apply(null, r5.map(((t4) => t4.extent.xmax))), f5 = Math.max.apply(null, r5.map(((t4) => t4.extent.ymax))), c6 = { x: Math.round((e2.xmin - s8) / l6), y: Math.round((f5 - e2.ymax) / i6) }, u6 = { width: Math.round((h5 - s8) / l6), height: Math.round((f5 - a7) / i6) }, p5 = { width: Math.round((e2.xmax - e2.xmin) / l6), height: Math.round((e2.ymax - e2.ymin) / i6) };
  if (Math.round(u6.width / n2.pixelBlock.width) * Math.round(u6.height / n2.pixelBlock.height) !== r5.length || c6.x < 0 || c6.y < 0 || u6.width < p5.width || u6.height < p5.height) return null;
  return { extent: e2, pixelBlock: T(r5.map(((t4) => t4.pixelBlock)), u6, { clipOffset: c6, clipSize: p5 }) };
}
function b2(t3, e2, n2, l6, i6, o5) {
  const { width: r5, height: s8 } = n2.block, { x: a7, y: h5 } = n2.offset, { width: f5, height: c6 } = n2.mosaic, u6 = A(r5, s8, l6, i6, a7, h5, f5, c6);
  let p5 = 0, x3 = 0;
  if (o5) {
    const t4 = o5.hasGCSSShiftTransform ? 360 : o5.halfWorldWidth ?? 0, e3 = r5 * o5.resolutionX, n3 = o5.startX + l6 * e3;
    n3 < t4 && n3 + e3 > t4 ? x3 = o5.rightPadding : n3 >= t4 && (p5 = o5.leftMargin - o5.rightPadding, x3 = 0);
  }
  if (u6.xmax -= x3, "number" != typeof e2) for (let m5 = u6.ymin; m5 < u6.ymax; m5++) {
    const n3 = (i6 * s8 + m5 - h5) * f5 + (l6 * r5 - a7) + p5, o6 = m5 * r5;
    for (let l7 = u6.xmin; l7 < u6.xmax; l7++) t3[n3 + l7] = e2[o6 + l7];
  }
  else for (let m5 = u6.ymin; m5 < u6.ymax; m5++) {
    const n3 = (i6 * s8 + m5 - h5) * f5 + (l6 * r5 - a7) + p5;
    for (let l7 = u6.xmin; l7 < u6.xmax; l7++) t3[n3 + l7] = e2;
  }
}
function T(t3, n2, l6 = {}) {
  const { clipOffset: i6, clipSize: o5, alignmentInfo: s8, blockWidths: a7 } = l6;
  if (a7) return v(t3, n2, { blockWidths: a7 });
  const h5 = t3.find(((t4) => r3(t4)));
  if (null == h5) return null;
  const f5 = o5 ? o5.width : n2.width, c6 = o5 ? o5.height : n2.height, u6 = h5.width, p5 = h5.height, x3 = n2.width / u6, m5 = n2.height / p5, d5 = { offset: i6 || { x: 0, y: 0 }, mosaic: o5 || n2, block: { width: u6, height: p5 } }, g5 = h5.pixelType, y4 = c2.getPixelArrayConstructor(g5), w4 = h5.pixels.length, k3 = [];
  let M3, A3;
  for (let e2 = 0; e2 < w4; e2++) {
    A3 = new y4(f5 * c6);
    for (let n3 = 0; n3 < m5; n3++) for (let l7 = 0; l7 < x3; l7++) {
      const i7 = t3[n3 * x3 + l7];
      r3(i7) && (M3 = i7.pixels[e2], b2(A3, M3, d5, l7, n3, s8));
    }
    k3.push(A3);
  }
  const U3 = t3.some(((t4) => null == t4 || null != t4.mask && t4.mask.length > 0)), T2 = t3.some(((t4) => t4?.bandMasks && t4.bandMasks.length > 1)), B2 = U3 ? new Uint8Array(f5 * c6) : void 0, S3 = T2 ? [] : void 0;
  if (B2) {
    for (let e2 = 0; e2 < m5; e2++) for (let n3 = 0; n3 < x3; n3++) {
      const l7 = t3[e2 * x3 + n3], i7 = null != l7 ? l7.mask : null;
      b2(B2, null != i7 ? i7 : l7 ? 255 : 0, d5, n3, e2, s8);
    }
    if (S3) for (let e2 = 0; e2 < w4; e2++) {
      const n3 = new Uint8Array(f5 * c6);
      for (let l7 = 0; l7 < m5; l7++) for (let i7 = 0; i7 < x3; i7++) {
        const o6 = t3[l7 * x3 + i7], r5 = o6?.bandMasks?.[e2] ?? o6?.mask;
        b2(n3, null != r5 ? r5 : o6 ? 255 : 0, d5, i7, l7, s8);
      }
      S3.push(n3);
    }
  }
  const C2 = new c2({ width: f5, height: c6, pixels: k3, pixelType: g5, bandMasks: S3, mask: B2 });
  return C2.updateStatistics(), C2;
}
function v(t3, n2, l6) {
  const i6 = t3.find(((t4) => null != t4));
  if (null == i6) return null;
  const o5 = t3.some(((t4) => null == t4 || !!t4.mask)), { width: s8, height: a7 } = n2, h5 = o5 ? new Uint8Array(s8 * a7) : null, { blockWidths: f5 } = l6, c6 = [], u6 = i6.getPlaneCount(), p5 = c2.getPixelArrayConstructor(i6.pixelType);
  if (o5) for (let e2 = 0, y4 = 0; e2 < t3.length; y4 += f5[e2], e2++) {
    const n3 = t3[e2];
    if (!r3(n3)) continue;
    const l7 = n3.mask;
    for (let t4 = 0; t4 < a7; t4++) for (let i7 = 0; i7 < f5[e2]; i7++) h5[t4 * s8 + i7 + y4] = null == l7 ? 255 : l7[t4 * n3.width + i7];
  }
  const x3 = t3.some(((t4) => t4?.bandMasks && t4.bandMasks.length > 1)), m5 = x3 ? [] : void 0, d5 = s8 * a7;
  for (let e2 = 0; e2 < u6; e2++) {
    const n3 = new p5(d5), l7 = x3 ? new Uint8Array(d5) : void 0;
    for (let i7 = 0, o6 = 0; i7 < t3.length; o6 += f5[i7], i7++) {
      const h6 = t3[i7];
      if (!r3(h6)) continue;
      const c7 = h6.pixels[e2];
      if (null != c7) {
        for (let t4 = 0; t4 < a7; t4++) for (let e3 = 0; e3 < f5[i7]; e3++) n3[t4 * s8 + e3 + o6] = c7[t4 * h6.width + e3];
        if (l7) {
          const t4 = h6.bandMasks?.[e2] ?? h6.mask;
          for (let e3 = 0; e3 < a7; e3++) for (let n4 = 0; n4 < f5[i7]; n4++) l7[e3 * s8 + n4 + o6] = t4 ? t4[e3 * h6.width + n4] : 255;
        }
      }
    }
    c6.push(n3), m5 && l7 && m5.push(l7);
  }
  const g5 = new c2({ width: s8, height: a7, mask: h5, bandMasks: m5, pixels: c6, pixelType: i6.pixelType });
  return g5.updateStatistics(), g5;
}
function B(t3, e2, n2) {
  if (!r3(t3)) return null;
  const { width: l6, height: i6 } = t3, o5 = e2.x, s8 = e2.y, a7 = n2.width + o5, h5 = n2.height + s8;
  if (o5 < 0 || s8 < 0 || a7 > l6 || h5 > i6) return t3;
  if (0 === o5 && 0 === s8 && a7 === l6 && h5 === i6) return t3;
  t3.mask || (t3.mask = new Uint8Array(l6 * i6));
  const f5 = t3.mask;
  for (let r5 = 0; r5 < i6; r5++) {
    const t4 = r5 * l6;
    for (let e3 = 0; e3 < l6; e3++) f5[t4 + e3] = r5 < s8 || r5 >= h5 || e3 < o5 || e3 >= a7 ? 0 : 1;
  }
  return t3.updateStatistics(), t3;
}
function S(t3) {
  if (!r3(t3)) return null;
  const e2 = t3.clone(), { width: n2, height: l6, pixels: i6 } = t3, o5 = i6[0], s8 = e2.pixels[0], a7 = t3.mask;
  for (let r5 = 2; r5 < l6 - 1; r5++) {
    const t4 = /* @__PURE__ */ new Map();
    for (let l7 = r5 - 2; l7 < r5 + 2; l7++) for (let e4 = 0; e4 < 4; e4++) {
      const i7 = l7 * n2 + e4;
      _(t4, o5[i7], a7 ? a7[i7] : 1);
    }
    s8[r5 * n2] = C(t4), s8[r5 * n2 + 1] = s8[r5 * n2 + 2] = s8[r5 * n2];
    let e3 = 3;
    for (; e3 < n2 - 1; e3++) {
      let l7 = (r5 - 2) * n2 + e3 + 1;
      _(t4, o5[l7], a7 ? a7[l7] : 1), l7 = (r5 - 1) * n2 + e3 + 1, _(t4, o5[l7], a7 ? a7[l7] : 1), l7 = r5 * n2 + e3 + 1, _(t4, o5[l7], a7 ? a7[l7] : 1), l7 = (r5 + 1) * n2 + e3 + 1, _(t4, o5[l7], a7 ? a7[l7] : 1), l7 = (r5 - 2) * n2 + e3 - 3, P(t4, o5[l7], a7 ? a7[l7] : 1), l7 = (r5 - 1) * n2 + e3 - 3, P(t4, o5[l7], a7 ? a7[l7] : 1), l7 = r5 * n2 + e3 - 3, P(t4, o5[l7], a7 ? a7[l7] : 1), l7 = (r5 + 1) * n2 + e3 - 3, P(t4, o5[l7], a7 ? a7[l7] : 1), s8[r5 * n2 + e3] = C(t4);
    }
    s8[r5 * n2 + e3 + 1] = s8[r5 * n2 + e3];
  }
  for (let r5 = 0; r5 < n2; r5++) s8[r5] = s8[n2 + r5] = s8[2 * n2 + r5], s8[(l6 - 1) * n2 + r5] = s8[(l6 - 2) * n2 + r5];
  return e2.updateStatistics(), e2;
}
function C(t3) {
  if (0 === t3.size) return 0;
  let e2 = 0, n2 = -1, l6 = 0;
  const i6 = t3.keys();
  let o5 = i6.next();
  for (; !o5.done; ) l6 = t3.get(o5.value), l6 > e2 && (n2 = o5.value, e2 = l6), o5 = i6.next();
  return n2;
}
function P(t3, e2, n2) {
  if (0 === n2) return;
  const l6 = t3.get(e2);
  1 === l6 ? t3.delete(e2) : t3.set(e2, l6 - 1);
}
function _(t3, e2, n2) {
  0 !== n2 && t3.set(e2, t3.has(e2) ? t3.get(e2) + 1 : 1);
}
function W(t3, n2, l6) {
  let { x: i6, y: o5 } = n2;
  const { width: s8, height: a7 } = l6;
  if (0 === i6 && 0 === o5 && a7 === t3.height && s8 === t3.width) return t3;
  const { width: h5, height: f5 } = t3, c6 = Math.max(0, o5), u6 = Math.max(0, i6), p5 = Math.min(i6 + s8, h5), x3 = Math.min(o5 + a7, f5);
  if (p5 < 0 || x3 < 0 || !r3(t3)) return null;
  i6 = Math.max(0, -i6), o5 = Math.max(0, -o5);
  const { pixels: m5 } = t3, d5 = s8 * a7, g5 = m5.length, y4 = [];
  for (let r5 = 0; r5 < g5; r5++) {
    const n3 = m5[r5], l7 = c2.createEmptyBand(t3.pixelType, d5);
    for (let t4 = c6; t4 < x3; t4++) {
      const e2 = t4 * h5;
      let r6 = (t4 + o5 - c6) * s8 + i6;
      for (let t5 = u6; t5 < p5; t5++) l7[r6++] = n3[e2 + t5];
    }
    y4.push(l7);
  }
  const w4 = new Uint8Array(d5), k3 = t3.mask;
  for (let e2 = c6; e2 < x3; e2++) {
    const t4 = e2 * h5;
    let n3 = (e2 + o5 - c6) * s8 + i6;
    for (let e3 = u6; e3 < p5; e3++) w4[n3++] = k3 ? k3[t4 + e3] : 1;
  }
  const M3 = new c2({ width: l6.width, height: l6.height, pixelType: t3.pixelType, pixels: y4, mask: w4 });
  return M3.updateStatistics(), M3;
}
function E(t3, n2 = true) {
  if (!r3(t3)) return null;
  const { pixels: l6, width: i6, height: o5, mask: s8, pixelType: a7 } = t3, h5 = [], f5 = Math.round(i6 / 2), c6 = Math.round(o5 / 2), u6 = o5 - 1, p5 = i6 - 1;
  for (let r5 = 0; r5 < l6.length; r5++) {
    const t4 = l6[r5], s9 = c2.createEmptyBand(a7, f5 * c6);
    let x4 = 0;
    for (let e2 = 0; e2 < o5; e2 += 2) for (let l7 = 0; l7 < i6; l7 += 2) {
      const o6 = t4[e2 * i6 + l7];
      if (n2) {
        const n3 = l7 === p5 ? o6 : t4[e2 * i6 + l7 + 1], r6 = e2 === u6 ? o6 : t4[e2 * i6 + l7 + i6], a8 = l7 === p5 ? r6 : e2 === u6 ? n3 : t4[e2 * i6 + l7 + i6 + 1];
        s9[x4++] = (o6 + n3 + r6 + a8) / 4;
      } else s9[x4++] = o6;
    }
    h5.push(s9);
  }
  let x3 = null;
  if (null != s8) {
    x3 = new Uint8Array(f5 * c6);
    let t4 = 0;
    for (let e2 = 0; e2 < o5; e2 += 2) for (let l7 = 0; l7 < i6; l7 += 2) {
      const o6 = s8[e2 * i6 + l7];
      if (n2) {
        const n3 = l7 === p5 ? o6 : s8[e2 * i6 + l7 + 1], r5 = e2 === u6 ? o6 : s8[e2 * i6 + l7 + i6], a8 = l7 === p5 ? r5 : e2 === u6 ? n3 : s8[e2 * i6 + l7 + i6 + 1];
        x3[t4++] = o6 * n3 * r5 * a8 ? 1 : 0;
      } else x3[t4++] = o6;
    }
  }
  return new c2({ width: f5, height: c6, pixelType: a7, pixels: h5, mask: x3 });
}
function I(t3, e2, n2 = 0, l6 = true) {
  if (!r3(t3)) return null;
  const { width: i6, height: o5 } = e2;
  let { width: s8, height: a7 } = t3;
  const h5 = /* @__PURE__ */ new Map(), f5 = { x: 0, y: 0 }, c6 = 1 + n2;
  let u6 = t3;
  for (let r5 = 0; r5 < c6; r5++) {
    const t4 = Math.ceil(s8 / i6), n3 = Math.ceil(a7 / o5);
    for (let l7 = 0; l7 < n3; l7++) {
      f5.y = l7 * o5;
      for (let n4 = 0; n4 < t4; n4++) {
        f5.x = n4 * i6;
        const t5 = W(u6, f5, e2);
        h5.set(`${r5}/${l7}/${n4}`, t5);
      }
    }
    r5 < c6 - 1 && (u6 = E(u6, l6)), s8 = Math.round(s8 / 2), a7 = Math.round(a7 / 2);
  }
  return h5;
}
function R(t3) {
  const { pixelBlock: e2, tileSize: n2, level: l6, row: i6, col: o5, useBilinear: s8 } = t3;
  if (!r3(e2)) return null;
  const { width: a7, height: h5 } = n2, f5 = 2 ** l6, c6 = f5 * a7, u6 = f5 * h5;
  let p5 = W(e2, { y: i6 * u6, x: o5 * c6 }, { width: c6, height: u6 });
  if (!p5) return null;
  for (let r5 = l6; r5 > 0; r5--) p5 = E(p5, s8);
  return p5;
}
function F(t3, e2, n2, l6, i6 = 0) {
  const { width: o5, height: r5 } = t3, { width: s8, height: a7 } = e2, h5 = l6.cols, f5 = l6.rows, c6 = Math.ceil(s8 / h5 - 0.1 / h5), u6 = Math.ceil(a7 / f5 - 0.1 / f5);
  let p5, x3, m5, d5, g5, y4, w4;
  const k3 = c6 * h5, M3 = k3 * u6 * f5, A3 = new Float32Array(M3), U3 = new Float32Array(M3), b4 = new Uint32Array(M3), T2 = new Uint32Array(M3);
  let v3, B2, S3 = 0;
  for (let C2 = 0; C2 < u6; C2++) for (let t4 = 0; t4 < c6; t4++) {
    p5 = 12 * (C2 * c6 + t4), x3 = n2[p5], m5 = n2[p5 + 1], d5 = n2[p5 + 2], g5 = n2[p5 + 3], y4 = n2[p5 + 4], w4 = n2[p5 + 5];
    for (let e3 = 0; e3 < f5; e3++) {
      S3 = (C2 * f5 + e3) * k3 + t4 * h5, B2 = (e3 + 0.5) / f5;
      for (let t5 = 0; t5 < e3; t5++) v3 = (t5 + 0.5) / h5, A3[S3 + t5] = (x3 * v3 + m5 * B2 + d5) * o5 + i6, U3[S3 + t5] = (g5 * v3 + y4 * B2 + w4) * r5 + i6, b4[S3 + t5] = Math.floor(A3[S3 + t5]), T2[S3 + t5] = Math.floor(U3[S3 + t5]);
    }
    p5 += 6, x3 = n2[p5], m5 = n2[p5 + 1], d5 = n2[p5 + 2], g5 = n2[p5 + 3], y4 = n2[p5 + 4], w4 = n2[p5 + 5];
    for (let e3 = 0; e3 < f5; e3++) {
      S3 = (C2 * f5 + e3) * k3 + t4 * h5, B2 = (e3 + 0.5) / f5;
      for (let t5 = e3; t5 < h5; t5++) v3 = (t5 + 0.5) / h5, A3[S3 + t5] = (x3 * v3 + m5 * B2 + d5) * o5 + i6, U3[S3 + t5] = (g5 * v3 + y4 * B2 + w4) * r5 + i6, b4[S3 + t5] = Math.floor(A3[S3 + t5]), T2[S3 + t5] = Math.floor(U3[S3 + t5]);
    }
  }
  return { offsets_x: A3, offsets_y: U3, offsets_xi: b4, offsets_yi: T2, gridWidth: k3 };
}
function j(t3, e2) {
  const { coefficients: n2, spacing: l6 } = e2, { offsets_x: i6, offsets_y: o5, gridWidth: r5 } = F(t3, t3, n2, { rows: l6[0], cols: l6[1] }), { width: s8, height: a7 } = t3, h5 = new Float32Array(s8 * a7), f5 = 180 / Math.PI;
  for (let c6 = 0; c6 < a7; c6++) for (let t4 = 0; t4 < s8; t4++) {
    const e3 = c6 * r5 + t4, n3 = 0 === c6 ? e3 : e3 - r5, l7 = c6 === a7 - 1 ? e3 : e3 + r5, u6 = i6[n3] - i6[l7], p5 = o5[l7] - o5[n3];
    if (isNaN(u6) || isNaN(p5)) h5[c6 * s8 + t4] = 90;
    else {
      let e4 = Math.atan2(p5, u6) * f5;
      e4 = (360 + e4) % 360, h5[c6 * s8 + t4] = e4;
    }
  }
  return h5;
}
function D(t3, n2, l6, i6, o5 = "nearest") {
  if (!r3(t3)) return null;
  "majority" === o5 && (t3 = S(t3));
  const { pixels: s8, mask: a7, bandMasks: h5, pixelType: f5 } = t3, c6 = t3.width, u6 = t3.height, p5 = c2.getPixelArrayConstructor(f5), x3 = s8.length, { width: m5, height: d5 } = n2;
  let g5 = false;
  for (let e2 = 0; e2 < l6.length; e2 += 3) -1 === l6[e2] && -1 === l6[e2 + 1] && -1 === l6[e2 + 2] && (g5 = true);
  const { offsets_x: y4, offsets_y: w4, offsets_xi: k3, offsets_yi: M3, gridWidth: A3 } = F({ width: c6, height: u6 }, n2, l6, i6, "majority" === o5 ? 0.5 : 0);
  let U3;
  const b4 = (t4, e2, n3, l7) => {
    const i7 = t4 instanceof Float32Array || t4 instanceof Float64Array ? 0 : 0.5;
    for (let o6 = 0; o6 < d5; o6++) {
      U3 = o6 * A3;
      for (let r5 = 0; r5 < m5; r5++) {
        if (y4[U3] < 0 || w4[U3] < 0) t4[o6 * m5 + r5] = 0;
        else if (l7) t4[o6 * m5 + r5] = e2[k3[U3] + M3[U3] * c6];
        else {
          const l8 = Math.floor(y4[U3]), s9 = Math.floor(w4[U3]), a8 = Math.ceil(y4[U3]), h6 = Math.ceil(w4[U3]), f6 = y4[U3] - l8, u7 = w4[U3] - s9;
          if (!n3 || n3[l8 + s9 * c6] && n3[a8 + s9 * c6] && n3[l8 + h6 * c6] && n3[a8 + h6 * c6]) {
            const n4 = (1 - f6) * e2[l8 + s9 * c6] + f6 * e2[a8 + s9 * c6], p6 = (1 - f6) * e2[l8 + h6 * c6] + f6 * e2[a8 + h6 * c6];
            t4[o6 * m5 + r5] = (1 - u7) * n4 + u7 * p6 + i7;
          } else t4[o6 * m5 + r5] = e2[k3[U3] + M3[U3] * c6];
        }
        U3++;
      }
    }
  }, T2 = [];
  let v3;
  const B2 = h5?.length === x3, C2 = [];
  for (let e2 = 0; e2 < x3; e2++) {
    if (B2) {
      const t4 = new Uint8Array(m5 * d5);
      b4(t4, h5[e2], h5[e2], true), C2.push(t4);
    }
    v3 = new p5(m5 * d5), b4(v3, s8[e2], B2 ? h5[e2] : a7, "nearest" === o5 || "majority" === o5), T2.push(v3);
  }
  const P3 = new c2({ width: m5, height: d5, pixelType: f5, pixels: T2, bandMasks: B2 ? C2 : void 0 });
  if (null != a7) P3.mask = new Uint8Array(m5 * d5), b4(P3.mask, a7, a7, true);
  else if (g5) {
    P3.mask = new Uint8Array(m5 * d5);
    for (let t4 = 0; t4 < m5 * d5; t4++) P3.mask[t4] = y4[t4] < 0 || w4[t4] < 0 ? 0 : 1;
  }
  return P3.updateStatistics(), P3;
}

// node_modules/@arcgis/core/layers/support/rasterFunctions/vectorFieldUtils.js
var r4 = /* @__PURE__ */ new Map();
r4.set("meter-per-second", 1), r4.set("kilometer-per-hour", 0.277778), r4.set("knots", 0.514444), r4.set("feet-per-second", 0.3048), r4.set("mile-per-hour", 0.44704);
var o4 = 180 / Math.PI;
var i4 = 5;
var s6 = new o({ esriMetersPerSecond: "meter-per-second", esriKilometersPerHour: "kilometer-per-hour", esriKnots: "knots", esriFeetPerSecond: "feet-per-second", esriMilesPerHour: "mile-per-hour" });
function a5(t3, e2) {
  return r4.get(t3) / r4.get(e2) || 1;
}
function h3(t3) {
  return (450 - t3) % 360;
}
function l5(t3, e2 = "geographic") {
  const [n2, r5] = t3, i6 = Math.sqrt(n2 * n2 + r5 * r5);
  let s8 = Math.atan2(r5, n2) * o4;
  return s8 = (360 + s8) % 360, "geographic" === e2 && (s8 = h3(s8)), [i6, s8];
}
function c4(t3, e2 = "geographic") {
  let n2 = t3[1];
  "geographic" === e2 && (n2 = h3(n2)), n2 %= 360;
  const r5 = t3[0];
  return [r5 * Math.cos(n2 / o4), r5 * Math.sin(n2 / o4)];
}
function u4(t3, e2, r5, o5 = "geographic") {
  if (!r3(t3) || null == r5) return t3;
  const i6 = "vector-magdir" === e2 ? t3.clone() : f3(t3, e2), s8 = i6.pixels[1];
  for (let n2 = 0; n2 < s8.length; n2++) s8[n2] = "geographic" === o5 ? (s8[n2] + r5[n2] + 270) % 360 : (s8[n2] + 360 - r5[n2]) % 360;
  return "vector-magdir" === e2 ? i6 : f3(i6, "vector-magdir");
}
function f3(t3, r5, o5 = "geographic", i6 = 1) {
  if (!r3(t3)) return t3;
  const { pixels: s8, width: a7, height: h5 } = t3, u6 = a7 * h5, f5 = s8[0], p5 = s8[1], m5 = t3.pixelType.startsWith("f") ? t3.pixelType : "f32", d5 = c2.createEmptyBand(m5, u6), g5 = c2.createEmptyBand(m5, u6);
  let x3 = 0;
  for (let e2 = 0; e2 < h5; e2++) for (let t4 = 0; t4 < a7; t4++) "vector-uv" === r5 ? ([d5[x3], g5[x3]] = l5([f5[x3], p5[x3]], o5), d5[x3] *= i6) : ([d5[x3], g5[x3]] = c4([f5[x3], p5[x3]], o5), d5[x3] *= i6, g5[x3] *= i6), x3++;
  const M3 = new c2({ pixelType: m5, width: t3.width, height: t3.height, mask: t3.mask, validPixelCount: t3.validPixelCount, maskIsAlpha: t3.maskIsAlpha, pixels: [d5, g5] });
  return M3.updateStatistics(), M3;
}
function p3(t3, e2, r5 = 1) {
  if (1 === r5 || !r3(t3)) return t3;
  const o5 = t3.clone(), { pixels: i6, width: s8, height: a7 } = o5, h5 = i6[0], l6 = i6[1];
  let c6 = 0;
  for (let n2 = 0; n2 < a7; n2++) for (let t4 = 0; t4 < s8; t4++) "vector-uv" === e2 ? (h5[c6] *= r5, l6[c6] *= r5) : h5[c6] *= r5, c6++;
  return o5.updateStatistics(), o5;
}
function m3(t3, e2, n2, r5, o5) {
  if (null == o5 || !o5.spatialReference.equals(t3.spatialReference)) return { extent: t3, width: Math.round(e2 / r5), height: Math.round(n2 / r5), resolution: t3.width / e2 };
  const i6 = o5.xmin, s8 = o5.ymax, a7 = (t3.xmax - t3.xmin) / e2 * r5, h5 = (t3.ymax - t3.ymin) / n2 * r5, l6 = (a7 + h5) / 2;
  return t3.xmin = i6 + Math.floor((t3.xmin - i6) / a7) * a7, t3.xmax = i6 + Math.ceil((t3.xmax - i6) / a7) * a7, t3.ymin = s8 + Math.floor((t3.ymin - s8) / h5) * h5, t3.ymax = s8 + Math.ceil((t3.ymax - s8) / h5) * h5, { extent: t3, width: Math.round(t3.width / a7), height: Math.round(t3.height / h5), resolution: l6 };
}
var d3 = g3(0, 0, 0);
function g3(t3 = 0, e2 = 0, n2 = Math.PI, r5 = true) {
  r5 && (n2 = (2 * Math.PI - n2) % (2 * Math.PI));
  const o5 = r5 ? -1 : 1, i6 = 13 * o5, s8 = -7 * o5, a7 = -2 * o5, h5 = -16 * o5, l6 = 21.75, [c6, u6] = M2(0, e2 + i6, n2, l6), [f5, p5] = M2(t3 - 5.5, e2 + s8, n2, l6), [m5, d5] = M2(t3 + 5.5, e2 + s8, n2, l6), [g5, x3] = M2(t3 - 1.5, e2 + a7, n2, l6), [k3, w4] = M2(t3 + 1.5, e2 + a7, n2, l6), [y4, P3] = M2(t3 - 1.5, e2 + h5, n2, l6), [b4, v3] = M2(t3 + 1.5, e2 + h5, n2, l6);
  return [c6, u6, f5, p5, g5, x3, k3, w4, m5, d5, y4, P3, b4, v3];
}
function x2(t3 = 0, e2 = Math.PI, n2 = true) {
  n2 && (e2 = (2 * Math.PI - e2) % (2 * Math.PI));
  const r5 = 10, o5 = n2 ? -1 : 1, s8 = 5 * o5, a7 = 20 * o5, h5 = 25 * o5, l6 = 45, c6 = 0, u6 = 0, f5 = 2, p5 = 0, m5 = f5 * o5, d5 = n2 ? 1 : -1, g5 = r5 / 2 * d5;
  let [x3, k3] = [c6 + g5, u6 - a7], [w4, y4] = [x3 + f5 * d5, k3], [P3, b4] = [w4 - p5 * d5, y4 + m5], [v3, I3] = [c6 - g5, u6 - h5], [A3, _3] = [v3 + p5 * d5, I3 - m5], U3 = Math.ceil(t3 / i4), S3 = Math.floor(U3 / 10);
  U3 -= 8 * S3;
  const D2 = [], F2 = [];
  for (let i6 = 0; i6 < U3 / 2; i6++, S3--) {
    S3 <= 0 && U3 % 2 == 1 && i6 === (U3 - 1) / 2 && (v3 = c6, A3 = v3 + p5 * d5, I3 = (I3 + k3) / 2, _3 = I3 - m5);
    const [t4, n3] = M2(v3, I3, e2, l6);
    if (S3 > 0) {
      const [r6, o6] = M2(w4, I3, e2, l6), [i7, s9] = M2(x3, k3, e2, l6);
      D2.push(r6), D2.push(o6), D2.push(t4), D2.push(n3), D2.push(i7), D2.push(s9);
    } else {
      const [r6, o6] = M2(w4, y4, e2, l6), [i7, s9] = M2(P3, b4, e2, l6), [a8, h6] = M2(A3, _3, e2, l6);
      F2.push(t4), F2.push(n3), F2.push(a8), F2.push(h6), F2.push(i7), F2.push(s9), F2.push(r6), F2.push(o6);
    }
    I3 += s8, k3 += s8, y4 += s8, b4 += s8, _3 += s8;
  }
  const [N, j2] = M2(c6 + g5, u6 + a7, e2, l6), J = (r5 / 2 + f5) * d5, [O, q2] = M2(c6 + J, u6 + a7, e2, l6), [B2, E2] = M2(c6 + g5, u6 - h5, e2, l6), [T2, C2] = M2(c6 + J, u6 - h5, e2, l6);
  return { pennants: D2, barbs: F2, shaft: [N, j2, O, q2, B2, E2, T2, C2] };
}
function M2(t3, e2, n2, r5 = 1) {
  const o5 = Math.sqrt(t3 * t3 + e2 * e2) / r5, i6 = (2 * Math.PI + Math.atan2(e2, t3)) % (2 * Math.PI);
  return [o5, (2 * Math.PI + i6 - n2) % (2 * Math.PI)];
}
var k2 = [0, 1, 3, 6, 10, 16, 21, 27, 33, 40, 47, 55, 63];
var w2 = [0, 0.5, 1, 1.5, 2];
var y2 = [0, 0.25, 0.5, 1, 1.5, 2, 2.5, 3, 3.5, 4];
function P2(t3, e2, n2, r5) {
  const o5 = a5(r5 || "knots", n2);
  let i6;
  for (i6 = 1; i6 < e2.length; i6++) if (i6 === e2.length - 1) {
    if (t3 < e2[i6] * o5) break;
  } else if (t3 <= e2[i6] * o5) break;
  return Math.min(i6 - 1, e2.length - 2);
}
function b3(t3, e2, n2, r5, o5) {
  let i6 = 0;
  switch (e2) {
    case "beaufort_kn":
      i6 = P2(t3, k2, "knots", n2);
      break;
    case "beaufort_km":
      i6 = P2(t3, k2, "kilometer-per-hour", n2);
      break;
    case "beaufort_ft":
      i6 = P2(t3, k2, "feet-per-second", n2);
      break;
    case "beaufort_m":
      i6 = P2(t3, k2, "meter-per-second", n2);
      break;
    case "classified_arrow":
      i6 = P2(t3, o5 ?? [], r5, n2);
      break;
    case "ocean_current_m":
      i6 = P2(t3, w2, "meter-per-second", n2);
      break;
    case "ocean_current_kn":
      i6 = P2(t3, y2, "knots", n2);
  }
  return i6;
}
function v2(t3, e2) {
  const { style: n2, inputUnit: r5, outputUnit: o5, breakValues: i6 } = e2, a7 = s6.fromJSON(r5), h5 = s6.fromJSON(o5), l6 = 7 * 6, c6 = 15;
  let u6 = 0, f5 = 0;
  const { width: p5, height: m5, mask: x3 } = t3, M3 = t3.pixels[0], k3 = t3.pixels[1], w4 = null != x3 ? x3.filter(((t4) => t4 > 0)).length : p5 * m5, y4 = new Float32Array(w4 * l6), P3 = new Uint32Array(c6 * w4), v3 = e2.invertDirection ? g3(0, 0, 0, false) : d3;
  for (let s8 = 0; s8 < m5; s8++) for (let t4 = 0; t4 < p5; t4++) {
    const e3 = s8 * p5 + t4;
    if (!x3 || x3[s8 * p5 + t4]) {
      const r6 = (k3[e3] + 360) % 360 / 180 * Math.PI, o6 = b3(M3[e3], n2, a7, h5, i6);
      for (let n3 = 0; n3 < v3.length; n3 += 2) y4[u6++] = (t4 + 0.5) / p5, y4[u6++] = (s8 + 0.5) / m5, y4[u6++] = v3[n3], y4[u6++] = v3[n3 + 1] + r6, y4[u6++] = o6, y4[u6++] = M3[e3];
      const c7 = 7 * (u6 / l6 - 1);
      P3[f5++] = c7, P3[f5++] = c7 + 1, P3[f5++] = c7 + 2, P3[f5++] = c7 + 0, P3[f5++] = c7 + 4, P3[f5++] = c7 + 3, P3[f5++] = c7 + 0, P3[f5++] = c7 + 2, P3[f5++] = c7 + 3, P3[f5++] = c7 + 2, P3[f5++] = c7 + 5, P3[f5++] = c7 + 3, P3[f5++] = c7 + 5, P3[f5++] = c7 + 6, P3[f5++] = c7 + 3;
    }
  }
  return { vertexData: y4, indexData: P3 };
}
var I2 = [];
function A2(t3, e2) {
  if (0 === I2.length) for (let i6 = 0; i6 < 30; i6++) I2.push(x2(5 * i6, 0, !e2.invertDirection));
  const n2 = a5(s6.fromJSON(e2.inputUnit), "knots"), { width: r5, height: o5, mask: h5 } = t3, l6 = t3.pixels[0], c6 = t3.pixels[1], u6 = 6, f5 = [], p5 = [];
  let m5 = 0, d5 = 0;
  for (let s8 = 0; s8 < o5; s8++) for (let t4 = 0; t4 < r5; t4++) {
    const e3 = s8 * r5 + t4, a7 = l6[e3] * n2;
    if ((!h5 || h5[s8 * r5 + t4]) && a7 >= i4) {
      const n3 = (c6[e3] + 360) % 360 / 180 * Math.PI, { pennants: i6, barbs: h6, shaft: l7 } = I2[Math.min(Math.floor(a7 / 5), 29)];
      if (i6.length + h6.length === 0) continue;
      let g5 = f5.length / u6;
      const x3 = (t4 + 0.5) / r5, M3 = (s8 + 0.5) / o5;
      for (let t5 = 0; t5 < i6.length; t5 += 2) f5[m5++] = x3, f5[m5++] = M3, f5[m5++] = i6[t5], f5[m5++] = i6[t5 + 1] + n3, f5[m5++] = 0, f5[m5++] = a7;
      for (let t5 = 0; t5 < h6.length; t5 += 2) f5[m5++] = x3, f5[m5++] = M3, f5[m5++] = h6[t5], f5[m5++] = h6[t5 + 1] + n3, f5[m5++] = 0, f5[m5++] = a7;
      for (let t5 = 0; t5 < l7.length; t5 += 2) f5[m5++] = x3, f5[m5++] = M3, f5[m5++] = l7[t5], f5[m5++] = l7[t5 + 1] + n3, f5[m5++] = 0, f5[m5++] = a7;
      for (let t5 = 0; t5 < i6.length / 6; t5++) p5[d5++] = g5, p5[d5++] = g5 + 1, p5[d5++] = g5 + 2, g5 += 3;
      for (let t5 = 0; t5 < h6.length / 8; t5++) p5[d5++] = g5, p5[d5++] = g5 + 1, p5[d5++] = g5 + 2, p5[d5++] = g5 + 1, p5[d5++] = g5 + 2, p5[d5++] = g5 + 3, g5 += 4;
      p5[d5++] = g5 + 0, p5[d5++] = g5 + 1, p5[d5++] = g5 + 2, p5[d5++] = g5 + 1, p5[d5++] = g5 + 3, p5[d5++] = g5 + 2, g5 += 4;
    }
  }
  return { vertexData: new Float32Array(f5), indexData: new Uint32Array(p5) };
}
function _2(t3, e2) {
  const n2 = 4 * 6;
  let r5 = 0, o5 = 0;
  const { width: h5, height: l6, mask: c6 } = t3, u6 = t3.pixels[0], f5 = [], p5 = [], m5 = a5(s6.fromJSON(e2.inputUnit), "knots"), d5 = "wind_speed" === e2.style ? i4 : Number.MAX_VALUE;
  for (let i6 = 0; i6 < l6; i6++) for (let t4 = 0; t4 < h5; t4++) {
    const e3 = u6[i6 * h5 + t4] * m5;
    if ((!c6 || c6[i6 * h5 + t4]) && e3 < d5) {
      for (let n3 = 0; n3 < 4; n3++) f5[r5++] = (t4 + 0.5) / h5, f5[r5++] = (i6 + 0.5) / l6, f5[r5++] = n3 < 2 ? -0.5 : 0.5, f5[r5++] = n3 % 2 == 0 ? -0.5 : 0.5, f5[r5++] = 0, f5[r5++] = e3;
      const s8 = 4 * (r5 / n2 - 1);
      p5[o5++] = s8, p5[o5++] = s8 + 1, p5[o5++] = s8 + 2, p5[o5++] = s8 + 1, p5[o5++] = s8 + 2, p5[o5++] = s8 + 3;
    }
  }
  return { vertexData: new Float32Array(f5), indexData: new Uint32Array(p5) };
}
function U2(t3, e2) {
  return "simple_scalar" === e2.style ? _2(t3, e2) : "wind_speed" === e2.style ? A2(t3, e2) : v2(t3, e2);
}
function S2(t3, n2, r5, o5 = [0, 0], i6 = 0.5) {
  const { width: s8, height: a7, mask: h5 } = t3, [u6, f5] = t3.pixels, [p5, m5] = o5, d5 = Math.round((s8 - p5) / r5), g5 = Math.round((a7 - m5) / r5), x3 = d5 * g5, M3 = new Float32Array(x3), k3 = new Float32Array(x3), w4 = new Uint8Array(x3), y4 = "vector-uv" === n2;
  for (let e2 = 0; e2 < g5; e2++) for (let t4 = 0; t4 < d5; t4++) {
    let n3 = 0;
    const o6 = e2 * d5 + t4, g6 = Math.max(0, e2 * r5 + m5), x4 = Math.max(0, t4 * r5 + p5), P4 = Math.min(a7, g6 + r5), b4 = Math.min(s8, x4 + r5);
    for (let t5 = g6; t5 < P4; t5++) for (let e3 = x4; e3 < b4; e3++) {
      const r6 = t5 * s8 + e3;
      if (!h5 || h5[r6]) {
        n3++;
        const t6 = y4 ? [u6[r6], f5[r6]] : [u6[r6], (360 + f5[r6]) % 360], [e4, i7] = y4 ? t6 : c4(t6);
        M3[o6] += e4, k3[o6] += i7;
      }
    }
    if (n3 >= (P4 - g6) * (b4 - x4) * (1 - i6)) {
      w4[o6] = 1;
      const [t5, e3] = l5([M3[o6] / n3, k3[o6] / n3]);
      M3[o6] = t5, k3[o6] = e3;
    } else w4[o6] = 0, M3[o6] = 0, k3[o6] = 0;
  }
  const P3 = new c2({ width: d5, height: g5, pixels: [M3, k3], mask: w4 });
  return P3.updateStatistics(), P3;
}

// node_modules/@arcgis/core/views/2d/engine/flow/dataUtils.js
var i5 = () => i.getLogger("esri.views.2d.engine.flow.dataUtils");
var a6 = 10;
async function s7(t3, e2, r5, o5) {
  const l6 = performance.now(), s8 = c5(e2, r5), f5 = performance.now(), h5 = u5(e2, s8, r5.width, r5.height), p5 = performance.now(), g5 = m4(h5, true), y4 = performance.now(), x3 = "Streamlines" === t3 ? d4(g5, a6) : w3(g5), M3 = performance.now();
  return has("esri-2d-profiler") && (i5().info("I.1", "_createFlowFieldFromData (ms)", Math.round(f5 - l6)), i5().info("I.2", "_getStreamlines (ms)", Math.round(p5 - f5)), i5().info("I.3", "createAnimatedLinesData (ms)", Math.round(y4 - p5)), i5().info("I.4", "create{Streamlines|Particles}Mesh (ms)", Math.round(M3 - y4)), i5().info("I.5", "createFlowMesh (ms)", Math.round(M3 - l6)), i5().info("I.6", "Mesh size (bytes)", x3.vertexData.buffer.byteLength + x3.indexData.buffer.byteLength)), await Promise.resolve(), s2(o5), x3;
}
function c5(t3, e2) {
  const n2 = h4(e2.data, e2.width, e2.height, t3.smoothing);
  if (t3.interpolate) {
    return (t4, r5) => {
      const o5 = Math.floor(t4), l6 = Math.floor(r5);
      if (o5 < 0 || o5 >= e2.width) return [0, 0];
      if (l6 < 0 || l6 >= e2.height) return [0, 0];
      const i6 = t4 - o5, a7 = r5 - l6, s8 = o5, c6 = l6, f5 = o5 < e2.width - 1 ? o5 + 1 : o5, u6 = l6 < e2.height - 1 ? l6 + 1 : l6, h5 = n2[2 * (c6 * e2.width + s8)], m5 = n2[2 * (c6 * e2.width + f5)], d5 = n2[2 * (u6 * e2.width + s8)], w4 = n2[2 * (u6 * e2.width + f5)], p5 = n2[2 * (c6 * e2.width + s8) + 1], g5 = n2[2 * (c6 * e2.width + f5) + 1];
      return [(h5 * (1 - a7) + d5 * a7) * (1 - i6) + (m5 * (1 - a7) + w4 * a7) * i6, (p5 * (1 - a7) + n2[2 * (u6 * e2.width + s8) + 1] * a7) * (1 - i6) + (g5 * (1 - a7) + n2[2 * (u6 * e2.width + f5) + 1] * a7) * i6];
    };
  }
  return (t4, r5) => {
    const o5 = Math.round(t4), l6 = Math.round(r5);
    return o5 < 0 || o5 >= e2.width || l6 < 0 || l6 >= e2.height ? [0, 0] : [n2[2 * (l6 * e2.width + o5)], n2[2 * (l6 * e2.width + o5) + 1]];
  };
}
function f4(t3, e2, n2, r5, o5, l6, i6, a7, s8) {
  const c6 = [];
  let f5 = n2, u6 = r5, h5 = 0, [m5, d5] = e2(f5, u6);
  m5 *= t3.velocityScale, d5 *= t3.velocityScale;
  const w4 = Math.sqrt(m5 * m5 + d5 * d5);
  let p5, g5;
  c6.push({ x: f5, y: u6, t: h5, speed: w4 });
  for (let y4 = 0; y4 < t3.verticesPerLine; y4++) {
    let [n3, r6] = e2(f5, u6);
    n3 *= t3.velocityScale, r6 *= t3.velocityScale;
    const m6 = Math.sqrt(n3 * n3 + r6 * r6);
    if (m6 < t3.minSpeedThreshold) return c6;
    const d6 = n3 / m6, w5 = r6 / m6;
    f5 += d6 * t3.segmentLength, u6 += w5 * t3.segmentLength;
    if (h5 += t3.segmentLength / m6, Math.acos(d6 * p5 + w5 * g5) > t3.maxTurnAngle) return c6;
    if (t3.collisions) {
      const t4 = Math.round(f5 * s8), e3 = Math.round(u6 * s8);
      if (t4 < 0 || t4 > i6 - 1 || e3 < 0 || e3 > a7 - 1) return c6;
      const n4 = l6[e3 * i6 + t4];
      if (-1 !== n4 && n4 !== o5) return c6;
      l6[e3 * i6 + t4] = o5;
    }
    c6.push({ x: f5, y: u6, t: h5, speed: m6 }), p5 = d6, g5 = w5;
  }
  return c6;
}
function u5(t3, e2, n2, o5) {
  const l6 = [], i6 = new t(), a7 = 1 / Math.max(t3.lineCollisionWidth, 1), s8 = Math.round(n2 * a7), c6 = Math.round(o5 * a7), u6 = new Int32Array(s8 * c6);
  for (let r5 = 0; r5 < u6.length; r5++) u6[r5] = -1;
  const h5 = [];
  for (let r5 = 0; r5 < o5; r5 += t3.lineSpacing) for (let e3 = 0; e3 < n2; e3 += t3.lineSpacing) h5.push({ x: e3, y: r5, sort: i6.getFloat() });
  h5.sort(((t4, e3) => t4.sort - e3.sort));
  for (const { x: r5, y: m5 } of h5) if (i6.getFloat() < t3.density) {
    const n3 = f4(t3, e2, r5, m5, l6.length, u6, s8, c6, a7);
    if (n3.length < 2) continue;
    l6.push(n3);
  }
  return l6;
}
function h4(t3, e2, n2, r5) {
  if (0 === r5) return t3;
  const o5 = Math.round(3 * r5), l6 = new Array(2 * o5 + 1);
  let i6 = 0;
  for (let c6 = -o5; c6 <= o5; c6++) {
    const t4 = Math.exp(-c6 * c6 / (r5 * r5));
    l6[c6 + o5] = t4, i6 += t4;
  }
  for (let c6 = -o5; c6 <= o5; c6++) l6[c6 + o5] /= i6;
  const a7 = new Float32Array(t3.length);
  for (let c6 = 0; c6 < n2; c6++) for (let n3 = 0; n3 < e2; n3++) {
    let r6 = 0, i7 = 0;
    for (let a8 = -o5; a8 <= o5; a8++) {
      if (n3 + a8 < 0 || n3 + a8 >= e2) continue;
      const s9 = l6[a8 + o5];
      r6 += s9 * t3[2 * (c6 * e2 + (n3 + a8))], i7 += s9 * t3[2 * (c6 * e2 + (n3 + a8)) + 1];
    }
    a7[2 * (c6 * e2 + n3)] = r6, a7[2 * (c6 * e2 + n3) + 1] = i7;
  }
  const s8 = new Float32Array(t3.length);
  for (let c6 = 0; c6 < e2; c6++) for (let t4 = 0; t4 < n2; t4++) {
    let r6 = 0, i7 = 0;
    for (let s9 = -o5; s9 <= o5; s9++) {
      if (t4 + s9 < 0 || t4 + s9 >= n2) continue;
      const f5 = l6[s9 + o5];
      r6 += f5 * a7[2 * ((t4 + s9) * e2 + c6)], i7 += f5 * a7[2 * ((t4 + s9) * e2 + c6) + 1];
    }
    s8[2 * (t4 * e2 + c6)] = r6, s8[2 * (t4 * e2 + c6) + 1] = i7;
  }
  return s8;
}
function m4(t3, e2) {
  const n2 = new t(), o5 = t3.reduce(((t4, e3) => t4 + e3.length), 0), l6 = new Float32Array(4 * o5), i6 = new Array(t3.length);
  let a7 = 0, s8 = 0;
  for (const r5 of t3) {
    const t4 = a7;
    for (const e3 of r5) l6[4 * a7] = e3.x, l6[4 * a7 + 1] = e3.y, l6[4 * a7 + 2] = e3.t, l6[4 * a7 + 3] = e3.speed, a7++;
    i6[s8++] = { startVertex: t4, numberOfVertices: r5.length, totalTime: r5[r5.length - 1].t, timeSeed: e2 ? n2.getFloat() : 0 };
  }
  return { lineVertices: l6, lineDescriptors: i6 };
}
function d4(t3, e2) {
  const n2 = 9, { lineVertices: r5, lineDescriptors: o5 } = t3;
  let l6 = 0, i6 = 0;
  for (const m5 of o5) {
    l6 += 2 * m5.numberOfVertices;
    i6 += 6 * (m5.numberOfVertices - 1);
  }
  const a7 = new Float32Array(l6 * n2), s8 = new Uint32Array(i6);
  let c6 = 0, f5 = 0;
  function u6() {
    s8[f5++] = c6 - 2, s8[f5++] = c6, s8[f5++] = c6 - 1, s8[f5++] = c6, s8[f5++] = c6 + 1, s8[f5++] = c6 - 1;
  }
  function h5(t4, e3, r6, o6, l7, i7, s9, f6) {
    const u7 = c6 * n2;
    let h6 = 0;
    a7[u7 + h6++] = t4, a7[u7 + h6++] = e3, a7[u7 + h6++] = 1, a7[u7 + h6++] = r6, a7[u7 + h6++] = i7, a7[u7 + h6++] = s9, a7[u7 + h6++] = o6 / 2, a7[u7 + h6++] = l7 / 2, a7[u7 + h6++] = f6, c6++, a7[u7 + h6++] = t4, a7[u7 + h6++] = e3, a7[u7 + h6++] = -1, a7[u7 + h6++] = r6, a7[u7 + h6++] = i7, a7[u7 + h6++] = s9, a7[u7 + h6++] = -o6 / 2, a7[u7 + h6++] = -l7 / 2, a7[u7 + h6++] = f6, c6++;
  }
  for (const m5 of o5) {
    const { totalTime: t4, timeSeed: n3 } = m5;
    let o6 = null, l7 = null, i7 = null, a8 = null, s9 = null, c7 = null;
    for (let f6 = 0; f6 < m5.numberOfVertices; f6++) {
      const d5 = r5[4 * (m5.startVertex + f6)], w4 = r5[4 * (m5.startVertex + f6) + 1], p5 = r5[4 * (m5.startVertex + f6) + 2], g5 = r5[4 * (m5.startVertex + f6) + 3];
      let y4 = null, x3 = null, M3 = null, A3 = null;
      if (f6 > 0) {
        y4 = d5 - o6, x3 = w4 - l7;
        const r6 = Math.sqrt(y4 * y4 + x3 * x3);
        if (y4 /= r6, x3 /= r6, f6 > 1) {
          let t5 = y4 + s9, n4 = x3 + c7;
          const r7 = Math.sqrt(t5 * t5 + n4 * n4);
          t5 /= r7, n4 /= r7;
          const o7 = Math.min(1 / (t5 * y4 + n4 * x3), e2);
          t5 *= o7, n4 *= o7, M3 = -n4, A3 = t5;
        } else M3 = -x3, A3 = y4;
        null !== M3 && null !== A3 && (h5(o6, l7, i7, M3, A3, t4, n3, g5), u6());
      }
      o6 = d5, l7 = w4, i7 = p5, s9 = y4, c7 = x3, a8 = g5;
    }
    h5(o6, l7, i7, -c7, s9, t4, n3, a8);
  }
  return { vertexData: a7, indexData: s8 };
}
function w3(t3) {
  const e2 = 16, n2 = 1, r5 = 2, { lineVertices: o5, lineDescriptors: l6 } = t3;
  let i6 = 0, a7 = 0;
  for (const U3 of l6) {
    const t4 = U3.numberOfVertices - 1;
    i6 += 4 * t4 * 2, a7 += 6 * t4 * 2;
  }
  const s8 = new Float32Array(i6 * e2), c6 = new Uint32Array(a7);
  let f5, u6, h5, m5, d5, w4, p5, g5, y4, x3, M3, A3, I3, V, F2 = 0, v3 = 0;
  function D2() {
    c6[v3++] = F2 - 8, c6[v3++] = F2 - 7, c6[v3++] = F2 - 6, c6[v3++] = F2 - 7, c6[v3++] = F2 - 5, c6[v3++] = F2 - 6, c6[v3++] = F2 - 4, c6[v3++] = F2 - 3, c6[v3++] = F2 - 2, c6[v3++] = F2 - 3, c6[v3++] = F2 - 1, c6[v3++] = F2 - 2;
  }
  function b4(t4, o6, l7, i7, a8, c7, f6, u7, h6, m6, d6, w5, p6, g6) {
    const y5 = F2 * e2;
    let x4 = 0;
    for (const e3 of [n2, r5]) for (const n3 of [1, 2, 3, 4]) s8[y5 + x4++] = t4, s8[y5 + x4++] = o6, s8[y5 + x4++] = l7, s8[y5 + x4++] = i7, s8[y5 + x4++] = f6, s8[y5 + x4++] = u7, s8[y5 + x4++] = h6, s8[y5 + x4++] = m6, s8[y5 + x4++] = e3, s8[y5 + x4++] = n3, s8[y5 + x4++] = p6, s8[y5 + x4++] = g6, s8[y5 + x4++] = a8 / 2, s8[y5 + x4++] = c7 / 2, s8[y5 + x4++] = d6 / 2, s8[y5 + x4++] = w5 / 2, F2++;
  }
  function S3(t4, e3) {
    let n3 = y4 + M3, r6 = x3 + A3;
    const o6 = Math.sqrt(n3 * n3 + r6 * r6);
    n3 /= o6, r6 /= o6;
    const l7 = y4 * n3 + x3 * r6;
    n3 /= l7, r6 /= l7;
    let i7 = M3 + I3, a8 = A3 + V;
    const s9 = Math.sqrt(i7 * i7 + a8 * a8);
    i7 /= s9, a8 /= s9;
    const c7 = M3 * i7 + A3 * a8;
    i7 /= c7, a8 /= c7, b4(f5, u6, h5, m5, -r6, n3, d5, w4, p5, g5, -a8, i7, t4, e3), D2();
  }
  function k3(t4, e3, n3, r6, o6, l7) {
    if (y4 = M3, x3 = A3, M3 = I3, A3 = V, null == y4 && null == x3 && (y4 = M3, x3 = A3), null != d5 && null != w4) {
      I3 = t4 - d5, V = e3 - w4;
      const n4 = Math.sqrt(I3 * I3 + V * V);
      I3 /= n4, V /= n4;
    }
    null != y4 && null != x3 && S3(o6, l7), f5 = d5, u6 = w4, h5 = p5, m5 = g5, d5 = t4, w4 = e3, p5 = n3, g5 = r6;
  }
  function L(t4, e3) {
    y4 = M3, x3 = A3, M3 = I3, A3 = V, null == y4 && null == x3 && (y4 = M3, x3 = A3), null != y4 && null != x3 && S3(t4, e3);
  }
  for (const U3 of l6) {
    f5 = null, u6 = null, h5 = null, m5 = null, d5 = null, w4 = null, p5 = null, g5 = null, y4 = null, x3 = null, M3 = null, A3 = null, I3 = null, V = null;
    const { totalTime: t4, timeSeed: e3 } = U3;
    for (let n3 = 0; n3 < U3.numberOfVertices; n3++) {
      k3(o5[4 * (U3.startVertex + n3)], o5[4 * (U3.startVertex + n3) + 1], o5[4 * (U3.startVertex + n3) + 2], o5[4 * (U3.startVertex + n3) + 3], t4, e3);
    }
    L(t4, e3);
  }
  return { vertexData: s8, indexData: c6 };
}
function p4(t3, n2) {
  const r5 = n2.pixels, { width: o5, height: l6 } = n2, i6 = new Float32Array(o5 * l6 * 2), a7 = n2.mask || new Uint8Array(o5 * l6 * 2);
  if (n2.mask || a7.fill(255), "vector-uv" === t3) for (let e2 = 0; e2 < o5 * l6; e2++) i6[2 * e2] = r5[0][e2], i6[2 * e2 + 1] = -r5[1][e2];
  else if ("vector-magdir" === t3) for (let s8 = 0; s8 < o5 * l6; s8++) {
    const t4 = r5[0][s8], n3 = s4(r5[1][s8]), o6 = Math.cos(n3 - Math.PI / 2), l7 = Math.sin(n3 - Math.PI / 2);
    i6[2 * s8] = o6 * t4, i6[2 * s8 + 1] = l7 * t4;
  }
  return { data: i6, mask: a7, width: o5, height: l6 };
}
async function g4(t3, e2, n2, r5, a7, s8) {
  const c6 = performance.now(), f5 = d(e2.spatialReference);
  if (!f5) {
    const o5 = await y3(t3, e2, n2, r5, a7, s8);
    return has("esri-2d-profiler") && i5().info("I.7", "loadImagery, early exit (ms)", Math.round(performance.now() - c6)), has("esri-2d-profiler") && i5().info("I.9", "Number of parts", 1), o5;
  }
  const [u6, h5] = f5.valid, m5 = h5 - u6, d5 = Math.ceil(e2.width / m5), w4 = e2.width / d5, p5 = Math.round(n2 / d5);
  let g5 = e2.xmin;
  const x3 = [], M3 = performance.now();
  for (let l6 = 0; l6 < d5; l6++) {
    const n3 = new z({ xmin: g5, xmax: g5 + w4, ymin: e2.ymin, ymax: e2.ymax, spatialReference: e2.spatialReference });
    x3.push(y3(t3, n3, p5, r5, a7, s8)), g5 += w4;
  }
  const A3 = await Promise.all(x3);
  has("esri-2d-profiler") && i5().info("I.8", "All calls to _fetchPart (ms)", Math.round(performance.now() - M3)), has("esri-2d-profiler") && i5().info("I.9", "Number of parts", A3.length);
  const I3 = { data: new Float32Array(n2 * r5 * 2), mask: new Uint8Array(n2 * r5), width: n2, height: r5 };
  let V = 0;
  for (const o5 of A3) {
    for (let t4 = 0; t4 < o5.height; t4++) for (let e3 = 0; e3 < o5.width; e3++) V + e3 >= n2 || (I3.data[2 * (t4 * n2 + V + e3)] = o5.data[2 * (t4 * o5.width + e3)], I3.data[2 * (t4 * n2 + V + e3) + 1] = o5.data[2 * (t4 * o5.width + e3) + 1], I3.mask[t4 * n2 + V + e3] = o5.mask[t4 * o5.width + e3]);
    V += o5.width;
  }
  return has("esri-2d-profiler") && i5().info("I.10", "loadImagery, general exit (ms)", Math.round(performance.now() - c6)), I3;
}
async function y3(t3, e2, n2, r5, o5, l6) {
  const i6 = { requestProjectedLocalDirections: true, signal: l6 };
  if (null != o5 && (i6.timeExtent = o5), "imagery" === t3.type) {
    await t3.load({ signal: l6 });
    const o6 = await t3.internalFetchImage(e2, n2, r5, i6);
    if (null == o6?.pixelData?.pixelBlock) return { data: new Float32Array(n2 * r5 * 2), mask: new Uint8Array(n2 * r5), width: n2, height: r5 };
    return p4(t3.rasterInfo.dataType, o6.pixelData.pixelBlock);
  }
  await t3.load({ signal: l6 });
  const a7 = await t3.fetchPixels(e2, n2, r5, i6);
  if (null == a7?.pixelBlock) return { data: new Float32Array(n2 * r5 * 2), mask: new Uint8Array(n2 * r5), width: n2, height: r5 };
  return p4(t3.serviceRasterInfo.dataType, a7.pixelBlock);
}

export {
  l2 as l,
  u,
  l3 as l2,
  i2 as i,
  r2 as r,
  c,
  f,
  g,
  c2,
  l4 as l3,
  i3 as i2,
  o3 as o,
  r3 as r2,
  a4 as a,
  h2 as h,
  f2,
  c3,
  u3 as u2,
  p2 as p,
  x,
  m2 as m,
  w,
  k,
  M,
  U,
  T,
  B,
  W,
  I,
  R,
  j,
  D,
  s6 as s,
  a5 as a2,
  l5 as l4,
  u4 as u3,
  f3,
  p3 as p2,
  m3 as m2,
  _2 as _,
  U2,
  S2 as S,
  s7 as s2,
  g4 as g2
};
//# sourceMappingURL=chunk-VYNLVHME.js.map
