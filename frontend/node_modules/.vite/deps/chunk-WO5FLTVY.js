import {
  c,
  m as m2
} from "./chunk-MGA7XBRB.js";
import {
  l
} from "./chunk-XNUSHDFN.js";
import {
  o as o2
} from "./chunk-4AKMPOG7.js";
import {
  r as r3
} from "./chunk-APMQAZ5Z.js";
import {
  r as r2
} from "./chunk-CL7VLXUR.js";
import {
  m2 as m
} from "./chunk-2ZPU5IZX.js";
import {
  a2 as a3
} from "./chunk-S62CSPIH.js";
import {
  a as a2
} from "./chunk-X26VPODZ.js";
import {
  o
} from "./chunk-XNYPRDKK.js";
import {
  r
} from "./chunk-Y4BWIIWH.js";
import {
  a
} from "./chunk-TJPLHZCD.js";

// node_modules/@arcgis/core/symbols/MarkerSymbol.js
var i = class extends c {
  constructor(e) {
    super(e), this.angle = 0, this.type = null, this.xoffset = 0, this.yoffset = 0, this.size = 9;
  }
  hash() {
    return `${this.type}.${this.angle}.${this.size}.${this.xoffset}.${this.yoffset}`;
  }
};
r([m({ type: Number, json: { read: (e) => e && -1 * e, write: (e, t) => t.angle = e && -1 * e } })], i.prototype, "angle", void 0), r([m({ type: ["simple-marker", "picture-marker"], readOnly: true })], i.prototype, "type", void 0), r([m({ type: Number, cast: o2, json: { write: true } })], i.prototype, "xoffset", void 0), r([m({ type: Number, cast: o2, json: { write: true } })], i.prototype, "yoffset", void 0), r([m({ cast: (e) => "auto" === e ? e : a2(o2(e)), json: { write: true } })], i.prototype, "size", void 0), i = r([a3("esri.symbols.MarkerSymbol")], i);

// node_modules/@arcgis/core/symbols/SimpleMarkerSymbol.js
var h;
var m3 = new o({ esriSMSCircle: "circle", esriSMSSquare: "square", esriSMSCross: "cross", esriSMSX: "x", esriSMSDiamond: "diamond", esriSMSTriangle: "triangle", esriSMSPath: "path" });
var u = h = class extends i {
  constructor(...e) {
    super(...e), this.color = new l([255, 255, 255, 0.25]), this.type = "simple-marker", this.size = 12, this.style = "circle", this.outline = new m2();
  }
  normalizeCtorArgs(e, o3, r4, t) {
    if (e && "string" != typeof e) return e;
    const i2 = {};
    return e && (i2.style = e), null != o3 && (i2.size = o2(o3)), r4 && (i2.outline = r4), t && (i2.color = t), i2;
  }
  writeColor(e, o3) {
    e && "x" !== this.style && "cross" !== this.style && (o3.color = e.toJSON()), null === e && (o3.color = null);
  }
  set path(e) {
    this.style = "path", this._set("path", e);
  }
  clone() {
    return new h({ angle: this.angle, color: a(this.color), outline: this.outline && this.outline.clone(), path: this.path, size: this.size, style: this.style, xoffset: this.xoffset, yoffset: this.yoffset });
  }
  hash() {
    return `${super.hash()}.${this.color && this.color.hash()}.${this.path}.${this.style}.${this.outline?.hash()}`;
  }
};
r([m()], u.prototype, "color", void 0), r([r2("color")], u.prototype, "writeColor", null), r([r3({ esriSMS: "simple-marker" }, { readOnly: true })], u.prototype, "type", void 0), r([m()], u.prototype, "size", void 0), r([m({ type: m3.apiValues, json: { read: m3.read, write: m3.write } })], u.prototype, "style", void 0), r([m({ type: String, json: { write: true } })], u.prototype, "path", null), r([m({ types: { key: "type", base: null, defaultKeyValue: "simple-line", typeMap: { "simple-line": m2 } }, json: { default: null, write: true } })], u.prototype, "outline", void 0), u = h = r([a3("esri.symbols.SimpleMarkerSymbol")], u);

export {
  i,
  u
};
//# sourceMappingURL=chunk-WO5FLTVY.js.map
