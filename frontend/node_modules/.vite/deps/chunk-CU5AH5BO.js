import {
  c2 as c,
  f2,
  f3,
  h,
  i,
  i2 as i4
} from "./chunk-BDXMFUIK.js";
import {
  L,
  f as f4,
  r,
  t as t3,
  v
} from "./chunk-7UYBH6Y5.js";
import {
  c as c2,
  h as h2
} from "./chunk-7XM5H6MW.js";
import {
  a,
  m,
  n2,
  n3 as n4,
  t2 as t4
} from "./chunk-FG4GN3O4.js";
import {
  e as e3
} from "./chunk-ZJHEVDGY.js";
import {
  d as d2,
  o
} from "./chunk-HGEYMHZP.js";
import {
  d,
  u3 as u2
} from "./chunk-LVWYKDY2.js";
import {
  s2 as s3
} from "./chunk-STTT2VQX.js";
import {
  n as n3
} from "./chunk-7OYWGPJD.js";
import {
  i as i3
} from "./chunk-OMRLA7WF.js";
import {
  o2
} from "./chunk-YFVN6T7B.js";
import {
  p
} from "./chunk-YYCWQ7IY.js";
import {
  d as d3,
  f
} from "./chunk-UUAYISM3.js";
import {
  e as e4
} from "./chunk-5EFSJB5C.js";
import {
  s
} from "./chunk-7WUMTJ26.js";
import {
  s as s2
} from "./chunk-BVAE5L3O.js";
import {
  i as i2
} from "./chunk-OBI6XSOO.js";
import {
  t as t2
} from "./chunk-HXOI7XVG.js";
import {
  u
} from "./chunk-CGESJDPA.js";
import {
  e as e2
} from "./chunk-FL3AEKKI.js";
import {
  n,
  t
} from "./chunk-FXWNGVAA.js";
import {
  e
} from "./chunk-ULRXIASY.js";

// node_modules/@arcgis/core/chunks/RealisticTree.glsl.js
function _(_2) {
  const z2 = new i2(), { attributes: k, vertex: G, fragment: U, varyings: W } = z2, { output: H, offsetBackfaces: q, instancedColor: J, pbrMode: K, snowCover: Q, spherical: X, hasBloom: Y } = _2, Z = K === n2.Normal || K === n2.Schematic;
  if (f(G, _2), k.add(e.POSITION, "vec3"), W.add("vpos", "vec3", { invariant: true }), z2.include(n3, _2), z2.include(f2, _2), z2.include(s3, _2), z2.include(i3, _2), !u(H)) return z2.include(h, _2), z2;
  d3(z2.vertex, _2), z2.include(t2, _2), z2.include(o, _2), q && z2.include(c), J && z2.attributes.add(e.INSTANCECOLOR, "vec4"), W.add("vNormalWorld", "vec3"), W.add("localvpos", "vec3", { invariant: true }), z2.include(d, _2), z2.include(d2, _2), z2.include(i, _2), z2.include(e3, _2), G.uniforms.add(new e4("externalColor", ((e5) => e5.externalColor))), W.add("vcolorExt", "vec4"), G.main.add(n`
    forwardNormalizedVertexColor();
    vcolorExt = externalColor;
    ${t(J, "vcolorExt *= instanceColor * 0.003921568627451;")}
    vcolorExt *= vvColor();
    vcolorExt *= getSymbolColor();
    forwardColorMixMode();

    bool alphaCut = vcolorExt.a < ${n.float(o2)};
    vpos = getVertexInLocalOriginSpace();
    localvpos = vpos - view[3].xyz;
    vpos = subtractOrigin(vpos);
    vNormalWorld = dpNormal(vvLocalNormal(normalModel()));
    vpos = addVerticalOffset(vpos, localOrigin);
    vec4 basePosition = transformPosition(proj, view, vpos);

    forwardViewPosDepth((view * vec4(vpos, 1.0)).xyz);
    forwardLinearDepth();
    forwardTextureCoordinates();

    gl_Position = alphaCut ? vec4(1e38, 1e38, 1e38, 1.0) :
    ${t(q, "offsetBackfacingClipPosition(basePosition, vpos, vNormalWorld, cameraPosition);", "basePosition;")}
  `);
  const { hasColorTexture: ee, hasColorTextureTransform: oe, receiveShadows: re } = _2;
  return z2.include(L, _2), U.include(t3, _2), z2.include(f3, _2), z2.include(_2.instancedDoublePrecision ? c2 : h2, _2), U.include(p, _2), z2.include(u2, _2), d3(U, _2), t4(U), v(U), f4(U), U.uniforms.add(G.uniforms.get("localOrigin"), G.uniforms.get("view"), new e2("ambient", ((e5) => e5.ambient)), new e2("diffuse", ((e5) => e5.diffuse)), new s("opacity", ((e5) => e5.opacity)), new s("layerOpacity", ((e5) => e5.layerOpacity))), ee && U.uniforms.add(new s2("tex", ((e5) => e5.texture))), z2.include(m, _2), U.include(n4, _2), U.include(i4), U.include(r, _2), a(U), U.main.add(n`
    discardBySlice(vpos);
    discardByTerrainDepth();
    vec4 texColor = ${ee ? `texture(tex, ${oe ? "colorUV" : "vuv0"})` : " vec4(1.0)"};
    ${t(ee, `${t(_2.textureAlphaPremultiplied, "texColor.rgb /= texColor.a;")}
      discardOrAdjustAlpha(texColor);`)}
    vec3 viewDirection = normalize(vpos - cameraPosition);
    applyPBRFactors();
    float ssao = evaluateAmbientOcclusionInverse();
    ssao *= getBakedOcclusion();

    float additionalAmbientScale = additionalDirectedAmbientLight(vpos + localOrigin);
    vec3 additionalLight = ssao * mainLightIntensity * additionalAmbientScale * ambientBoostFactor * lightingGlobalFactor;
    float shadow = ${re ? "max(lightingGlobalFactor * (1.0 - additionalAmbientScale), readShadowMap(vpos, linearDepth))" : X ? "lightingGlobalFactor * (1.0 - additionalAmbientScale)" : "0.0"};
    vec3 matColor = max(ambient, diffuse);
    ${_2.hasVertexColors ? n`vec3 albedo = mixExternalColor(vColor.rgb * matColor, texColor.rgb, vcolorExt.rgb, int(colorMixMode));
            float opacity_ = layerOpacity * mixExternalOpacity(vColor.a * opacity, texColor.a, vcolorExt.a, int(colorMixMode));` : n`vec3 albedo = mixExternalColor(matColor, texColor.rgb, vcolorExt.rgb, int(colorMixMode));
            float opacity_ = layerOpacity * mixExternalOpacity(opacity, texColor.a, vcolorExt.a, int(colorMixMode));`}
    ${t(Q, "albedo = mix(albedo, vec3(1), 0.9);")}
    ${n`vec3 shadingNormal = normalize(vNormalWorld);
            albedo *= 1.2;
            vec3 viewForward = vec3(view[0][2], view[1][2], view[2][2]);
            float alignmentLightView = clamp(dot(viewForward, -mainLightDirection), 0.0, 1.0);
            float transmittance = 1.0 - clamp(dot(viewForward, shadingNormal), 0.0, 1.0);
            float treeRadialFalloff = vColor.r;
            float backLightFactor = 0.5 * treeRadialFalloff * alignmentLightView * transmittance * (1.0 - shadow);
            additionalLight += backLightFactor * mainLightIntensity;`}
    ${t(Z, `vec3 normalGround = ${X ? "normalize(vpos + localOrigin)" : "vec3(0.0, 0.0, 1.0)"};`)}
    ${Z ? n`float additionalAmbientIrradiance = additionalAmbientIrradianceFactor * mainLightIntensity[2];
                ${t(Q, n`mrr = applySnowToMRR(mrr, 1.0);`)}
          vec4 emission = ${Q || Y ? "vec4(0.0)" : "getEmissions(albedo)"};
          vec3 shadedColor = evaluateSceneLightingPBR(shadingNormal, albedo, shadow, 1.0 - ssao, additionalLight, viewDirection, normalGround, mrr, emission, additionalAmbientIrradiance);` : n`vec3 shadedColor = evaluateSceneLighting(shadingNormal, albedo, shadow, 1.0 - ssao, additionalLight);`}
    vec4 finalColor = vec4(shadedColor, opacity_);
    outputColorHighlightOID(finalColor, vpos, albedo ${t(Q, ", 1.0")});`), z2.include(h, _2), z2;
}
var z = Object.freeze(Object.defineProperty({ __proto__: null, build: _ }, Symbol.toStringTag, { value: "Module" }));

export {
  _,
  z
};
//# sourceMappingURL=chunk-CU5AH5BO.js.map
