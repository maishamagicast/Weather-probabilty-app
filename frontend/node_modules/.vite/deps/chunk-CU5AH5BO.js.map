{
  "version": 3,
  "sources": ["../../@arcgis/core/chunks/RealisticTree.glsl.js"],
  "sourcesContent": ["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.33/esri/copyright.txt for details.\n*/\nimport{ForwardLinearDepth as e}from\"../views/3d/webgl-engine/core/shaderLibrary/ForwardLinearDepth.glsl.js\";import{Offset as o}from\"../views/3d/webgl-engine/core/shaderLibrary/Offset.glsl.js\";import{isColorOrColorEmission as r}from\"../views/3d/webgl-engine/core/shaderLibrary/ShaderOutput.js\";import{SliceDraw as i}from\"../views/3d/webgl-engine/core/shaderLibrary/Slice.glsl.js\";import{Transform as a}from\"../views/3d/webgl-engine/core/shaderLibrary/Transform.glsl.js\";import{InstancedDoublePrecision as l}from\"../views/3d/webgl-engine/core/shaderLibrary/attributes/InstancedDoublePrecision.glsl.js\";import{NormalAttribute as t}from\"../views/3d/webgl-engine/core/shaderLibrary/attributes/NormalAttribute.glsl.js\";import{SymbolColor as s}from\"../views/3d/webgl-engine/core/shaderLibrary/attributes/SymbolColor.glsl.js\";import{TextureCoordinateAttribute as n}from\"../views/3d/webgl-engine/core/shaderLibrary/attributes/TextureCoordinateAttribute.glsl.js\";import{VertexColor as d}from\"../views/3d/webgl-engine/core/shaderLibrary/attributes/VertexColor.glsl.js\";import{VerticalOffset as c}from\"../views/3d/webgl-engine/core/shaderLibrary/attributes/VerticalOffset.glsl.js\";import{DefaultMaterialAuxiliaryPasses as g}from\"../views/3d/webgl-engine/core/shaderLibrary/default/DefaultMaterialAuxiliaryPasses.glsl.js\";import{EvaluateAmbientOcclusion as m}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/EvaluateAmbientOcclusion.glsl.js\";import{EvaluateSceneLighting as v,addAmbientBoostFactor as b,addLightingGlobalFactor as w}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/EvaluateSceneLighting.glsl.js\";import{addMainLightDirection as p,addMainLightIntensity as u}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/MainLighting.glsl.js\";import{PhysicallyBasedRendering as h}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/PhysicallyBasedRendering.glsl.js\";import{PBRMode as f,PhysicallyBasedRenderingParameters as x}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/PhysicallyBasedRenderingParameters.glsl.js\";import{ReadShadowMapPass as y,ReadShadowMapDraw as C}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/ReadShadowMap.glsl.js\";import{terrainDepthTest as L}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/TerrainDepthTest.glsl.js\";import{VisualVariables as j}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/VisualVariables.glsl.js\";import{DiscardOrAdjustAlphaPass as O}from\"../views/3d/webgl-engine/core/shaderLibrary/util/DiscardOrAdjustAlpha.glsl.js\";import{MixExternalColor as M}from\"../views/3d/webgl-engine/core/shaderLibrary/util/MixExternalColor.glsl.js\";import{addProjViewLocalOrigin as P,addCameraPosition as S}from\"../views/3d/webgl-engine/core/shaderLibrary/util/View.glsl.js\";import{Float3PassUniform as A}from\"../views/3d/webgl-engine/core/shaderModules/Float3PassUniform.js\";import{Float4PassUniform as E}from\"../views/3d/webgl-engine/core/shaderModules/Float4PassUniform.js\";import{FloatPassUniform as D}from\"../views/3d/webgl-engine/core/shaderModules/FloatPassUniform.js\";import{If as F,glsl as $}from\"../views/3d/webgl-engine/core/shaderModules/glsl.js\";import{Texture2DPassUniform as N}from\"../views/3d/webgl-engine/core/shaderModules/Texture2DPassUniform.js\";import{SnowCover as I}from\"../views/3d/webgl-engine/effects/weather/SnowCover.glsl.js\";import{VertexAttribute as T}from\"../views/3d/webgl-engine/lib/VertexAttribute.js\";import{outputColorHighlightOID as V}from\"../views/3d/webgl-engine/shaders/OutputColorHighlightOID.glsl.js\";import{ShaderBuilder as B}from\"../views/webgl/ShaderBuilder.js\";import{alphaCutoff as R}from\"../webscene/support/AlphaCutoff.js\";function _(_){const z=new B,{attributes:k,vertex:G,fragment:U,varyings:W}=z,{output:H,offsetBackfaces:q,instancedColor:J,pbrMode:K,snowCover:Q,spherical:X,hasBloom:Y}=_,Z=K===f.Normal||K===f.Schematic;if(P(G,_),k.add(T.POSITION,\"vec3\"),W.add(\"vpos\",\"vec3\",{invariant:!0}),z.include(j,_),z.include(l,_),z.include(c,_),z.include(L,_),!r(H))return z.include(g,_),z;S(z.vertex,_),z.include(t,_),z.include(a,_),q&&z.include(o),J&&z.attributes.add(T.INSTANCECOLOR,\"vec4\"),W.add(\"vNormalWorld\",\"vec3\"),W.add(\"localvpos\",\"vec3\",{invariant:!0}),z.include(n,_),z.include(e,_),z.include(s,_),z.include(d,_),G.uniforms.add(new E(\"externalColor\",(e=>e.externalColor))),W.add(\"vcolorExt\",\"vec4\"),G.main.add($`\n    forwardNormalizedVertexColor();\n    vcolorExt = externalColor;\n    ${F(J,\"vcolorExt *= instanceColor * 0.003921568627451;\")}\n    vcolorExt *= vvColor();\n    vcolorExt *= getSymbolColor();\n    forwardColorMixMode();\n\n    bool alphaCut = vcolorExt.a < ${$.float(R)};\n    vpos = getVertexInLocalOriginSpace();\n    localvpos = vpos - view[3].xyz;\n    vpos = subtractOrigin(vpos);\n    vNormalWorld = dpNormal(vvLocalNormal(normalModel()));\n    vpos = addVerticalOffset(vpos, localOrigin);\n    vec4 basePosition = transformPosition(proj, view, vpos);\n\n    forwardViewPosDepth((view * vec4(vpos, 1.0)).xyz);\n    forwardLinearDepth();\n    forwardTextureCoordinates();\n\n    gl_Position = alphaCut ? vec4(1e38, 1e38, 1e38, 1.0) :\n    ${F(q,\"offsetBackfacingClipPosition(basePosition, vpos, vNormalWorld, cameraPosition);\",\"basePosition;\")}\n  `);const{hasColorTexture:ee,hasColorTextureTransform:oe,receiveShadows:re}=_;return z.include(v,_),U.include(m,_),z.include(O,_),z.include(_.instancedDoublePrecision?y:C,_),U.include(i,_),z.include(V,_),S(U,_),p(U),b(U),w(U),U.uniforms.add(G.uniforms.get(\"localOrigin\"),G.uniforms.get(\"view\"),new A(\"ambient\",(e=>e.ambient)),new A(\"diffuse\",(e=>e.diffuse)),new D(\"opacity\",(e=>e.opacity)),new D(\"layerOpacity\",(e=>e.layerOpacity))),ee&&U.uniforms.add(new N(\"tex\",(e=>e.texture))),z.include(x,_),U.include(h,_),U.include(M),U.include(I,_),u(U),U.main.add($`\n    discardBySlice(vpos);\n    discardByTerrainDepth();\n    vec4 texColor = ${ee?`texture(tex, ${oe?\"colorUV\":\"vuv0\"})`:\" vec4(1.0)\"};\n    ${F(ee,`${F(_.textureAlphaPremultiplied,\"texColor.rgb /= texColor.a;\")}\\n      discardOrAdjustAlpha(texColor);`)}\n    vec3 viewDirection = normalize(vpos - cameraPosition);\n    applyPBRFactors();\n    float ssao = evaluateAmbientOcclusionInverse();\n    ssao *= getBakedOcclusion();\n\n    float additionalAmbientScale = additionalDirectedAmbientLight(vpos + localOrigin);\n    vec3 additionalLight = ssao * mainLightIntensity * additionalAmbientScale * ambientBoostFactor * lightingGlobalFactor;\n    float shadow = ${re?\"max(lightingGlobalFactor * (1.0 - additionalAmbientScale), readShadowMap(vpos, linearDepth))\":X?\"lightingGlobalFactor * (1.0 - additionalAmbientScale)\":\"0.0\"};\n    vec3 matColor = max(ambient, diffuse);\n    ${_.hasVertexColors?$`vec3 albedo = mixExternalColor(vColor.rgb * matColor, texColor.rgb, vcolorExt.rgb, int(colorMixMode));\n            float opacity_ = layerOpacity * mixExternalOpacity(vColor.a * opacity, texColor.a, vcolorExt.a, int(colorMixMode));`:$`vec3 albedo = mixExternalColor(matColor, texColor.rgb, vcolorExt.rgb, int(colorMixMode));\n            float opacity_ = layerOpacity * mixExternalOpacity(opacity, texColor.a, vcolorExt.a, int(colorMixMode));`}\n    ${F(Q,\"albedo = mix(albedo, vec3(1), 0.9);\")}\n    ${$`vec3 shadingNormal = normalize(vNormalWorld);\n            albedo *= 1.2;\n            vec3 viewForward = vec3(view[0][2], view[1][2], view[2][2]);\n            float alignmentLightView = clamp(dot(viewForward, -mainLightDirection), 0.0, 1.0);\n            float transmittance = 1.0 - clamp(dot(viewForward, shadingNormal), 0.0, 1.0);\n            float treeRadialFalloff = vColor.r;\n            float backLightFactor = 0.5 * treeRadialFalloff * alignmentLightView * transmittance * (1.0 - shadow);\n            additionalLight += backLightFactor * mainLightIntensity;`}\n    ${F(Z,`vec3 normalGround = ${X?\"normalize(vpos + localOrigin)\":\"vec3(0.0, 0.0, 1.0)\"};`)}\n    ${Z?$`float additionalAmbientIrradiance = additionalAmbientIrradianceFactor * mainLightIntensity[2];\n                ${F(Q,$`mrr = applySnowToMRR(mrr, 1.0);`)}\n          vec4 emission = ${Q||Y?\"vec4(0.0)\":\"getEmissions(albedo)\"};\n          vec3 shadedColor = evaluateSceneLightingPBR(shadingNormal, albedo, shadow, 1.0 - ssao, additionalLight, viewDirection, normalGround, mrr, emission, additionalAmbientIrradiance);`:$`vec3 shadedColor = evaluateSceneLighting(shadingNormal, albedo, shadow, 1.0 - ssao, additionalLight);`}\n    vec4 finalColor = vec4(shadedColor, opacity_);\n    outputColorHighlightOID(finalColor, vpos, albedo ${F(Q,\", 1.0\")});`),z.include(g,_),z}const z=Object.freeze(Object.defineProperty({__proto__:null,build:_},Symbol.toStringTag,{value:\"Module\"}));export{z as R,_ as b};\n"],
  "mappings": "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",
  "names": ["_", "z", "i", "n", "f", "s", "d", "t", "e", "o", "c", "h", "u"]
}
