import {
  o as o2
} from "./chunk-LP5PTXVN.js";
import {
  f as f2
} from "./chunk-EWP4DLQF.js";
import {
  p
} from "./chunk-CHGKJUJ3.js";
import "./chunk-3YBQQHIP.js";
import "./chunk-OJQCHQYS.js";
import {
  t
} from "./chunk-N3W3EVP3.js";
import {
  b2 as b
} from "./chunk-ZJXLBTN2.js";
import "./chunk-SIRTOV2N.js";
import {
  S
} from "./chunk-OFINLTIW.js";
import "./chunk-W3BJJE6D.js";
import "./chunk-UZ3YWBWC.js";
import "./chunk-2EOHKZLO.js";
import {
  j,
  l
} from "./chunk-KLTPDVMD.js";
import {
  t as t2
} from "./chunk-MX6AIKIJ.js";
import {
  h
} from "./chunk-R25QZWQ7.js";
import "./chunk-BPI4BR4E.js";
import "./chunk-XRTNDGK2.js";
import "./chunk-A6R2FXH6.js";
import "./chunk-H6ZVHKNF.js";
import "./chunk-YAXW2DL6.js";
import "./chunk-W5UOLFE2.js";
import "./chunk-AZ2S2PYZ.js";
import "./chunk-FOPBVVXE.js";
import "./chunk-INI6MHIQ.js";
import "./chunk-QUZZIDFR.js";
import "./chunk-CBCDVQSA.js";
import "./chunk-74GULGYB.js";
import "./chunk-RKF6WUZT.js";
import {
  u
} from "./chunk-BLBN3L5Q.js";
import "./chunk-TOCH3L2K.js";
import {
  z
} from "./chunk-CBXZL53X.js";
import "./chunk-HYAO4PVV.js";
import "./chunk-SRNKPAJX.js";
import "./chunk-MOMLPET6.js";
import "./chunk-VNQUG2TO.js";
import "./chunk-EULNFFHG.js";
import "./chunk-SDIBXPSJ.js";
import "./chunk-LPCUYJ2B.js";
import "./chunk-3QHX4R4B.js";
import {
  _
} from "./chunk-SMO33YG7.js";
import {
  f
} from "./chunk-LCBAL6ER.js";
import "./chunk-6JCZVSRM.js";
import "./chunk-LLGOMKTE.js";
import "./chunk-ZB6KRLRI.js";
import "./chunk-67AKDROO.js";
import "./chunk-CM3TIXEV.js";
import {
  H
} from "./chunk-2AYGXVZI.js";
import "./chunk-OUZJZB6I.js";
import "./chunk-4AKMPOG7.js";
import "./chunk-2CJBZZN7.js";
import "./chunk-ZJQPHR3K.js";
import "./chunk-NJZD7WM5.js";
import "./chunk-CL7VLXUR.js";
import "./chunk-FCX4ZA3Z.js";
import {
  i as i2,
  m2 as m
} from "./chunk-2ZPU5IZX.js";
import {
  a2 as a
} from "./chunk-S62CSPIH.js";
import "./chunk-X26VPODZ.js";
import {
  o
} from "./chunk-XNYPRDKK.js";
import "./chunk-JNYZ3I5R.js";
import {
  r
} from "./chunk-Y4BWIIWH.js";
import "./chunk-TTJIKWMC.js";
import "./chunk-CMEG2CKL.js";
import "./chunk-VHPBXBDE.js";
import "./chunk-6ACTD4UJ.js";
import "./chunk-5REYU5G2.js";
import "./chunk-N626Y23H.js";
import {
  i3 as i,
  s2 as s
} from "./chunk-TJPLHZCD.js";
import "./chunk-KLFJ5V5G.js";
import "./chunk-G26ADAPQ.js";

// node_modules/@arcgis/core/layers/BaseTileLayer.js
var u2;
var h2 = new t2("0/0/0", 0, 0, 0, void 0);
var g = u2 = class extends p(t(f2(h))) {
  constructor() {
    super(...arguments), this.tileInfo = j.create({ spatialReference: f.WebMercator, size: 256 }), this.type = "base-tile", this.fullExtent = new z(-20037508342787e-6, -2003750834278e-5, 2003750834278e-5, 20037508342787e-6, f.WebMercator), this.spatialReference = f.WebMercator;
  }
  addResolvingPromise(e) {
    super.addResolvingPromise(e);
  }
  getTileBounds(e, t3, r2, o3) {
    const s2 = o3 || u();
    return h2.level = e, h2.row = t3, h2.col = r2, h2.extent = s2, this.tileInfo.updateTileInfo(h2), h2.extent = void 0, s2;
  }
  fetchTile(e, r2, o3, s2 = {}) {
    const { signal: i3 } = s2, a2 = this.getTileUrl(e, r2, o3), p2 = { responseType: "image", signal: i3, query: { ...this.refreshParameters } };
    return H(a2 ?? "", p2).then(((e2) => e2.data));
  }
  async fetchImageBitmapTile(e, r2, o3, s2 = {}) {
    const { signal: i3 } = s2;
    if (this.fetchTile !== u2.prototype.fetchTile) {
      const t3 = await this.fetchTile(e, r2, o3, s2);
      return o2(t3, e, r2, o3, i3);
    }
    const a2 = this.getTileUrl(e, r2, o3) ?? "", p2 = { responseType: "blob", signal: i3, query: { ...this.refreshParameters } }, { data: l2 } = await H(a2, p2);
    return o2(l2, e, r2, o3, i3);
  }
  getTileUrl() {
    throw new s("basetilelayer:gettileurl-not-implemented", "getTileUrl() is not implemented");
  }
};
r([m({ type: j })], g.prototype, "tileInfo", void 0), r([m({ type: ["show", "hide"] })], g.prototype, "listMode", void 0), r([m({ readOnly: true, value: "base-tile" })], g.prototype, "type", void 0), r([m({ nonNullable: true })], g.prototype, "fullExtent", void 0), r([m()], g.prototype, "spatialReference", void 0), g = u2 = r([a("esri.layers.BaseTileLayer")], g);

// node_modules/@arcgis/core/layers/BingMapsLayer.js
var h3 = new o({ BingMapsAerial: "aerial", BingMapsRoad: "road", BingMapsHybrid: "hybrid" });
var b2 = "https://dev.virtualearth.net";
i2(i.getLogger("esri.layers.BingMapsLayer"), "esri.layers.BingMapsLayer", { version: "4.33", warnOnce: true });
var w = class extends p(b(S(g))) {
  constructor(e) {
    super(e), this.type = "bing-maps", this.tileInfo = new j({ size: [256, 256], dpi: 96, origin: new _({ x: -20037508342787e-6, y: 20037508342787e-6, spatialReference: f.WebMercator }), spatialReference: f.WebMercator, lods: [new l({ level: 1, resolution: 78271.5169639999, scale: 295828763795777e-6 }), new l({ level: 2, resolution: 39135.7584820001, scale: 147914381897889e-6 }), new l({ level: 3, resolution: 19567.8792409999, scale: 73957190948944e-6 }), new l({ level: 4, resolution: 9783.93962049996, scale: 36978595474472e-6 }), new l({ level: 5, resolution: 4891.96981024998, scale: 18489297737236e-6 }), new l({ level: 6, resolution: 2445.98490512499, scale: 9244648868618e-6 }), new l({ level: 7, resolution: 1222.99245256249, scale: 4622324434309e-6 }), new l({ level: 8, resolution: 611.49622628138, scale: 2311162217155e-6 }), new l({ level: 9, resolution: 305.748113140558, scale: 1155581108577e-6 }), new l({ level: 10, resolution: 152.874056570411, scale: 577790.554289 }), new l({ level: 11, resolution: 76.4370282850732, scale: 288895.277144 }), new l({ level: 12, resolution: 38.2185141425366, scale: 144447.638572 }), new l({ level: 13, resolution: 19.1092570712683, scale: 72223.819286 }), new l({ level: 14, resolution: 9.55462853563415, scale: 36111.909643 }), new l({ level: 15, resolution: 4.77731426794937, scale: 18055.954822 }), new l({ level: 16, resolution: 2.38865713397468, scale: 9027.977411 }), new l({ level: 17, resolution: 1.19432856685505, scale: 4513.988705 }), new l({ level: 18, resolution: 0.597164283559817, scale: 2256.994353 }), new l({ level: 19, resolution: 0.298582141647617, scale: 1128.497176 }), new l({ level: 20, resolution: 0.1492910708238085, scale: 564.248588 })] }), this.key = null, this.style = "road", this.culture = "en-US", this.region = null, this.portalUrl = null, this.hasAttributionData = true;
  }
  get bingMetadata() {
    return this._get("bingMetadata");
  }
  set bingMetadata(e) {
    this._set("bingMetadata", e);
  }
  get copyright() {
    return null != this.bingMetadata ? this.bingMetadata.copyright : null;
  }
  get operationalLayerType() {
    return h3.toJSON(this.style);
  }
  get bingLogo() {
    return null != this.bingMetadata ? this.bingMetadata.brandLogoUri : null;
  }
  load(e) {
    return this.key ? this.addResolvingPromise(this._getMetadata()) : this.portalUrl ? this.addResolvingPromise(this._getPortalBingKey().then((() => this._getMetadata()))) : this.addResolvingPromise(Promise.reject(new s("bingmapslayer:load", "Bing layer must have bing key."))), Promise.resolve(this);
  }
  getTileUrl(e, t3, r2) {
    if (!this.loaded || null == this.bingMetadata) return null;
    const o3 = this.bingMetadata.resourceSets[0].resources[0], a2 = o3.imageUrlSubdomains[t3 % o3.imageUrlSubdomains.length], s2 = this._getQuadKey(e, t3, r2);
    return o3.imageUrl.replace("{subdomain}", a2).replace("{quadkey}", s2);
  }
  async fetchAttributionData() {
    return this.load().then((() => {
      if (null == this.bingMetadata) return null;
      return { contributors: this.bingMetadata.resourceSets[0].resources[0].imageryProviders.map(((e) => ({ attribution: e.attribution, coverageAreas: e.coverageAreas.map(((e2) => ({ zoomMin: e2.zoomMin, zoomMax: e2.zoomMax, score: 1, bbox: [e2.bbox[0], e2.bbox[1], e2.bbox[2], e2.bbox[3]] }))) }))) };
    }));
  }
  _getMetadata() {
    const e = { road: "roadOnDemand", aerial: "aerial", hybrid: "aerialWithLabelsOnDemand" }[this.style];
    return H(`${b2}/REST/v1/Imagery/Metadata/${e}`, { responseType: "json", query: { include: "ImageryProviders", uriScheme: "https", key: this.key, suppressStatus: true, output: "json", culture: this.culture, userRegion: this.region } }).then(((e2) => {
      const t3 = e2.data;
      if (200 !== t3.statusCode) throw new s("bingmapslayer:getmetadata", t3.statusDescription);
      if (this.bingMetadata = t3, 0 === this.bingMetadata.resourceSets.length) throw new s("bingmapslayer:getmetadata", "no bing resourcesets");
      if (0 === this.bingMetadata.resourceSets[0].resources.length) throw new s("bingmapslayer:getmetadata", "no bing resources");
    })).catch(((e2) => {
      throw new s("bingmapslayer:getmetadata", e2.message);
    }));
  }
  _getPortalBingKey() {
    return H(this.portalUrl ?? "", { responseType: "json", authMode: "no-prompt", query: { f: "json" } }).then(((e) => {
      if (!e.data.bingKey) throw new s("bingmapslayer:getportalbingkey", "The referenced Portal does not contain a valid bing key");
      this.key = e.data.bingKey;
    })).catch(((e) => {
      throw new s("bingmapslayer:getportalbingkey", e.message);
    }));
  }
  _getQuadKey(e, t3, r2) {
    let o3 = "";
    for (let a2 = e; a2 > 0; a2--) {
      let e2 = 0;
      const s2 = 1 << a2 - 1;
      0 !== (r2 & s2) && (e2 += 1), 0 !== (t3 & s2) && (e2 += 2), o3 += e2.toString();
    }
    return o3;
  }
};
r([m({ json: { read: false, write: false }, value: null })], w.prototype, "bingMetadata", null), r([m({ json: { read: false, write: false }, value: "bing-maps", readOnly: true })], w.prototype, "type", void 0), r([m({ type: j })], w.prototype, "tileInfo", void 0), r([m({ type: String, readOnly: true, json: { read: false, write: false } })], w.prototype, "copyright", null), r([m({ type: String, json: { write: false, read: false } })], w.prototype, "key", void 0), r([m({ type: h3.apiValues, nonNullable: true, json: { read: { source: "layerType", reader: h3.read } } })], w.prototype, "style", void 0), r([m({ type: ["BingMapsAerial", "BingMapsHybrid", "BingMapsRoad"] })], w.prototype, "operationalLayerType", null), r([m({ type: String, json: { write: false, read: false } })], w.prototype, "culture", void 0), r([m({ type: String, json: { write: false, read: false } })], w.prototype, "region", void 0), r([m({ type: String, json: { write: true, read: true } })], w.prototype, "portalUrl", void 0), r([m({ type: Boolean, json: { write: false, read: false } })], w.prototype, "hasAttributionData", void 0), r([m({ type: String, readOnly: true })], w.prototype, "bingLogo", null), w = r([a("esri.layers.BingMapsLayer")], w);
var v = w;
export {
  v as default
};
//# sourceMappingURL=BingMapsLayer-CUEGKOAX.js.map
