/**
 * Convert kebab-case string to PascalCase
 *
 * @example
 * ```ts
 * const pascal = kebabToPascal("my-component-name");
 * // MyComponentName
 */
export declare const kebabToPascal: (string: string) => string;
/**
 * Convert camelCase string to kebab-case
 *
 * @example
 * ```ts
 * const kebab = camelToKebab("myComponentName");
 * // my-component-name
 * ```
 */
export declare const camelToKebab: (string: string) => string;
/**
 * Convert camelCase string to Sentence case.
 *
 * @example
 * ```ts
 * const human = camelToHuman("myComponentName");
 * // My component name
 * ```
 */
export declare const camelToHuman: (string: string) => string;
/** Capitalize the first letter of a string. */
export declare const capitalize: <T extends string>(string: T) => Capitalize<T>;
/** Uncapitalize the first letter of a string. */
export declare const uncapitalize: <T extends string>(string: T) => Uncapitalize<T>;
/**
 * Add quotes to a string for display purposes.
 * If the string contains a double quote, then single quotes will be used.
 * If the string contains a single quote, then double quotes will be used.
 * If the string contains both, then double quotes will be used and the single quotes will be escaped.
 */
export declare const quoteString: (value: string) => string;
/**
 * Create a filter expression from a filter word.
 *
 * @remarks Once browser support permits, use `RegExp.escape()` instead.
 * @todo DEPRECATE
 */
export declare const createFilterExpression: (filterWord: string) => RegExp;
/**
 * Add LTR marks to a string to ensure it is displayed as LTR even in RTL contexts.
 * @param value The string to add LTR marks to.
 * @returns The string with LTR marks.
 *
 * @example
 * ```ts
 * // Without addLtrMark, this will render as arcadeVariable$ in RTL languages.
 * return <div>{addLtrMark("$arcadeVariable")}</div>;
 */
export declare const addLtrMark: (value: string | undefined) => string;
/**
 * A string containing a randomly generated, 36 character long v4 UUID.
 */
export type UUID = ReturnType<typeof crypto.randomUUID>;
/**
 * Generate a GUID string.
 * @example
 * ```ts
 * const id = generateGuid();
 * // 00000000-0000-0000-0000-000000000000.
 * ```
 *
 * @remarks
 * If your component is using shadow root, the DOM element IDs do not need
 * to be globally unique.
 */
export declare const generateGuid: () => UUID;
/**
 * Extract the major and minor version from a full version string.
 *
 * @example
 * ```ts
 * const minorVersion = getMinorVersion("4.34.0-next.123");
 * // "4.34"
 * ```
 */
export declare const getMinorVersion: (version: string) => string;
/**
 * Create a preamble text from a version number. Preamble text is used as legal
 * notice at the top of a file.
 * The preamble text contains the version number and a link to the license.
 * The version number should normally come from package.json.
 * @example
 * ```ts
 * const preamble = getPreamble("4.34.0-next.123");
 * // All material copyright Esri, All Rights Reserved, unless otherwise specified.
 * // See https://js.arcgis.com/4.34/esri/copyright.txt for details.
 * // v4.34.0-next.123
 * ```
 */
export declare const getPreamble: (version: string) => string;
/**
 * Replace values in a string using the format {valueName} with the value from the values object.
 * If the value is not found in the values object, then the value is not replaced.
 *
 * @deprecated Import from https://next.gha.afd.arcgis.com/javascript/latest/api-reference/esri-intl.html#substitute instead
 */
export declare const setValuesInString: (message: string | null | undefined, values?: Record<string, string>) => string;
