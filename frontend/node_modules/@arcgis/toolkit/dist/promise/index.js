class Deferred {
  /**
   * Creates a new deferred promise.
   */
  constructor() {
    this.promise = new Promise((resolve, reject) => {
      this.resolve = resolve;
      this.reject = reject;
    });
  }
}
const devToolsAwareTimeout = (callback, timeout) => {
  const interval = timeout > longTimeoutThreshold ? longTimeoutInterval : timeout / shortTimeoutIntervals;
  let elapsed = 0;
  const reference = setInterval(() => {
    elapsed += interval;
    if (elapsed >= timeout) {
      clearInterval(reference);
      callback();
    }
  }, interval);
  return reference;
};
const longTimeoutThreshold = 4e3;
const longTimeoutInterval = 2e3;
const shortTimeoutIntervals = 4;
export {
  Deferred,
  devToolsAwareTimeout
};
