declare const supportedLocalesArray: ["ar", "bg", "bs", "ca", "cs", "da", "de", "el", "en", "es", "et", "fi", "fr", "he", "hr", "hu", "id", "it", "ja", "ko", "lt", "lv", "nl", "nb", "no", "pl", "pt-BR", "pt-PT", "ro", "ru", "sk", "sl", "sr", "sv", "th", "tr", "uk", "vi", "zh-CN", "zh-HK", "zh-TW"];
/**
 * The list of supported locales for ArcGIS Maps SDK for JavaScript components.
 */
export declare const supportedLocales: Set<"hr" | "th" | "tr" | "ar" | "bg" | "bs" | "ca" | "cs" | "da" | "de" | "el" | "en" | "es" | "et" | "fi" | "fr" | "he" | "hu" | "id" | "it" | "ja" | "ko" | "lt" | "lv" | "nl" | "nb" | "no" | "pl" | "pt-BR" | "pt-PT" | "ro" | "ru" | "sk" | "sl" | "sr" | "sv" | "uk" | "vi" | "zh-CN" | "zh-HK" | "zh-TW">;
/**
 * TypeScript union type for each locale supported by WebGIS SDK
 */
export type SupportedLocale = (typeof supportedLocalesArray)[number];
/**
 * The default locale for WebGIS SDK.
 */
export declare const defaultLocale = "en";
/**
 * Fetch the T9N strings bundle for the given locale, assets path and prefix.
 * The locale must be one of the supported locales.
 * If the locale is not supported, it will default to 'en'.
 * If the T9N strings bundle cannot be found, it will default to 'en'.
 *
 * @param locale The locale for which to fetch the T9N strings
 * @param assetsPath The path to the assets folder where the T9N strings are located
 * @param prefix The prefix to use for the T9N strings file name.
 *
 * @remarks
 * Rather than using this function directly, prefer the
 * [useT9n()](https://qawebgis.esri.com/components/lumina/controllers/useT9n)
 * controller.
 *
 * @remarks
 * The function implements cache. Frequent calls are safe.
 *
 * @example
 * ```ts
 * // Will make a request for ./assets/coding-editor/t9n/messages.en.json
 * const t9nStrings = await fetchT9nStringsBundle(
 *   "en",
 *   getAssetPath("./assets/coding-editor/t9n"),
 *   "messages."
 * );
 * ```
 *
 * @see [Lumina asset handling](https://qawebgis.esri.com/components/lumina/assets)
 */
export declare const fetchT9nStringsBundle: <Strings extends GenericT9nStrings>(locale: string, assetsPath: string, prefix?: string) => Promise<Strings>;
/**
 * The interface for translated strings.
 */
export interface GenericT9nStrings {
    [key: string]: GenericT9nStrings | string;
}
/**
 * Get the locale of the given element.
 * It will look for the lang attribute on the element and its ancestors.
 * If not lang is found, it will default to 'en'.
 *
 * @returns an object with the `lang` and `t9nLocale` properties.
 *
 * @see [lang vs t9nLocale](https://qawebgis.esri.com/components/lumina/controllers/useT9n#difference-between-lang-and-t9nlocale).
 */
export declare const getElementLocale: (element: HTMLElement) => {
    readonly lang: string;
    readonly t9nLocale: SupportedLocale;
};
/**
 * Try to parse any language string into one of the locales supported by WebGIS SDK.
 *
 * @remarks
 * If language includes a region code, but we don't have a bundle for it, the
 * language is normalized to the language code only.
 */
export declare const normalizeLocale: (lang: string) => SupportedLocale;
export interface LocaleObserverResult<Strings extends GenericT9nStrings = GenericT9nStrings> {
    /** The T9N strings of the component */
    t9nStrings: Strings;
    /**
     * The locale of the component set by the `lang` attribute on the component host element or one of its ancestors.
     */
    lang: string;
    /**
     * The locale used by the component to load the T9N strings.
     * It may be different than the locale of the component host element that was set by the `lang` attribute.
     */
    t9nLocale: SupportedLocale;
}
/**
 * Start the locale observer for the given component.
 * The callback will be called when the locale changes for the component.
 * It will observe the lang attribute on the component and its ancestors.
 * The callback is called once at the beginning.
 *
 * @param element The HTML element that is doing the fetching
 *   This is used to determine the locale to fetch, observe the `lang` attribute
 *   changes, and is used as the default value for the `assetName` parameter.
 * @param getAssetsPath The callback to get path to the assets folder where the
 *   T9N strings are located.
 * @param onUpdated The callback to call when the locale changes.
 * @param assetName Optionally override the asset file name.
 *   Default file name is the element tag name without the part before the
 *   first dash (e.g. `arcgis-map` becomes `map`).
 *
 *   Set to null if the component has no localization strings, but you still
 *   wish to use `startLocaleObserver` to get the locale information.
 *
 * @remarks
 * Rather than using this function directly, prefer the
 * [useT9n()](https://qawebgis.esri.com/components/lumina/controllers/useT9n)
 * controller.
 *
 * @example
 * ```ts
 * const observer = startLocaleObserver(
 *   element,
 *   () => getAssetPath("./assets"),
 *   ({ strings, lang, t9nLocale }) => console.log({ strings, lang, t9nLocale }),
 * );
 * // Later: cleanup
 * observer();
 * ```
 */
export declare const startLocaleObserver: <Strings extends GenericT9nStrings = GenericT9nStrings>(element: HTMLElement, getAssetsPath: () => string, onUpdated: (payload: LocaleObserverResult<Strings>) => void, assetName?: string | null) => (() => void);
export {};
