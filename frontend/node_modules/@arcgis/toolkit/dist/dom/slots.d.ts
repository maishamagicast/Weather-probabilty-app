/**
 * Returns `true` if the target `slot` element from the `onSlotchange` event has any content (text or elements).
 *
 * @param event The event.
 * @returns Whether the slot has any content.
 *
 * @example
 * ```tsx
 * <slot onSlotchange={(event) => this.mySlotHasContent = slotChangeHasContent(event)} />}
 * ```
 */
export declare function slotChangeHasContent(event: Event): boolean;
/**
 * Returns a string of textContent if the target `slot` element from the `onSlotchange` event has any text content.
 *
 * @param event The event.
 * @returns {string} The slots text.
 *
 * @example
 * ```tsx
 * <slot onSlotchange={(event) => this.mySlotText = slotChangeGetTextContent(event)} />}
 * ```
 */
export declare function slotChangeGetTextContent(event: Event): string;
/**
 * Returns `true` if the target `slot` element from the `onSlotchange` event has any text content.
 *
 * @param event The event.
 * @returns Whether the slot has any text content.
 *
 * @example
 * ```tsx
 * <slot onSlotchange={(event) => this.mySlotHasTextContent = slotChangeHasTextContent(event)} />}
 * ```
 */
export declare function slotChangeHasTextContent(event: Event): boolean;
/**
 * Returns `true` if the target `slot` element from the `onSlotchange` event has an assigned node.
 *
 * @param event The event.
 * @returns Whether the slot has any assigned nodes.
 *
 * @example
 * ```tsx
 * <slot onSlotchange={(event) => this.mySlotHasNode = slotChangeHasAssignedNode(event)} />}
 * ```
 */
export declare function slotChangeHasAssignedNode(event: Event): boolean;
/**
 * Returns the assigned nodes on a `slot` element from the `onSlotchange` event.
 *
 * @param event The event.
 * @returns Whether the slot has any assigned nodes.
 *
 * @example
 * ```tsx
 * <slot onSlotchange={(event) => this.mySlotNodes = slotChangeGetAssignedNodes(event)} />}
 * ```
 */
export declare function slotChangeGetAssignedNodes(event: Event): Node[];
/**
 * Returns `true` if the target `slot` element from the `onSlotchange` event has an assigned element.
 *
 * @param event The event.
 * @returns Whether the slot has any assigned elements.
 *
 * @example
 * ```tsx
 * <slot onSlotchange={(event) => this.mySlotHasElement = slotChangeHasAssignedElement(event)} />}
 * ```
 */
export declare function slotChangeHasAssignedElement(event: Event): boolean;
/**
 * Returns the assigned elements on a `slot` element from the `onSlotchange` event.
 *
 * @param {Event} event The event.
 * @param {string} selector The CSS selector string to filter the returned elements by.
 * @returns {Element[]} An array of elements.
 *
 * @example
 * ```tsx
 * <slot onSlotchange={(event) => this.mySlotElements = slotChangeGetAssignedElements(event)} />}
 * ```
 */
export declare function slotChangeGetAssignedElements<T extends Element>(event: Event, selector?: string): T[];
/**
 * Returns the assigned elements on a `slot` element, filtered by an optional css selector.
 *
 * @param {HTMLSlotElement} slot The slot element.
 * @param {string} selector CSS selector string to filter the returned elements by.
 * @returns {Element[]} An array of elements.
 */
export declare function getSlotAssignedElements<T extends Element>(slot: HTMLSlotElement, selector?: string): T[];
